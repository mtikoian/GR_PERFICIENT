 /*

Stored Procedures to Deploy:

[stp_I_ProfitabilityActualIndex]
[stp_I_ProfitabilityBudgetIndex]
[stp_I_ProfitabilityReforecastIndex]

[All report stp]

*/ 


USE [GrReporting]
GO

/****** Object:  StoredProcedure [dbo].[stp_D_ProfitabilityActualIndex]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_D_ProfitabilityActualIndex]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_D_ProfitabilityActualIndex]
GO

/****** Object:  StoredProcedure [dbo].[stp_D_ProfitabilityBudgetIndex]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_D_ProfitabilityBudgetIndex]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_D_ProfitabilityBudgetIndex]
GO

/****** Object:  StoredProcedure [dbo].[stp_D_ProfitabilityReforecastIndex]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_D_ProfitabilityReforecastIndex]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_D_ProfitabilityReforecastIndex]
GO

/****** Object:  StoredProcedure [dbo].[stp_I_ProfitabilityActualIndex]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_I_ProfitabilityActualIndex]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_I_ProfitabilityActualIndex]
GO

/****** Object:  StoredProcedure [dbo].[stp_I_ProfitabilityBudgetIndex]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_I_ProfitabilityBudgetIndex]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_I_ProfitabilityBudgetIndex]
GO

/****** Object:  StoredProcedure [dbo].[stp_I_ProfitabilityReforecastIndex]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_I_ProfitabilityReforecastIndex]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_I_ProfitabilityReforecastIndex]
GO

/****** Object:  StoredProcedure [dbo].[stp_R_BudgetJobCodeDetail]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_R_BudgetJobCodeDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_R_BudgetJobCodeDetail]
GO

/****** Object:  StoredProcedure [dbo].[stp_R_BudgetOriginator]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_R_BudgetOriginator]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_R_BudgetOriginator]
GO

/****** Object:  StoredProcedure [dbo].[stp_R_BudgetOwner]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_R_BudgetOwner]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_R_BudgetOwner]
GO

/****** Object:  StoredProcedure [dbo].[stp_R_ExpenseCzar]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_R_ExpenseCzar]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_R_ExpenseCzar]
GO

/****** Object:  StoredProcedure [dbo].[stp_R_ExpenseCzarDetail]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_R_ExpenseCzarDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_R_ExpenseCzarDetail]
GO

/****** Object:  StoredProcedure [dbo].[stp_R_ExpenseCzarTotalComparison]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_R_ExpenseCzarTotalComparison]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_R_ExpenseCzarTotalComparison]
GO

/****** Object:  StoredProcedure [dbo].[stp_R_ExpenseCzarTotalComparisonDetail]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_R_ExpenseCzarTotalComparisonDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_R_ExpenseCzarTotalComparisonDetail]
GO

/****** Object:  StoredProcedure [dbo].[stp_R_MissingExchangeRates]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_R_MissingExchangeRates]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_R_MissingExchangeRates]
GO

/****** Object:  StoredProcedure [dbo].[stp_R_Profitability]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_R_Profitability]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_R_Profitability]
GO

/****** Object:  StoredProcedure [dbo].[stp_R_ProfitabilityDetailV2]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_R_ProfitabilityDetailV2]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_R_ProfitabilityDetailV2]
GO

/****** Object:  StoredProcedure [dbo].[stp_R_ProfitabilityDetailV3]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_R_ProfitabilityDetailV3]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_R_ProfitabilityDetailV3]
GO

/****** Object:  StoredProcedure [dbo].[stp_R_ProfitabilityV2]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_R_ProfitabilityV2]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_R_ProfitabilityV2]
GO

/****** Object:  StoredProcedure [dbo].[stp_R_UnknownActivityType]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_R_UnknownActivityType]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_R_UnknownActivityType]
GO

/****** Object:  StoredProcedure [dbo].[stp_R_UnknownFunctionalDepartment]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_R_UnknownFunctionalDepartment]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_R_UnknownFunctionalDepartment]
GO

/****** Object:  StoredProcedure [dbo].[stp_R_UnknownGlAccount]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_R_UnknownGlAccount]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_R_UnknownGlAccount]
GO

/****** Object:  StoredProcedure [dbo].[stp_R_UnknownOriginatingRegion]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_R_UnknownOriginatingRegion]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_R_UnknownOriginatingRegion]
GO

/****** Object:  StoredProcedure [dbo].[stp_S_UnknownSummaryAllocatedOverhead]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_S_UnknownSummaryAllocatedOverhead]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_S_UnknownSummaryAllocatedOverhead]
GO

/****** Object:  StoredProcedure [dbo].[stp_S_UnknownSummaryMRIActuals]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_S_UnknownSummaryMRIActuals]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_S_UnknownSummaryMRIActuals]
GO

/****** Object:  StoredProcedure [dbo].[stp_S_ValidNonPayrollRegionAndFunctionalDepartment]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_S_ValidNonPayrollRegionAndFunctionalDepartment]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_S_ValidNonPayrollRegionAndFunctionalDepartment]
GO

/****** Object:  StoredProcedure [dbo].[stp_S_ValidPayrollRegionAndFunctionalDepartment]    Script Date: 12/08/2010 12:01:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_S_ValidPayrollRegionAndFunctionalDepartment]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_S_ValidPayrollRegionAndFunctionalDepartment]
GO

USE [GrReporting]
GO

/****** Object:  StoredProcedure [dbo].[stp_D_ProfitabilityActualIndex]    Script Date: 12/08/2010 12:01:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[stp_D_ProfitabilityActualIndex]
AS
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityActual]') AND name = N'IX_ActivityTypeKey')
DROP INDEX [IX_ActivityTypeKey] ON [dbo].[ProfitabilityActual] 

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityActual]') AND name = N'IX_AllocationRegionKey')
DROP  INDEX [IX_AllocationRegionKey] ON [dbo].[ProfitabilityActual] 

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityActual]') AND name = N'IX_CalendarKey')
DROP  INDEX [IX_CalendarKey] ON [dbo].[ProfitabilityActual] 

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityActual]') AND name = N'IX_FunctionalDepartmentKey')
DROP  INDEX [IX_FunctionalDepartmentKey] ON [dbo].[ProfitabilityActual] 

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityActual]') AND name = N'IX_GlAccountKey')
DROP  INDEX [IX_GlAccountKey] ON [dbo].[ProfitabilityActual] 

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityActual]') AND name = N'IX_OriginatingRegionKey')
DROP  INDEX [IX_OriginatingRegionKey] ON [dbo].[ProfitabilityActual] 

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityActual]') AND name = N'IX_PropertyFundKey')
DROP  INDEX [IX_PropertyFundKey] ON [dbo].[ProfitabilityActual] 

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityActual]') AND name = N'IX_Clustered')
DROP  INDEX [IX_Clustered] ON [dbo].[ProfitabilityActual]


GO

/****** Object:  StoredProcedure [dbo].[stp_D_ProfitabilityBudgetIndex]    Script Date: 12/08/2010 12:01:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[stp_D_ProfitabilityBudgetIndex]
AS

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityBudget]') AND name = N'IX_ActivityTypeKey')
DROP INDEX [IX_ActivityTypeKey] ON [dbo].[ProfitabilityBudget] 

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityBudget]') AND name = N'IX_AllocationRegionKey')
DROP INDEX [IX_AllocationRegionKey] ON [dbo].[ProfitabilityBudget] 

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityBudget]') AND name = N'IX_CalendarKey')
DROP INDEX [IX_CalendarKey] ON [dbo].[ProfitabilityBudget] 

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityBudget]') AND name = N'IX_FunctionalDepartmentKey')
DROP INDEX [IX_FunctionalDepartmentKey] ON [dbo].[ProfitabilityBudget] 

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityBudget]') AND name = N'IX_GlAccountKey')
DROP INDEX [IX_GlAccountKey] ON [dbo].[ProfitabilityBudget] 

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityBudget]') AND name = N'IX_OriginatingRegionKey')
DROP INDEX [IX_OriginatingRegionKey] ON [dbo].[ProfitabilityBudget] 

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityBudget]') AND name = N'IX_ProfitabilityBudget_SourceSystemBudget')
DROP INDEX [IX_ProfitabilityBudget_SourceSystemBudget] ON [dbo].[ProfitabilityBudget] 

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityBudget]') AND name = N'IX_PropertyFundKey')
DROP INDEX [IX_PropertyFundKey] ON [dbo].[ProfitabilityBudget] 

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityBudget]') AND name = N'IX_ReferenceCode')
DROP INDEX [IX_ReferenceCode] ON [dbo].[ProfitabilityBudget] 

-------------------------------------------
--Used by loading stp and cannot be dropped
-------------------------------------------

--IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityBudget]') AND name = N'IX_BudgetIdSourceSystemId')
--DROP INDEX [IX_BudgetIdSourceSystemId] ON [dbo].[ProfitabilityBudget] 

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityBudget]') AND name = N'IX_Clustered')
DROP INDEX [IX_Clustered] ON [dbo].[ProfitabilityBudget] 

--3min


GO

/****** Object:  StoredProcedure [dbo].[stp_D_ProfitabilityReforecastIndex]    Script Date: 12/08/2010 12:01:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[stp_D_ProfitabilityReforecastIndex]
AS

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_ActivityTypeKey')
DROP INDEX [IX_ActivityTypeKey] ON [dbo].[ProfitabilityReforecast] 

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_AllocationRegionKey')
DROP INDEX [IX_AllocationRegionKey] ON [dbo].[ProfitabilityReforecast] 

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_CalendarKey')
DROP INDEX [IX_CalendarKey] ON [dbo].[ProfitabilityReforecast] 

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_FunctionalDepartmentKey')
DROP INDEX [IX_FunctionalDepartmentKey] ON [dbo].[ProfitabilityReforecast] 

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_GlAccountKey')
DROP INDEX [IX_GlAccountKey] ON [dbo].[ProfitabilityReforecast] 

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_OriginatingRegionKey')
DROP INDEX [IX_OriginatingRegionKey] ON [dbo].[ProfitabilityReforecast] 

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_ProfitabilityReforecast_SourceSystem')
DROP INDEX [IX_ProfitabilityReforecast_SourceSystem] ON [dbo].[ProfitabilityReforecast] 

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_PropertyFundKey')
DROP INDEX [IX_PropertyFundKey] ON [dbo].[ProfitabilityReforecast] 

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_ReferenceCode')
DROP INDEX [IX_ReferenceCode] ON [dbo].[ProfitabilityReforecast] 

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_ReforecatKey')
DROP INDEX [IX_ReforecatKey] ON [dbo].[ProfitabilityReforecast] 


-------------------------------------------
--Used by loading stp and cannot be dropped
-------------------------------------------

--IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_BudgetIdSourceSystemId')
--DROP INDEX [IX_BudgetIdSourceSystemId] ON [dbo].[ProfitabilityReforecast] 

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_Clustered')
DROP INDEX [IX_Clustered] ON [dbo].[ProfitabilityReforecast]


GO

/****** Object:  StoredProcedure [dbo].[stp_I_ProfitabilityActualIndex]    Script Date: 12/08/2010 12:01:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[stp_I_ProfitabilityActualIndex]
AS
/****** Object:  Index [IX_ActivityTypeKey]    Script Date: 10/27/2010 10:47:00 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityActual]') AND name = N'IX_ActivityTypeKey')
DROP INDEX [IX_ActivityTypeKey] ON [dbo].[ProfitabilityActual] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_AllocationRegionKey]    Script Date: 10/27/2010 10:47:00 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityActual]') AND name = N'IX_AllocationRegionKey')
DROP INDEX [IX_AllocationRegionKey] ON [dbo].[ProfitabilityActual] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_CalendarKey]    Script Date: 10/27/2010 10:47:00 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityActual]') AND name = N'IX_CalendarKey')
DROP INDEX [IX_CalendarKey] ON [dbo].[ProfitabilityActual] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_Clustered]    Script Date: 10/27/2010 10:47:00 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityActual]') AND name = N'IX_Clustered')
DROP INDEX [IX_Clustered] ON [dbo].[ProfitabilityActual] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_FunctionalDepartmentKey]    Script Date: 10/27/2010 10:47:00 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityActual]') AND name = N'IX_FunctionalDepartmentKey')
DROP INDEX [IX_FunctionalDepartmentKey] ON [dbo].[ProfitabilityActual] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_GlAccountKey]    Script Date: 10/27/2010 10:47:00 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityActual]') AND name = N'IX_GlAccountKey')
DROP INDEX [IX_GlAccountKey] ON [dbo].[ProfitabilityActual] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_OriginatingRegionKey]    Script Date: 10/27/2010 10:47:00 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityActual]') AND name = N'IX_OriginatingRegionKey')
DROP INDEX [IX_OriginatingRegionKey] ON [dbo].[ProfitabilityActual] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_PropertyFundKey]    Script Date: 10/27/2010 10:47:00 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityActual]') AND name = N'IX_PropertyFundKey')
DROP INDEX [IX_PropertyFundKey] ON [dbo].[ProfitabilityActual] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_Clustered]    Script Date: 10/27/2010 10:47:00 ******/
CREATE CLUSTERED INDEX [IX_Clustered] ON [dbo].[ProfitabilityActual] 
(
	[OriginatingRegionKey] ASC,
	[CalendarKey] ASC,
	[AllocationRegionKey] ASC,
	[GlobalGlAccountCategoryKey] ASC,
	[FunctionalDepartmentKey] ASC,
	[PropertyFundKey] ASC,
	[GlAccountKey] ASC,
	[SourceKey] ASC,
	[ReimbursableKey] ASC,
	[ActivityTypeKey] ASC,
	[LocalCurrencyKey] ASC,
	[OverheadKey] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_ActivityTypeKey]    Script Date: 10/27/2010 10:47:00 ******/
CREATE NONCLUSTERED INDEX [IX_ActivityTypeKey] ON [dbo].[ProfitabilityActual] 
(
	[ActivityTypeKey] ASC
)
INCLUDE ( [ProfitabilityActualKey],
[CalendarKey],
[GlAccountKey],
[SourceKey],
[FunctionalDepartmentKey],
[ReimbursableKey],
[PropertyFundKey],
[AllocationRegionKey],
[OriginatingRegionKey],
[LocalCurrencyKey],
[LocalActual],
[GlobalGlAccountCategoryKey],
[OverheadKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_AllocationRegionKey]    Script Date: 10/27/2010 10:47:00 ******/
CREATE NONCLUSTERED INDEX [IX_AllocationRegionKey] ON [dbo].[ProfitabilityActual] 
(
	[AllocationRegionKey] ASC
)
INCLUDE ( [ProfitabilityActualKey],
[CalendarKey],
[GlAccountKey],
[SourceKey],
[FunctionalDepartmentKey],
[ReimbursableKey],
[ActivityTypeKey],
[PropertyFundKey],
[OriginatingRegionKey],
[LocalCurrencyKey],
[LocalActual],
[GlobalGlAccountCategoryKey],
[OverheadKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_CalendarKey]    Script Date: 10/27/2010 10:47:00 ******/
CREATE NONCLUSTERED INDEX [IX_CalendarKey] ON [dbo].[ProfitabilityActual] 
(
	[CalendarKey] ASC
)
INCLUDE ( [LocalActual],
[ProfitabilityActualKey],
[PropertyFundKey],
[FunctionalDepartmentKey],
[ReimbursableKey],
[AllocationRegionKey],
[OriginatingRegionKey],
[LocalCurrencyKey],
[GlAccountKey],
[SourceKey],
[ActivityTypeKey],
[GlobalGlAccountCategoryKey],
[OverheadKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]



/****** Object:  Index [IX_FunctionalDepartmentKey]    Script Date: 10/27/2010 10:47:00 ******/
CREATE NONCLUSTERED INDEX [IX_FunctionalDepartmentKey] ON [dbo].[ProfitabilityActual] 
(
	[FunctionalDepartmentKey] ASC
)
INCLUDE ( [ProfitabilityActualKey],
[CalendarKey],
[ReimbursableKey],
[PropertyFundKey],
[AllocationRegionKey],
[LocalCurrencyKey],
[LocalActual],
[GlAccountKey],
[SourceKey],
[ActivityTypeKey],
[OriginatingRegionKey],
[GlobalGlAccountCategoryKey],
[OverheadKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_GlAccountKey]    Script Date: 10/27/2010 10:47:00 ******/
CREATE NONCLUSTERED INDEX [IX_GlAccountKey] ON [dbo].[ProfitabilityActual] 
(
	[GlAccountKey] ASC
)
INCLUDE ( [ProfitabilityActualKey],
[CalendarKey],
[SourceKey],
[FunctionalDepartmentKey],
[ReimbursableKey],
[ActivityTypeKey],
[PropertyFundKey],
[AllocationRegionKey],
[OriginatingRegionKey],
[LocalCurrencyKey],
[LocalActual],
[GlobalGlAccountCategoryKey],
[OverheadKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_OriginatingRegionKey]    Script Date: 10/27/2010 10:47:00 ******/
CREATE NONCLUSTERED INDEX [IX_OriginatingRegionKey] ON [dbo].[ProfitabilityActual] 
(
	[OriginatingRegionKey] ASC
)
INCLUDE ( [LocalActual],
[CalendarKey],
[GlAccountKey],
[SourceKey],
[FunctionalDepartmentKey],
[ReimbursableKey],
[ActivityTypeKey],
[PropertyFundKey],
[AllocationRegionKey],
[LocalCurrencyKey],
[GlobalGlAccountCategoryKey],
[OverheadKey],
[ProfitabilityActualKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_PropertyFundKey]    Script Date: 10/27/2010 10:47:00 ******/
CREATE NONCLUSTERED INDEX [IX_PropertyFundKey] ON [dbo].[ProfitabilityActual] 
(
	[PropertyFundKey] ASC
)
INCLUDE ( [LocalActual],
[ProfitabilityActualKey],
[CalendarKey],
[GlAccountKey],
[SourceKey],
[FunctionalDepartmentKey],
[ReimbursableKey],
[ActivityTypeKey],
[AllocationRegionKey],
[OriginatingRegionKey],
[LocalCurrencyKey],
[GlobalGlAccountCategoryKey],
[OverheadKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]



GO

/****** Object:  StoredProcedure [dbo].[stp_I_ProfitabilityBudgetIndex]    Script Date: 12/08/2010 12:01:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[stp_I_ProfitabilityBudgetIndex]
AS

/****** Object:  Index [IX_ActivityTypeKey]    Script Date: 10/27/2010 10:49:22 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityBudget]') AND name = N'IX_ActivityTypeKey')
DROP INDEX [IX_ActivityTypeKey] ON [dbo].[ProfitabilityBudget] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_AllocationRegionKey]    Script Date: 10/27/2010 10:49:22 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityBudget]') AND name = N'IX_AllocationRegionKey')
DROP INDEX [IX_AllocationRegionKey] ON [dbo].[ProfitabilityBudget] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_CalendarKey]    Script Date: 10/27/2010 10:49:22 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityBudget]') AND name = N'IX_CalendarKey')
DROP INDEX [IX_CalendarKey] ON [dbo].[ProfitabilityBudget] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_Clustered]    Script Date: 10/27/2010 10:49:22 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityBudget]') AND name = N'IX_Clustered')
DROP INDEX [IX_Clustered] ON [dbo].[ProfitabilityBudget] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_FunctionalDepartmentKey]    Script Date: 10/27/2010 10:49:22 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityBudget]') AND name = N'IX_FunctionalDepartmentKey')
DROP INDEX [IX_FunctionalDepartmentKey] ON [dbo].[ProfitabilityBudget] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_GlAccountKey]    Script Date: 10/27/2010 10:49:22 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityBudget]') AND name = N'IX_GlAccountKey')
DROP INDEX [IX_GlAccountKey] ON [dbo].[ProfitabilityBudget] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_OriginatingRegionKey]    Script Date: 10/27/2010 10:49:22 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityBudget]') AND name = N'IX_OriginatingRegionKey')
DROP INDEX [IX_OriginatingRegionKey] ON [dbo].[ProfitabilityBudget] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_ProfitabilityBudget_SourceSystemBudget]    Script Date: 10/27/2010 10:49:22 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityBudget]') AND name = N'IX_ProfitabilityBudget_SourceSystemBudget')
DROP INDEX [IX_ProfitabilityBudget_SourceSystemBudget] ON [dbo].[ProfitabilityBudget] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_PropertyFundKey]    Script Date: 10/27/2010 10:49:22 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityBudget]') AND name = N'IX_PropertyFundKey')
DROP INDEX [IX_PropertyFundKey] ON [dbo].[ProfitabilityBudget] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_ReferenceCode]    Script Date: 10/27/2010 10:49:22 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityBudget]') AND name = N'IX_ReferenceCode')
DROP INDEX [IX_ReferenceCode] ON [dbo].[ProfitabilityBudget] WITH ( ONLINE = OFF )

/****** Object:  Index [IX_Clustered]    Script Date: 10/27/2010 10:49:23 ******/
CREATE CLUSTERED INDEX [IX_Clustered] ON [dbo].[ProfitabilityBudget] 
(
	[OriginatingRegionKey] ASC,
	[CalendarKey] ASC,
	[AllocationRegionKey] ASC,
	[GlobalGlAccountCategoryKey] ASC,
	[FunctionalDepartmentKey] ASC,
	[PropertyFundKey] ASC,
	[GlAccountKey] ASC,
	[SourceKey] ASC,
	[ReimbursableKey] ASC,
	[ActivityTypeKey] ASC,
	[LocalCurrencyKey] ASC,
	[OverheadKey] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_ActivityTypeKey]    Script Date: 10/27/2010 10:49:23 ******/
CREATE NONCLUSTERED INDEX [IX_ActivityTypeKey] ON [dbo].[ProfitabilityBudget] 
(
	[ActivityTypeKey] ASC
)
INCLUDE ( [ProfitabilityBudgetKey],
[CalendarKey],
[GlAccountKey],
[SourceKey],
[FunctionalDepartmentKey],
[ReimbursableKey],
[PropertyFundKey],
[AllocationRegionKey],
[OriginatingRegionKey],
[LocalCurrencyKey],
[LocalBudget],
[GlobalGlAccountCategoryKey],
[SourceSystemId],
[OverheadKey],
[FeeAdjustmentKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_AllocationRegionKey]    Script Date: 10/27/2010 10:49:23 ******/
CREATE NONCLUSTERED INDEX [IX_AllocationRegionKey] ON [dbo].[ProfitabilityBudget] 
(
	[AllocationRegionKey] ASC
)
INCLUDE ( [ProfitabilityBudgetKey],
[CalendarKey],
[GlAccountKey],
[SourceKey],
[FunctionalDepartmentKey],
[ReimbursableKey],
[ActivityTypeKey],
[PropertyFundKey],
[OriginatingRegionKey],
[LocalCurrencyKey],
[LocalBudget],
[GlobalGlAccountCategoryKey],
[SourceSystemId],
[OverheadKey],
[FeeAdjustmentKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_CalendarKey]    Script Date: 10/27/2010 10:49:23 ******/
CREATE NONCLUSTERED INDEX [IX_CalendarKey] ON [dbo].[ProfitabilityBudget] 
(
	[CalendarKey] ASC
)
INCLUDE ( [LocalBudget],
[ProfitabilityBudgetKey],
[PropertyFundKey],
[FunctionalDepartmentKey],
[ReimbursableKey],
[AllocationRegionKey],
[OriginatingRegionKey],
[LocalCurrencyKey],
[GlAccountKey],
[SourceKey],
[ActivityTypeKey],
[GlobalGlAccountCategoryKey],
[SourceSystemId],
[OverheadKey],
[FeeAdjustmentKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_FunctionalDepartmentKey]    Script Date: 10/27/2010 10:49:23 ******/
CREATE NONCLUSTERED INDEX [IX_FunctionalDepartmentKey] ON [dbo].[ProfitabilityBudget] 
(
	[FunctionalDepartmentKey] ASC
)
INCLUDE ( [ProfitabilityBudgetKey],
[CalendarKey],
[ReimbursableKey],
[PropertyFundKey],
[AllocationRegionKey],
[LocalCurrencyKey],
[LocalBudget],
[GlAccountKey],
[SourceKey],
[ActivityTypeKey],
[OriginatingRegionKey],
[GlobalGlAccountCategoryKey],
[SourceSystemId],
[OverheadKey],
[FeeAdjustmentKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_GlAccountKey]    Script Date: 10/27/2010 10:49:23 ******/
CREATE NONCLUSTERED INDEX [IX_GlAccountKey] ON [dbo].[ProfitabilityBudget] 
(
	[GlAccountKey] ASC
)
INCLUDE ( [ProfitabilityBudgetKey],
[CalendarKey],
[SourceKey],
[FunctionalDepartmentKey],
[ReimbursableKey],
[ActivityTypeKey],
[PropertyFundKey],
[AllocationRegionKey],
[OriginatingRegionKey],
[LocalCurrencyKey],
[LocalBudget],
[GlobalGlAccountCategoryKey],
[SourceSystemId],
[OverheadKey],
[FeeAdjustmentKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_OriginatingRegionKey]    Script Date: 10/27/2010 10:49:23 ******/
CREATE NONCLUSTERED INDEX [IX_OriginatingRegionKey] ON [dbo].[ProfitabilityBudget] 
(
	[OriginatingRegionKey] ASC,
	[CalendarKey] ASC,
	[GlAccountKey] ASC,
	[SourceKey] ASC,
	[FunctionalDepartmentKey] ASC,
	[ReimbursableKey] ASC,
	[ActivityTypeKey] ASC,
	[PropertyFundKey] ASC,
	[AllocationRegionKey] ASC,
	[LocalCurrencyKey] ASC,
	[GlobalGlAccountCategoryKey] ASC,
	[SourceSystemId] ASC,
	[OverheadKey] ASC,
	[FeeAdjustmentKey] ASC
)
INCLUDE ( [LocalBudget],
[ProfitabilityBudgetKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_ProfitabilityBudget_SourceSystemBudget]    Script Date: 10/27/2010 10:49:23 ******/
CREATE NONCLUSTERED INDEX [IX_ProfitabilityBudget_SourceSystemBudget] ON [dbo].[ProfitabilityBudget] 
(
	[BudgetId] ASC,
	[SourceSystemId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_PropertyFundKey]    Script Date: 10/27/2010 10:49:23 ******/
CREATE NONCLUSTERED INDEX [IX_PropertyFundKey] ON [dbo].[ProfitabilityBudget] 
(
	[PropertyFundKey] ASC
)
INCLUDE ( [LocalBudget],
[ProfitabilityBudgetKey],
[CalendarKey],
[GlAccountKey],
[SourceKey],
[FunctionalDepartmentKey],
[ReimbursableKey],
[ActivityTypeKey],
[AllocationRegionKey],
[OriginatingRegionKey],
[LocalCurrencyKey],
[GlobalGlAccountCategoryKey],
[SourceSystemId],
[OverheadKey],
[FeeAdjustmentKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_ReferenceCode]    Script Date: 10/27/2010 10:49:23 ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_ReferenceCode] ON [dbo].[ProfitabilityBudget] 
(
	[ReferenceCode] ASC
)
INCLUDE ( [ProfitabilityBudgetKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]



GO

/****** Object:  StoredProcedure [dbo].[stp_I_ProfitabilityReforecastIndex]    Script Date: 12/08/2010 12:01:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[stp_I_ProfitabilityReforecastIndex]
AS

/****** Object:  Index [IX_ActivityTypeKey]    Script Date: 10/27/2010 10:51:26 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_ActivityTypeKey')
DROP INDEX [IX_ActivityTypeKey] ON [dbo].[ProfitabilityReforecast] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_AllocationRegionKey]    Script Date: 10/27/2010 10:51:26 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_AllocationRegionKey')
DROP INDEX [IX_AllocationRegionKey] ON [dbo].[ProfitabilityReforecast] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_CalendarKey]    Script Date: 10/27/2010 10:51:26 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_CalendarKey')
DROP INDEX [IX_CalendarKey] ON [dbo].[ProfitabilityReforecast] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_Clustered]    Script Date: 10/27/2010 10:51:26 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_Clustered')
DROP INDEX [IX_Clustered] ON [dbo].[ProfitabilityReforecast] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_FunctionalDepartmentKey]    Script Date: 10/27/2010 10:51:26 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_FunctionalDepartmentKey')
DROP INDEX [IX_FunctionalDepartmentKey] ON [dbo].[ProfitabilityReforecast] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_GlAccountKey]    Script Date: 10/27/2010 10:51:26 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_GlAccountKey')
DROP INDEX [IX_GlAccountKey] ON [dbo].[ProfitabilityReforecast] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_OriginatingRegionKey]    Script Date: 10/27/2010 10:51:26 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_OriginatingRegionKey')
DROP INDEX [IX_OriginatingRegionKey] ON [dbo].[ProfitabilityReforecast] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_ProfitabilityReforecast_SourceSystemBudget]    Script Date: 10/27/2010 10:51:26 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_ProfitabilityReforecast_SourceSystemBudget')
DROP INDEX [IX_ProfitabilityReforecast_SourceSystemBudget] ON [dbo].[ProfitabilityReforecast] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_PropertyFundKey]    Script Date: 10/27/2010 10:51:26 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_PropertyFundKey')
DROP INDEX [IX_PropertyFundKey] ON [dbo].[ProfitabilityReforecast] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_ReferenceCode]    Script Date: 10/27/2010 10:51:26 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_ReferenceCode')
DROP INDEX [IX_ReferenceCode] ON [dbo].[ProfitabilityReforecast] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_ReforecatKey]    Script Date: 10/27/2010 10:51:26 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProfitabilityReforecast]') AND name = N'IX_ReforecatKey')
DROP INDEX [IX_ReforecatKey] ON [dbo].[ProfitabilityReforecast] WITH ( ONLINE = OFF )


/****** Object:  Index [IX_ActivityTypeKey]    Script Date: 10/27/2010 10:51:26 ******/
CREATE NONCLUSTERED INDEX [IX_ActivityTypeKey] ON [dbo].[ProfitabilityReforecast] 
(
	[ActivityTypeKey] ASC
)
INCLUDE ( [ProfitabilityReforecastKey],
[CalendarKey],
[GlAccountKey],
[SourceKey],
[FunctionalDepartmentKey],
[ReimbursableKey],
[PropertyFundKey],
[AllocationRegionKey],
[OriginatingRegionKey],
[LocalCurrencyKey],
[LocalReforecast],
[GlobalGlAccountCategoryKey],
[SourceSystemId],
[OverheadKey],
[FeeAdjustmentKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_AllocationRegionKey]    Script Date: 10/27/2010 10:51:26 ******/
CREATE NONCLUSTERED INDEX [IX_AllocationRegionKey] ON [dbo].[ProfitabilityReforecast] 
(
	[AllocationRegionKey] ASC
)
INCLUDE ( [ProfitabilityReforecastKey],
[CalendarKey],
[GlAccountKey],
[SourceKey],
[FunctionalDepartmentKey],
[ReimbursableKey],
[ActivityTypeKey],
[PropertyFundKey],
[OriginatingRegionKey],
[LocalCurrencyKey],
[LocalReforecast],
[GlobalGlAccountCategoryKey],
[SourceSystemId],
[OverheadKey],
[FeeAdjustmentKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_CalendarKey]    Script Date: 10/27/2010 10:51:26 ******/
CREATE NONCLUSTERED INDEX [IX_CalendarKey] ON [dbo].[ProfitabilityReforecast] 
(
	[CalendarKey] ASC
)
INCLUDE ( [LocalReforecast],
[ProfitabilityReforecastKey],
[PropertyFundKey],
[FunctionalDepartmentKey],
[ReimbursableKey],
[AllocationRegionKey],
[OriginatingRegionKey],
[LocalCurrencyKey],
[GlAccountKey],
[SourceKey],
[ActivityTypeKey],
[GlobalGlAccountCategoryKey],
[SourceSystemId],
[OverheadKey],
[FeeAdjustmentKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_Clustered]    Script Date: 10/27/2010 10:51:26 ******/
CREATE CLUSTERED INDEX [IX_Clustered] ON [dbo].[ProfitabilityReforecast] 
(
	[OriginatingRegionKey] ASC,
	[CalendarKey] ASC,
	[AllocationRegionKey] ASC,
	[GlobalGlAccountCategoryKey] ASC,
	[FunctionalDepartmentKey] ASC,
	[PropertyFundKey] ASC,
	[GlAccountKey] ASC,
	[SourceKey] ASC,
	[ReimbursableKey] ASC,
	[ActivityTypeKey] ASC,
	[LocalCurrencyKey] ASC,
	[OverheadKey] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_FunctionalDepartmentKey]    Script Date: 10/27/2010 10:51:26 ******/
CREATE NONCLUSTERED INDEX [IX_FunctionalDepartmentKey] ON [dbo].[ProfitabilityReforecast] 
(
	[FunctionalDepartmentKey] ASC
)
INCLUDE ( [ProfitabilityReforecastKey],
[CalendarKey],
[ReimbursableKey],
[PropertyFundKey],
[AllocationRegionKey],
[LocalCurrencyKey],
[LocalReforecast],
[GlAccountKey],
[SourceKey],
[ActivityTypeKey],
[OriginatingRegionKey],
[GlobalGlAccountCategoryKey],
[SourceSystemId],
[OverheadKey],
[FeeAdjustmentKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_GlAccountKey]    Script Date: 10/27/2010 10:51:26 ******/
CREATE NONCLUSTERED INDEX [IX_GlAccountKey] ON [dbo].[ProfitabilityReforecast] 
(
	[GlAccountKey] ASC
)
INCLUDE ( [ProfitabilityReforecastKey],
[CalendarKey],
[SourceKey],
[FunctionalDepartmentKey],
[ReimbursableKey],
[ActivityTypeKey],
[PropertyFundKey],
[AllocationRegionKey],
[OriginatingRegionKey],
[LocalCurrencyKey],
[LocalReforecast],
[GlobalGlAccountCategoryKey],
[SourceSystemId],
[OverheadKey],
[FeeAdjustmentKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_OriginatingRegionKey]    Script Date: 10/27/2010 10:51:26 ******/
CREATE NONCLUSTERED INDEX [IX_OriginatingRegionKey] ON [dbo].[ProfitabilityReforecast] 
(
	[OriginatingRegionKey] ASC,
	[CalendarKey] ASC,
	[GlAccountKey] ASC,
	[SourceKey] ASC,
	[FunctionalDepartmentKey] ASC,
	[ReimbursableKey] ASC,
	[ActivityTypeKey] ASC,
	[PropertyFundKey] ASC,
	[AllocationRegionKey] ASC,
	[LocalCurrencyKey] ASC,
	[GlobalGlAccountCategoryKey] ASC,
	[SourceSystemId] ASC,
	[OverheadKey] ASC,
	[FeeAdjustmentKey] ASC
)
INCLUDE ( [LocalReforecast],
[ProfitabilityReforecastKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_ProfitabilityReforecast_SourceSystemBudget]    Script Date: 10/27/2010 10:51:26 ******/
CREATE NONCLUSTERED INDEX [IX_ProfitabilityReforecast_SourceSystemBudget] ON [dbo].[ProfitabilityReforecast] 
(
	[BudgetId] ASC,
	[SourceSystemId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_PropertyFundKey]    Script Date: 10/27/2010 10:51:26 ******/
CREATE NONCLUSTERED INDEX [IX_PropertyFundKey] ON [dbo].[ProfitabilityReforecast] 
(
	[PropertyFundKey] ASC
)
INCLUDE ( [LocalReforecast],
[ProfitabilityReforecastKey],
[CalendarKey],
[GlAccountKey],
[SourceKey],
[FunctionalDepartmentKey],
[ReimbursableKey],
[ActivityTypeKey],
[AllocationRegionKey],
[OriginatingRegionKey],
[LocalCurrencyKey],
[GlobalGlAccountCategoryKey],
[SourceSystemId],
[OverheadKey],
[FeeAdjustmentKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_ReferenceCode]    Script Date: 10/27/2010 10:51:26 ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_ReferenceCode] ON [dbo].[ProfitabilityReforecast] 
(
	[ReferenceCode] ASC
)
INCLUDE ( [ProfitabilityReforecastKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]


/****** Object:  Index [IX_ReforecatKey]    Script Date: 10/27/2010 10:51:26 ******/
CREATE NONCLUSTERED INDEX [IX_ReforecatKey] ON [dbo].[ProfitabilityReforecast] 
(
	[ReforecastKey] ASC
)
INCLUDE ( [LocalReforecast],
[ProfitabilityReforecastKey],
[CalendarKey],
[PropertyFundKey],
[FunctionalDepartmentKey],
[ReimbursableKey],
[AllocationRegionKey],
[OriginatingRegionKey],
[LocalCurrencyKey],
[GlAccountKey],
[SourceKey],
[ActivityTypeKey]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]



GO

/****** Object:  StoredProcedure [dbo].[stp_R_BudgetJobCodeDetail]    Script Date: 12/08/2010 12:01:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[stp_R_BudgetJobCodeDetail]
	@ReportExpensePeriod INT = NULL,
	@ReforecastQuaterName VARCHAR(10) = NULL, --'Q1' or 'Q2' or 'Q3'
	@DestinationCurrency VARCHAR(3) = NULL,
	@TranslationTypeName VARCHAR(50) = 'Global',
	@IsGross bit = 1,
	@FunctionalDepartmentList TEXT = NULL,
	@ActivityTypeList TEXT = NULL,
	@EntityList TEXT = NULL,
	@MajorAccountCategoryList TEXT = NULL,
	@MinorAccountCategoryList TEXT = NULL,
	@AllocationRegionList TEXT = NULL,
	@AllocationSubRegionList TEXT = NULL,
	@OriginatingRegionList TEXT = NULL,
	@OriginatingSubRegionList TEXT = NULL,
	@OverheadCode Varchar(10)='UNALLOC'
AS


DECLARE
	@_ReportExpensePeriod INT = @ReportExpensePeriod,
	@_ReforecastQuaterName VARCHAR(10) = @ReforecastQuaterName,
	@_DestinationCurrency VARCHAR(3) = @DestinationCurrency,
	@_TranslationTypeName VARCHAR(50) = @TranslationTypeName,
	@_IsGross bit = @IsGross,
	@_FunctionalDepartmentList VARCHAR(8000) = @FunctionalDepartmentList,
	@_ActivityTypeList VARCHAR(8000) = @ActivityTypeList,
	@_EntityList VARCHAR(8000) = @EntityList,
	@_MajorAccountCategoryList VARCHAR(8000) = @MajorAccountCategoryList,
	@_MinorAccountCategoryList VARCHAR(8000) = @MinorAccountCategoryList,
	@_AllocationRegionList VARCHAR(8000) = @AllocationRegionList,
	@_AllocationSubRegionList VARCHAR(8000) = @AllocationSubRegionList,
	@_OriginatingRegionList VARCHAR(8000) = @OriginatingRegionList,
	@_OriginatingSubRegionList VARCHAR(8000) = @OriginatingSubRegionList


IF LEN(@_FunctionalDepartmentList) > 7998 OR
	LEN(@_ActivityTypeList) > 7998 OR
	LEN(@_EntityList) > 7998 OR
	LEN(@_MajorAccountCategoryList) > 7998 OR
	LEN(@_MinorAccountCategoryList) > 7998 OR
	LEN(@_AllocationRegionList) > 7998 OR
	LEN(@_AllocationSubRegionList) > 7998 OR
	LEN(@_OriginatingRegionList) > 7998 OR
	LEN(@_OriginatingSubRegionList) > 7998
BEGIN
	RAISERROR('Filter List parameter is too big',9,1)
END
--------------------------------------------------------------------------
/*	COMMON Block to setup the Report Filter Variable defaults		*/
--------------------------------------------------------------------------

IF @ReportExpensePeriod IS NULL
	SET @ReportExpensePeriod = CAST(CAST(YEAR(GETDATE()) AS VARCHAR(4)) + REPLACE(STR(MONTH(GETDATE()),2 ),' ','0')AS INT)

IF @DestinationCurrency IS NULL
	SET @DestinationCurrency = 'USD'

IF 	@TranslationTypeName IS NULL
	SET @TranslationTypeName = 'Global'

	DECLARE @CalendarYear AS INT
	SET @CalendarYear = CAST(SUBSTRING(CAST(@ReportExpensePeriod AS VARCHAR(10)), 1, 4) AS INT)				

--------------------------------------------------------------------------
IF @ReforecastQuaterName IS NULL OR @ReforecastQuaterName NOT IN ('Q0', 'Q1', 'Q2', 'Q3')
	SET @ReforecastQuaterName = (SELECT TOP 1
									ReforecastQuarterName 
								 FROM
									dbo.Reforecast 
								 WHERE
									ReforecastEffectivePeriod <= @ReportExpensePeriod AND 
									ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4)
								 ORDER BY ReforecastEffectivePeriod DESC)
-- Compute Reforecast Effective Periods

DECLARE @ReforecastEffectivePeriodQ1 INT
DECLARE @ReforecastEffectivePeriodQ2 INT
DECLARE @ReforecastEffectivePeriodQ3 INT

SET @ReforecastEffectivePeriodQ1 = (SELECT TOP 1
										ReforecastEffectivePeriod 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										ReforecastQuarterName = 'Q1'
									ORDER BY
										ReforecastEffectivePeriod)								

SET @ReforecastEffectivePeriodQ2 = (SELECT TOP 1
										ReforecastEffectivePeriod 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										ReforecastQuarterName = 'Q2'
									ORDER BY
										ReforecastEffectivePeriod)								

SET @ReforecastEffectivePeriodQ3 = (SELECT TOP 1
										ReforecastEffectivePeriod 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										ReforecastQuarterName = 'Q3'
									ORDER BY
										ReforecastEffectivePeriod)

-- Retrieve Reforecast Quarter Name

DECLARE @ReforecastQuarterNameQ1 CHAR(2)
DECLARE @ReforecastQuarterNameQ2 CHAR(2)
DECLARE @ReforecastQuarterNameQ3 CHAR(2)

IF (@ReforecastEffectivePeriodQ1 IS NOT NULL)
BEGIN
	SET @ReforecastQuarterNameQ1 = (SELECT TOP 1
										ReforecastQuarterName 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectivePeriod = @ReforecastEffectivePeriodQ1)
END
ELSE
BEGIN
	PRINT ('@ReforecastEffectivePeriodQ1 is NULL - cannot determine Q1 reforecast quarter name.')
END


IF (@ReforecastEffectivePeriodQ2 IS NOT NULL)
BEGIN
	SET @ReforecastQuarterNameQ2 = (SELECT TOP 1
											ReforecastQuarterName 
										FROM
											dbo.Reforecast 
										WHERE
											ReforecastEffectivePeriod = @ReforecastEffectivePeriodQ2)
END
ELSE
BEGIN
	PRINT ('@ReforecastEffectivePeriodQ2 is NULL - cannot determine Q2 reforecast quarter name.')
END


IF (@ReforecastEffectivePeriodQ3 IS NOT NULL)
BEGIN
	SET @ReforecastQuarterNameQ3 = (SELECT TOP 1
											ReforecastQuarterName
										FROM
											dbo.Reforecast 
										WHERE
											ReforecastEffectivePeriod = @ReforecastEffectivePeriodQ3)
END
ELSE
BEGIN
	PRINT ('@ReforecastEffectivePeriodQ3 is NULL - cannot determine Q3 reforecast quarter name.')
END

--------------------------------------------------------------------------
/*	COMMON Block to setup the Report Filter Tables		*/
--------------------------------------------------------------------------
	
CREATE TABLE #EntityFilterTable (PropertyFundKey Int NOT NULL)
CREATE TABLE #FunctionalDepartmentFilterTable (FunctionalDepartmentKey Int NOT NULL)
CREATE TABLE #ActivityTypeFilterTable (ActivityTypeKey Int NOT NULL)
CREATE TABLE #AllocationRegionFilterTable (AllocationRegionKey Int NOT NULL)
CREATE TABLE #AllocationSubRegionFilterTable (AllocationRegionKey Int NOT NULL)
CREATE TABLE #MajorAccountCategoryFilterTable (GlAccountCategoryKey Int NOT NULL)	
CREATE TABLE #MinorAccountCategoryFilterTable (GlAccountCategoryKey Int NOT NULL)	
CREATE TABLE #OriginatingRegionFilterTable (OriginatingRegionKey Int NOT NULL)
CREATE TABLE #OriginatingSubRegionFilterTable (OriginatingRegionKey Int NOT NULL)	
	
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #EntityFilterTable (PropertyFundKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #FunctionalDepartmentFilterTable	(FunctionalDepartmentKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #ActivityTypeFilterTable (ActivityTypeKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #AllocationRegionFilterTable	(AllocationRegionKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #AllocationSubRegionFilterTable (AllocationRegionKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #MajorAccountCategoryFilterTable (GlAccountCategoryKey)	
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #MinorAccountCategoryFilterTable (GlAccountCategoryKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OriginatingRegionFilterTable (OriginatingRegionKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OriginatingSubRegionFilterTable (OriginatingRegionKey)
	
IF (@EntityList IS NOT NULL)
	BEGIN
	Insert Into #EntityFilterTable
	Select pf.PropertyFundKey
	From dbo.Split(@_EntityList) t1
		INNER JOIN PropertyFund pf ON pf.PropertyFundName = t1.item
	
	END
	
IF (@FunctionalDepartmentList IS NOT NULL)
	BEGIN
	Insert Into #FunctionalDepartmentFilterTable
	Select fd.FunctionalDepartmentKey 
	From dbo.Split(@_FunctionalDepartmentList) t1
		INNER JOIN FunctionalDepartment fd ON fd.FunctionalDepartmentName = t1.item
	END

IF 	(@ActivityTypeList IS NOT NULL)
	BEGIN
    INSERT INTO #ActivityTypeFilterTable
    SELECT at.ActivityTypeKey 
    FROM dbo.Split(@_ActivityTypeList) t1
		INNER JOIN ActivityType at ON at.ActivityTypeName = t1.item
	END
	
IF (@AllocationRegionList IS NOT NULL)
	BEGIN
	Insert Into #AllocationRegionFilterTable
	Select ar.AllocationRegionKey 
	From dbo.Split(@_AllocationRegionList) t1
		INNER JOIN AllocationRegion ar ON ar.RegionName = t1.item
	END

IF (@AllocationSubRegionList IS NOT NULL)
	BEGIN
	Insert Into #AllocationSubRegionFilterTable
	Select ar.AllocationRegionKey
	From dbo.Split(@_AllocationSubRegionList) t1
		INNER JOIN AllocationRegion ar ON ar.SubRegionName = t1.item
	END

IF (@MajorAccountCategoryList IS NOT NULL)
	BEGIN
	Insert Into #MajorAccountCategoryFilterTable
	Select gl.GlAccountCategoryKey 
	From dbo.Split(@_MajorAccountCategoryList) t1
		INNER JOIN GlAccountCategory gl ON gl.MajorCategoryName = t1.item
	END
	
IF 	(@MinorAccountCategoryList IS NOT NULL)
	BEGIN
    INSERT INTO #MinorAccountCategoryFilterTable
    SELECT gl.GlAccountCategoryKey 
    FROM dbo.Split(@MinorAccountCategoryList) t1
		INNER JOIN GlAccountCategory gl ON gl.MinorCategoryName = t1.item
	END	

IF (@OriginatingRegionList IS NOT NULL)
	BEGIN
	Insert Into #OriginatingRegionFilterTable
	Select orr.OriginatingRegionKey 
	From dbo.Split(@_OriginatingRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.RegionName = t1.item
	END

IF (@OriginatingSubRegionList IS NOT NULL)
	BEGIN
	Insert Into #OriginatingSubRegionFilterTable
	Select orr.OriginatingRegionKey  
	From dbo.Split(@OriginatingSubRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.SubRegionName = t1.item
	END		
--------------------------------------------------------------------------
/*	COMMON END															*/
--------------------------------------------------------------------------
	

IF 	OBJECT_ID('tempdb..#BudgetOriginator') IS NOT NULL
    DROP TABLE #BudgetOriginator

CREATE TABLE #BudgetOriginator
(	
	GlAccountCategoryKey		INT,
    AllocationRegionKey			INT,
    OriginatingRegionKey		INT,
    FunctionalDepartmentKey		INT,
    PropertyFundKey				INT,
	CalendarPeriod				INT,
	SourceName					VARCHAR(50),
	EntryDate					VARCHAR(10),
	[User]						NVARCHAR(20),
	[Description]				NVARCHAR(60),
	AdditionalDescription		NVARCHAR(4000),
	PropertyFundCode			Varchar(6) DEFAULT(''), --Varchar, for this helps to keep reports size smaller
	OriginatingRegionCode		Varchar(15) DEFAULT(''), --Varchar, for this helps to keep reports size smaller
	GlAccountKey				Int  NULL,
	
	--Month to date	
	MtdGrossActual				MONEY,
	MtdGrossBudget				MONEY,
	MtdGrossReforecastQ1		MONEY,
	MtdGrossReforecastQ2		MONEY,
	MtdGrossReforecastQ3		MONEY,
	MtdNetActual				MONEY,
	MtdNetBudget				MONEY,
	MtdNetReforecastQ1			MONEY,
	MtdNetReforecastQ2			MONEY,
	MtdNetReforecastQ3			MONEY,
	
	--Year to date
	YtdGrossActual				MONEY,	
	YtdGrossBudget				MONEY, 
	YtdGrossReforecastQ1		MONEY,
	YtdGrossReforecastQ2		MONEY,
	YtdGrossReforecastQ3		MONEY,
	YtdNetActual				MONEY, 
	YtdNetBudget				MONEY, 
	YtdNetReforecastQ1			MONEY,
	YtdNetReforecastQ2			MONEY,
	YtdNetReforecastQ3			MONEY,

	--Annual	
	AnnualGrossBudget			MONEY,
	AnnualGrossReforecastQ1		MONEY,
	AnnualGrossReforecastQ2		MONEY,
	AnnualGrossReforecastQ3		MONEY,
	AnnualNetBudget				MONEY,
	AnnualNetReforecastQ1		MONEY,
	AnnualNetReforecastQ2		MONEY,
	AnnualNetReforecastQ3		MONEY,
	--Annual estimated
	AnnualEstGrossBudget		MONEY,
	AnnualEstGrossReforecastQ1	MONEY,
	AnnualEstGrossReforecastQ2	MONEY,
	AnnualEstGrossReforecastQ3	MONEY,
	AnnualEstNetBudget			MONEY,
	AnnualEstNetReforecastQ1	MONEY,
	AnnualEstNetReforecastQ2	MONEY,
	AnnualEstNetReforecastQ3	MONEY
)
DECLARE @cmdString Varchar(8000)

-- Get actual information
SET @cmdString = (Select '
INSERT INTO #BudgetOriginator
SELECT 	
	gac.GlAccountCategoryKey,
    pa.AllocationRegionKey,
    pa.OriginatingRegionKey,
    pa.FunctionalDepartmentKey,
    pa.PropertyFundKey,
    c.CalendarPeriod,
    s.SourceName,
    CONVERT(varchar(10),ISNULL(pa.EntryDate,''''), 101) as EntryDate,
    ISNULL(pa.[User], '''') [User],
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.Description ELSE '''' END as Description,
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.AdditionalDescription ELSE '''' END as AdditionalDescription,
    ISNULL(pa.PropertyFundCode, '''') PropertyFundCode,
    ISNULL(pa.OriginatingRegionCode, '''') OriginatingRegionCode,
    pa.GlAccountKey,
    
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as MtdGrossActual,
	NULL as MtdGrossBudget,
	
	' + /*-- MtdGrossReforecast --------------------------*/ + '
	
	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + 
				' AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdGrossReforecastQ1,
	
	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + 
				' AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdGrossReforecastQ2,
	
	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + 
				' AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdGrossReforecastQ3,		
	
	' + /*-- MtdGrossReforecast End --------------------------*/ + '
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as MtdNetActual,
	NULL as MtdNetBudget,
	
	' + /*-- MtdNetReforecast --------------------------*/ + '
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + 
		' AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdNetReforecastQ1,
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + 
		' AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdNetReforecastQ2,
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + 
		' AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdNetReforecastQ3,		
	
	' + /*-- MtdNetReforecast End --------------------------*/ + '
	
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as YtdGrossActual,
	NULL as YtdGrossBudget,
	
	' + /*-- YtdGrossReforecast --------------------------*/ + '
	
	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			' AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
		) as YtdGrossReforecastQ1,
		
	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			' AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
		) as YtdGrossReforecastQ2,
		
	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			' AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
		) as YtdGrossReforecastQ3,				
	
	' + /*-- YtdGrossReforecast End --------------------------*/ + '
	
	')
	DECLARE @cmdString2 VARCHAR(8000)
	SET @cmdString2 = (SELECT '		
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as YtdNetActual,
	NULL as YtdNetBudget,
	
	' + /*-- YtdNetReforecast End --------------------------*/ + '
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
		) as YtdNetReforecastQ1,

	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
		) as YtdNetReforecastQ2,

	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
		) as YtdNetReforecastQ3,

	' + /*-- YtdNetReforecast End --------------------------*/ + '
	
	NULL as AnnualGrossBudget,
	
	' + /*-- AnnualGrossReforecast --------------------------*/ + '
	
	SUM(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ1,

	SUM(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ2,

	SUM(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ3,

	' + /*-- AnnualGrossReforecast End --------------------------*/ + '

	NULL as AnnualNetBudget,
		
	' + /*-- AnnualNetReforecast --------------------------*/ + '
	
    SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualNetReforecastQ1,
	
    SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualNetReforecastQ2,
	
    SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualNetReforecastQ3,		
	
	' + /*-- AnnualNetReforecast End --------------------------*/ + '
	
		')
	DECLARE @cmdString3 VARCHAR(8000)
	SET @cmdString3 = (SELECT '	
	
	SUM(
        er.Rate *
        CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pa.LocalActual
        ELSE 
			0
        END
	) as AnnualEstGrossBudget,
	
	' + /*-- AnnualEstGrossReforecast --------------------------*/ + '
	
	SUM(
            er.Rate *
            CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstGrossReforecastQ1,

	SUM(
            er.Rate *
            CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstGrossReforecastQ2,

	SUM(
            er.Rate *
            CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstGrossReforecastQ3,

	' + /*-- AnnualEstGrossReforecast End --------------------------*/ + '

    SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pa.LocalActual
        ELSE 
			0
        END
    ) as AnnualEstNetBudget,
    
    ' + /*-- AnnualEstNetReforecast --------------------------*/ + '
    
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstNetReforecastQ1,
	
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstNetReforecastQ2,
	
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstNetReforecastQ3		
	
	' + /*-- AnnualEstNetReforecast End --------------------------*/ + '

FROM
	ProfitabilityActual pa

	INNER JOIN Overhead oh ON oh.OverheadKey = pa.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1

	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pa.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pa.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pa.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pa.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pa.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pa.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pa.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pa.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')
			
    INNER JOIN ExchangeRate er ON er.SourceCurrencyKey = pa.LocalCurrencyKey AND er.CalendarKey = pa.CalendarKey
	INNER JOIN Currency dc ON er.DestinationCurrencyKey = dc.CurrencyKey
	INNER JOIN Calendar c ON c.CalendarKey = pa.CalendarKey
	INNER JOIN Source s ON s.SourceKey = pa.SourceKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pa.ReimbursableKey '

    + CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pa.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pa.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pa.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pa.ActivityTypeKey' ELSE '' END +
    + CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pa.PropertyFundKey' ELSE '' END + '

WHERE  1 = 1
	AND c.CalendarYear = ' + STR(@CalendarYear,4,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select t1.FunctionalDepartmentKey From #FunctionalDepartmentFilterTable t1)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select t1.ActivityTypeKey From #ActivityTypeFilterTable t1)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select t1.PropertyFundKey From #EntityFilterTable t1)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select t1.AllocationRegionKey From #AllocationRegionFilterTable t1)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select t1.AllocationRegionKey From #AllocationSubRegionFilterTable t1)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select t1.GlAccountCategoryKey From #MajorAccountCategoryFilterTable t1)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select t1.GlAccountCategoryKey From #MinorAccountCategoryFilterTable t1)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OriginatingRegionFilterTable t1)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OriginatingSubRegionFilterTable t1)' END +
'
GROUP BY
	gac.GlAccountCategoryKey,
	pa.AllocationRegionKey,
	pa.OriginatingRegionKey,
	pa.FunctionalDepartmentKey,
	pa.PropertyFundKey,
	c.CalendarPeriod,
	s.SourceName,
	CONVERT(varchar(10),ISNULL(pa.EntryDate,''''), 101),
	ISNULL(pa.[User], ''''),
	CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.Description ELSE '''' END,
	CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.AdditionalDescription ELSE '''' END,
	ISNULL(pa.PropertyFundCode, ''''),
	ISNULL(pa.OriginatingRegionCode, ''''),
	pa.GlAccountKey
')

IF (LEN(@cmdString) > 7995 OR LEN(@cmdString2) > 7995 OR LEN(@cmdString3) > 7995)
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LTRIM(RTRIM(LEN(@cmdString)))) + ' + ' + STR(LTRIM(RTRIM(LEN(@cmdString2)))) + ' + ' + STR(LTRIM(RTRIM(LEN(@cmdString3)))))

PRINT @cmdString
PRINT @cmdString2
PRINT @cmdString3

EXEC (@cmdString + @cmdString2 + @cmdString3)

-----------------------------------------------------------------------------------------------------
-- Get budget information
SET @cmdString = (SELECT '
INSERT INTO #BudgetOriginator
SELECT 	
	gac.GlAccountCategoryKey,
    pb.AllocationRegionKey,
    pb.OriginatingRegionKey,
    pb.FunctionalDepartmentKey,
    pb.PropertyFundKey,
    c.CalendarPeriod,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pb.GlAccountKey END,
    
    NULL as MtdGrossActual,
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as MtdGrossBudget,
	
	NULL as MtdGrossReforecastQ1,
	NULL as MtdGrossReforecastQ2,
	NULL as MtdGrossReforecastQ3,
	
	NULL as MtdNetActual,
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pb.LocalBudget
        ELSE 
			0
        END
    ) as MtdNetBudget,
    
	NULL as MtdNetReforecastQ1,
	NULL as MtdNetReforecastQ2,
	NULL as MtdNetReforecastQ3,
	
	NULL as YtdGrossActual,	
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as YtdGrossBudget,
	
	NULL as YtdGrossReforecastQ1,
	NULL as YtdGrossReforecastQ2,
	NULL as YtdGrossReforecastQ3,
	
	NULL as YtdNetActual, 
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pb.LocalBudget
        ELSE 
			0
        END
    ) as YtdNetBudget,
    
	NULL as YtdNetReforecastQ1,
	NULL as YtdNetReforecastQ2,
	NULL as YtdNetReforecastQ3,
	
	SUM(er.Rate * pb.LocalBudget) as AnnualGrossBudget,
	
	NULL as AnnualGrossReforecastQ1,
	NULL as AnnualGrossReforecastQ2,
	NULL as AnnualGrossReforecastQ3,

	SUM(er.Rate * r.MultiplicationFactor * pb.LocalBudget) as AnnualNetBudget,
	
	NULL as AnnualNetReforecastQ1,
	NULL as AnnualNetReforecastQ2,
	NULL as AnnualNetReforecastQ3,	

	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as AnnualEstGrossBudget,
	
	NULL as AnnualEstGrossReforecastQ1,
	NULL as AnnualEstGrossReforecastQ2,
	NULL as AnnualEstGrossReforecastQ3,

	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pb.LocalBudget
        ELSE 
			0
        END
    ) as AnnualEstNetBudget,
    
	NULL as AnnualEstNetReforecastQ1,
	NULL as AnnualEstNetReforecastQ2,
	NULL as AnnualEstNetReforecastQ3
    
FROM
	ProfitabilityBudget pb 
	
	INNER JOIN Overhead oh ON oh.OverheadKey = pb.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
	
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pb.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pb.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pb.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pb.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pb.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pb.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pb.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pb.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')

	INNER JOIN ExchangeRate er ON er.SourceCurrencyKey = pb.LocalCurrencyKey AND er.CalendarKey = pb.CalendarKey
	INNER JOIN Currency dc ON er.DestinationCurrencyKey = dc.CurrencyKey
	INNER JOIN Calendar c ON c.CalendarKey = pb.CalendarKey
	INNER JOIN Source s ON s.SourceKey = pb.SourceKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pb.ReimbursableKey '
    			
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pb.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pb.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pb.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pb.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pb.PropertyFundKey' ELSE '' END + '
    
WHERE  1 = 1 
	AND c.CalendarYear = ' + STR(@CalendarYear,4,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'
GROUP BY
    gac.GlAccountCategoryKey,
    pb.AllocationRegionKey,
    pb.OriginatingRegionKey,
    pb.FunctionalDepartmentKey,
    pb.PropertyFundKey,
    c.CalendarPeriod,
    s.SourceName,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pb.GlAccountKey END
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)))

print @cmdString
EXEC (@cmdString)

--------------------------------------------------------------------------------------------------------------------------
-- Get Q1 reforecast information
SET @cmdString = (Select '
INSERT INTO #BudgetOriginator
SELECT 	
	gac.GlAccountCategoryKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.FunctionalDepartmentKey,
    pr.PropertyFundKey,
    c.CalendarPeriod,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END,
    
	NULL as MtdGrossActual,
	NULL as MtdGrossBudget,
	
	' + /*-- MtdGrossReforecast --------------------------*/ + '
	
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecastQ1,
	NULL  as MtdGrossReforecastQ2,
	NULL  as MtdGrossReforecastQ3,
	
	' + /*-- MtdGrossReforecast End --------------------------*/ + '
	
	NULL as MtdNetActual,
	NULL as MtdNetBudget,
	
	' + /*-- MtdNetReforecast --------------------------*/ + '
	
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as MtdNetReforecastQ1,
    NULL as MtdNetReforecastQ2,
    NULL as MtdNetReforecastQ3,    
	
	' + /*-- MtdNetReforecast End --------------------------*/ + '
	
	NULL as YtdGrossActual,
	NULL as YtdGrossBudget,
	
	' + /*-- YtdGrossReforecast --------------------------*/ + '
	
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecastQ1, 
	NULL as YtdGrossReforecastQ2,
	NULL as YtdGrossReforecastQ3,
	
	' + /*-- YtdGrossReforecast End --------------------------*/ + '
	
	NULL as YtdNetActual,
	NULL as YtdNetBudget,
	
	' + /*-- YtdNetReforecast --------------------------*/ + '
	
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as YtdNetReforecastQ1,
	NULL  as YtdNetReforecastQ2,
	NULL  as YtdNetReforecastQ3,
	
	' + /*-- YtdNetReforecast End --------------------------*/ + '
	
	NULL as AnnualGrossBudget,
	
	' + /*-- AnnualGrossReforecast --------------------------*/ + '
		
	SUM(er.Rate * pr.LocalReforecast) as AnnualGrossReforecastQ1,
	NULL as AnnualGrossReforecastQ2,
	NULL as AnnualGrossReforecastQ3,

	' + /*-- AnnualGrossReforecast End --------------------------*/ + '

	NULL as AnnualNetBudget,
	
	' + /*-- AnnualNetReforecast --------------------------*/ + '
	
	SUM (er.Rate * r.MultiplicationFactor * pr.LocalReforecast)as AnnualNetReforecastQ1,
	NULL as AnnualNetReforecastQ2,
	NULL as AnnualNetReforecastQ3,

	' + /*-- AnnualNetReforecast End --------------------------*/ + '

	NULL as AnnualEstGrossBudget,
	
	' + /*-- AnnualEstGrossReforecast --------------------------*/ + '
	
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN 
			pr.LocalReforecast
		ELSE
			0
		END
	) as AnnualEstGrossReforecastQ1,
	NULL as AnnualEstGrossReforecastQ2,
	NULL as AnnualEstGrossReforecastQ3,		
	
	' + /*-- AnnualEstGrossReforecast End --------------------------*/ + '
	
	NULL as AnnualEstNetBudget,
	
	' + /*-- AnnualEstNetReforecast --------------------------*/ + '
	
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstNetReforecastQ1,
	NULL as AnnualEstNetReforecastQ2,
	NULL as AnnualEstNetReforecastQ3        
    
    ' + /*-- AnnualEstNetReforecast End --------------------------*/ + '
    
FROM
	ProfitabilityReforecast pr 
	
	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1

	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')

	INNER JOIN ExchangeRate er ON er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
	INNER JOIN Currency dc ON er.DestinationCurrencyKey = dc.CurrencyKey
	INNER JOIN Calendar c ON c.CalendarKey = pr.CalendarKey
	INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
	INNER JOIN Source s ON s.SourceKey = pr.SourceKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pr.ReimbursableKey '
    			
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pr.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey' ELSE '' END + '
    
WHERE  1 = 1 
	AND c.CalendarYear = ' + STR(@CalendarYear,4,0) + '
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ1,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'
GROUP BY
    gac.GlAccountCategoryKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.FunctionalDepartmentKey,
    pr.PropertyFundKey,
    c.CalendarPeriod,
    s.SourceName,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END
	
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)


--------------------------------------------------------------------------------------------------------------------------
-- Get Q2 reforecast information
SET @cmdString = (Select '
INSERT INTO #BudgetOriginator
SELECT 	
	gac.GlAccountCategoryKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.FunctionalDepartmentKey,
    pr.PropertyFundKey,
    c.CalendarPeriod,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END,
    
	NULL as MtdGrossActual,
	NULL as MtdGrossBudget,
	
	' + /*-- MtdGrossReforecast --------------------------*/ + '
	
	NULL  as MtdGrossReforecastQ1,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecastQ2,
	NULL  as MtdGrossReforecastQ3,
	
	' + /*-- MtdGrossReforecast End --------------------------*/ + '
	
	NULL as MtdNetActual,
	NULL as MtdNetBudget,
	
	' + /*-- MtdNetReforecast --------------------------*/ + '
	
	NULL as MtdNetReforecastQ1,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as MtdNetReforecastQ2,
    NULL as MtdNetReforecastQ3,    
	
	' + /*-- MtdNetReforecast End --------------------------*/ + '
	
	NULL as YtdGrossActual,
	NULL as YtdGrossBudget,
	
	' + /*-- YtdGrossReforecast --------------------------*/ + '
	
	NULL as YtdGrossReforecastQ1,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecastQ2,
	NULL as YtdGrossReforecastQ3,
	
	' + /*-- YtdGrossReforecast End --------------------------*/ + '
	
	NULL as YtdNetActual,
	NULL as YtdNetBudget,
	
	' + /*-- YtdNetReforecast --------------------------*/ + '
	
	NULL as YtdNetReforecastQ1,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as YtdNetReforecastQ2,
	NULL as YtdNetReforecastQ3,
	
	' + /*-- YtdNetReforecast End --------------------------*/ + '
	
	NULL as AnnualGrossBudget,
	
	' + /*-- AnnualGrossReforecast --------------------------*/ + '
		
	NULL as AnnualGrossReforecastQ1,
	SUM(er.Rate * pr.LocalReforecast) as AnnualGrossReforecastQ2,
	NULL as AnnualGrossReforecastQ3,

	' + /*-- AnnualGrossReforecast End --------------------------*/ + '

	NULL as AnnualNetBudget,
	
	' + /*-- AnnualNetReforecast --------------------------*/ + '
	
	NULL as AnnualNetReforecastQ1,
	SUM (er.Rate * r.MultiplicationFactor * pr.LocalReforecast)as AnnualNetReforecastQ2,
	NULL as AnnualNetReforecastQ3,
	
	' + /*-- AnnualNetReforecast End --------------------------*/ + '
	
	NULL as AnnualEstGrossBudget,
	
	' + /*-- AnnualEstGrossReforecast --------------------------*/ + '
	
	NULL as AnnualEstGrossReforecastQ1,
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN 
			pr.LocalReforecast
		ELSE
			0
		END
	) as AnnualEstGrossReforecastQ2,
	NULL as AnnualEstGrossReforecastQ3,		
	
	' + /*-- AnnualEstGrossReforecast End --------------------------*/ + '
	
	NULL as AnnualEstNetBudget,
	
	' + /*-- AnnualEstNetReforecast --------------------------*/ + '
	
	NULL as AnnualEstNetReforecastQ1,
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstNetReforecastQ2,
	NULL as AnnualEstNetReforecastQ3        
    
    ' + /*-- AnnualEstNetReforecast End --------------------------*/ + '
    
FROM
	ProfitabilityReforecast pr 
	
	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1

	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')

	INNER JOIN ExchangeRate er ON er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
	INNER JOIN Currency dc ON er.DestinationCurrencyKey = dc.CurrencyKey
	INNER JOIN Calendar c ON c.CalendarKey = pr.CalendarKey
	INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
	INNER JOIN Source s ON s.SourceKey = pr.SourceKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pr.ReimbursableKey '
    			
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pr.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey' ELSE '' END + '
    
WHERE  1 = 1 
	AND c.CalendarYear = ' + STR(@CalendarYear,4,0) + '
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ2,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'
GROUP BY
    gac.GlAccountCategoryKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.FunctionalDepartmentKey,
    pr.PropertyFundKey,
    c.CalendarPeriod,
    s.SourceName,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END
	
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)

--------------------------------------------------------------------------------------------------------------------------
-- Get Q3 reforecast information
SET @cmdString = (Select '
INSERT INTO #BudgetOriginator
SELECT 	
	gac.GlAccountCategoryKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.FunctionalDepartmentKey,
    pr.PropertyFundKey,
    c.CalendarPeriod,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END,
    
	NULL as MtdGrossActual,
	NULL as MtdGrossBudget,
	
	' + /*-- MtdGrossReforecast --------------------------*/ + '
	
	NULL  as MtdGrossReforecastQ1,
	NULL  as MtdGrossReforecastQ2,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecastQ3,
	
	' + /*-- MtdGrossReforecast End --------------------------*/ + '
	
	NULL as MtdNetActual,
	NULL as MtdNetBudget,
	
	' + /*-- MtdNetReforecast --------------------------*/ + '
	
	NULL as MtdNetReforecastQ1,
	NULL as MtdNetReforecastQ2,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as MtdNetReforecastQ3, 
	
	' + /*-- MtdNetReforecast End --------------------------*/ + '
	
	NULL as YtdGrossActual,
	NULL as YtdGrossBudget,
	
	' + /*-- YtdGrossReforecast --------------------------*/ + '
	
	NULL as YtdGrossReforecastQ1,
	NULL as YtdGrossReforecastQ2,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecastQ3,
	
	' + /*-- YtdGrossReforecast End --------------------------*/ + '
	
	NULL as YtdNetActual,
	NULL as YtdNetBudget,
	
	' + /*-- YtdNetReforecast --------------------------*/ + '
	
	NULL as YtdNetReforecastQ1,
	NULL as YtdNetReforecastQ2,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as YtdNetReforecastQ3,
	
	' + /*-- YtdNetReforecast End --------------------------*/ + '
	
	NULL as AnnualGrossBudget,
	
	' + /*-- AnnualGrossReforecast --------------------------*/ + '
		
	NULL as AnnualGrossReforecastQ1,
	NULL as AnnualGrossReforecastQ2,
	SUM(er.Rate * pr.LocalReforecast) as AnnualGrossReforecastQ3,

	' + /*-- AnnualGrossReforecast End --------------------------*/ + '

	NULL as AnnualNetBudget,
	
	' + /*-- AnnualNetReforecast --------------------------*/ + '
	
	NULL as AnnualNetReforecastQ1,
	NULL as AnnualNetReforecastQ2,
	SUM (er.Rate * r.MultiplicationFactor * pr.LocalReforecast)as AnnualNetReforecastQ3,
	
	' + /*-- AnnualNetReforecast End --------------------------*/ + '
	
	NULL as AnnualEstGrossBudget,
	
	' + /*-- AnnualEstGrossReforecast --------------------------*/ + '
	
	NULL as AnnualEstGrossReforecastQ1,
	NULL as AnnualEstGrossReforecastQ2,
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN 
			pr.LocalReforecast
		ELSE
			0
		END
	) as AnnualEstGrossReforecastQ3,
	
	' + /*-- AnnualEstGrossReforecast End --------------------------*/ + '
	
	NULL as AnnualEstNetBudget,
	
	' + /*-- AnnualEstNetReforecast --------------------------*/ + '
	
	NULL as AnnualEstNetReforecastQ1,
	NULL as AnnualEstNetReforecastQ2,
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstNetReforecastQ3
    
    ' + /*-- AnnualEstNetReforecast End --------------------------*/ + '
    
FROM
	ProfitabilityReforecast pr 
	
	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1

	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')

	INNER JOIN ExchangeRate er ON er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
	INNER JOIN Currency dc ON er.DestinationCurrencyKey = dc.CurrencyKey
	INNER JOIN Calendar c ON c.CalendarKey = pr.CalendarKey
	INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
	INNER JOIN Source s ON s.SourceKey = pr.SourceKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pr.ReimbursableKey '
    			
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pr.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey' ELSE '' END + '
    
WHERE  1 = 1 
	AND c.CalendarYear = ' + STR(@CalendarYear,4,0) + '
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ3,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'
GROUP BY
    gac.GlAccountCategoryKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.FunctionalDepartmentKey,
    pr.PropertyFundKey,
    c.CalendarPeriod,
    s.SourceName,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END
	
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)

-----------------------------------------------------------------------------------------------------------------------    
SELECT 
	gac.AccountSubTypeName ExpenseType,
    ar.RegionName AS AllocationRegionName,
    ar.SubRegionName AS AllocationSubRegionName,
    orr.RegionName AS OriginatingRegionName,
    orr.SubRegionName AS OriginatingSubRegionName,
    fd.FunctionalDepartmentName AS FunctionalDepartmentName,
    fd.SubFunctionalDepartmentName AS JobCode,
    gac.MajorCategoryName AS MajorExpenseCategoryName,
    gac.MinorCategoryName AS MinorExpenseCategoryName,
    pf.PropertyFundType AS EntityType,
    pf.PropertyFundName AS EntityName,
    res.CalendarPeriod AS ExpensePeriod,
    res.EntryDate,
    res.[User],
    res.[Description],
    res.AdditionalDescription,
    res.SourceName AS SourceName,
    res.PropertyFundCode PropertyFundCode,
    res.OriginatingRegionCode OriginatingRegionCode,
    ISNULL(ga.Code, '') GlAccountCode,
    ISNULL(ga.Name, '') GlAccountName,
    
	--Month to date    
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(MtdGrossActual,0) ELSE ISNULL(MtdNetActual,0) END) AS MtdActual,
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(MtdGrossBudget,0) ELSE ISNULL(MtdNetBudget,0) END) AS MtdOriginalBudget,
	
	----- MtdReforecast
	SUM(CASE WHEN (@IsGross = 1) THEN
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ1 
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ1
		END,0) 
	END) 
	AS MtdReforecastQ1,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ2 
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ2 
		END,0) 
	END) 
	AS MtdReforecastQ2,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ3 
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ3 
		END,0) 
	END) 
	AS MtdReforecastQ3,		
	----- MtdReforecast End
	
	----- MtdVariance
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ1 
		END, 0) - ISNULL(MtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ1 
		END, 0) - ISNULL(MtdNetActual, 0) 
	END) 
	AS MtdVarianceQ1,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ2 
		END, 0) - ISNULL(MtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ2 
		END, 0) - ISNULL(MtdNetActual, 0) 
	END) 
	AS MtdVarianceQ2,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ3 
		END, 0) - ISNULL(MtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ3 
		END, 0) - ISNULL(MtdNetActual, 0) 
	END) 
	AS MtdVarianceQ3,		
	----- MtdVariance End
	
	--Year to date
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(YtdGrossActual,0) ELSE ISNULL(YtdNetActual,0) END) AS YtdActual,	
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(YtdGrossBudget,0) ELSE ISNULL(YtdNetBudget,0) END) AS YtdOriginalBudget,
	
	----- YtdReforecast
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ1 
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ1 
		END,0) 
	END) 
	AS YtdReforecastQ1,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ2 
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ2 
		END,0) 
	END) 
	AS YtdReforecastQ2,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ3 
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ3 
		END,0) 
	END) 
	AS YtdReforecastQ3,		
	----- YtdReforecast End
	
	----- YtdVariance
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ1 
		END, 0) - ISNULL(YtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ1 
		END, 0) - ISNULL(YtdNetActual, 0) 
	END) 
	AS YtdVarianceQ1,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ2 
		END, 0) - ISNULL(YtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ2 
		END, 0) - ISNULL(YtdNetActual, 0) 
	END) 
	AS YtdVarianceQ2,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ3 
		END, 0) - ISNULL(YtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ3 
		END, 0) - ISNULL(YtdNetActual, 0) 
	END) 
	AS YtdVarianceQ3,		
	----- YtdVariance End
	
	--Annual
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(AnnualGrossBudget,0) ELSE ISNULL(AnnualNetBudget,0) END) AS AnnualOriginalBudget,	
	
	----- AnnualReforecast
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualGrossBudget 
		ELSE 
			AnnualGrossReforecastQ1 
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualNetBudget 
		ELSE 
			AnnualNetReforecastQ1 
		END,0) 
	END) 
	AS AnnualReforecastQ1,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualGrossBudget 
		ELSE 
			AnnualGrossReforecastQ2 
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualNetBudget 
		ELSE 
			AnnualNetReforecastQ2 
		END,0) 
	END)
	AS AnnualReforecastQ2,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN
			AnnualGrossBudget
		ELSE
			AnnualGrossReforecastQ3
		END,0)
	ELSE
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN
			AnnualNetBudget
		ELSE
			AnnualNetReforecastQ3
		END,0)
	END)
	AS AnnualReforecastQ3	
	----- AnnualReforecast End
	
	--SUM(CASE WHEN (@IsGross = 1) THEN 
	--	ISNULL(CASE WHEN @PreviousReforecastQuaterName = 'Q1' THEN 
	--		AnnualGrossReforecastQ1 		
	--	END,0) 
	--ELSE 
	--	ISNULL(CASE WHEN @PreviousReforecastQuaterName = 'Q1' THEN 
	--		AnnualNetReforecastQ1	
	--	END,0) 
	--END) 
	--AS AnnualReforecastQ1

INTO
	#Output
FROM
	#BudgetOriginator res
	INNER JOIN AllocationRegion ar ON ar.AllocationRegionKey = res.AllocationRegionKey
	INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = res.OriginatingRegionKey
	INNER JOIN PropertyFund pf ON pf.PropertyFundKey = res.PropertyFundKey
	INNER JOIN FunctionalDepartment fd ON fd.FunctionalDepartmentKey = res.FunctionalDepartmentKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = res.GlAccountCategoryKey 
	LEFT OUTER JOIN GlAccount ga ON ga.GlAccountKey = res.GlAccountKey 
GROUP BY	
	gac.AccountSubTypeName,
    ar.RegionName,
    ar.SubRegionName,
    orr.RegionName,
    orr.SubRegionName,
    fd.FunctionalDepartmentName,
    fd.SubFunctionalDepartmentName,
    gac.MajorCategoryName,
    gac.MinorCategoryName,
    pf.PropertyFundType,
    pf.PropertyFundName,
    res.CalendarPeriod,
    res.EntryDate,
    res.[User],
    res.[Description],
    res.AdditionalDescription,
    res.SourceName,
    res.PropertyFundCode,
    res.OriginatingRegionCode,
    ISNULL(ga.Code, ''),
    ISNULL(ga.Name, '')
	
--Output
SELECT
	ExpenseType,
    AllocationRegionName,
    AllocationSubRegionName,
    OriginatingRegionName,
    OriginatingSubRegionName,
    FunctionalDepartmentName,
    JobCode,
    MajorExpenseCategoryName,
    MinorExpenseCategoryName,
    EntityType,
    EntityName,
    ExpensePeriod,
    EntryDate,
    [User],
    [Description],
    AdditionalDescription,
    SourceName,
    PropertyFundCode,
    OriginatingRegionCode,
    GlAccountCode,
    GlAccountName,
    
	--Month to date    
	MtdActual,
	MtdOriginalBudget,
	
	--MtdReforecastQ1,
	--MtdReforecastQ2,
	MtdReforecastQ3,
	
	--MtdVarianceQ1,
	--MtdVarianceQ2,
	MtdVarianceQ3,
		
	--Year to date
	YtdActual,	
	YtdOriginalBudget,
	
	--YtdReforecastQ1,
	--YtdReforecastQ2,
	YtdReforecastQ3,
	
	--YtdVarianceQ1,
	--YtdVarianceQ2,
	YtdVarianceQ3,
	
	--Annual
	AnnualOriginalBudget,
	
	AnnualReforecastQ1,
	AnnualReforecastQ2,
	AnnualReforecastQ3
	
	--Annual Estimated
	--AnnualEstimatedActual,	
	--AnnualEstimatedVariance
FROM
	#Output
WHERE
	--Month to date    
	MtdActual <> 0.00 OR
	MtdOriginalBudget <> 0.00 OR
	
	--MtdReforecastQ1 <> 0.00 OR
	--MtdReforecastQ2 <> 0.00 OR
	MtdReforecastQ3 <> 0.00 OR
	
	--MtdVarianceQ1 <> 0.00 OR
	--MtdVarianceQ2 <> 0.00 OR
	MtdVarianceQ3 <> 0.00 OR
		
	--Year to date
	YtdActual <> 0.00 OR	
	YtdOriginalBudget <> 0.00 OR
	
	--YtdReforecastQ1 <> 0.00 OR
	--YtdReforecastQ2 <> 0.00 OR
	YtdReforecastQ3 <> 0.00 OR
	
	--YtdVarianceQ1 <> 0.00 OR
	--YtdVarianceQ2 <> 0.00 OR
	YtdVarianceQ3 <> 0.00 OR
	
	--Annual
	AnnualOriginalBudget <> 0.00 OR
	
	AnnualReforecastQ1 <> 0.00 OR
	AnnualReforecastQ2 <> 0.00 OR
	AnnualReforecastQ3 <> 0.00
	
	--Annual Estimated
	--AnnualEstimatedActual <> 0.00 OR	
	--AnnualEstimatedVariance <> 0.00
	
IF OBJECT_ID('tempdb..#BudgetOriginator') IS NOT NULL
    DROP TABLE #BudgetOriginator

IF 	OBJECT_ID('tempdb..#Output') IS NOT NULL
    DROP TABLE #Output

IF 	OBJECT_ID('tempdb..#EntityFilterTable') IS NOT NULL
	DROP TABLE #EntityFilterTable

IF 	OBJECT_ID('tempdb..#FunctionalDepartmentFilterTable') IS NOT NULL
	DROP TABLE #FunctionalDepartmentFilterTable

IF 	OBJECT_ID('tempdb..#ActivityTypeFilterTable') IS NOT NULL
	DROP TABLE #ActivityTypeFilterTable

IF 	OBJECT_ID('tempdb..#AllocationRegionFilterTable') IS NOT NULL
	DROP TABLE #AllocationRegionFilterTable

IF 	OBJECT_ID('tempdb..#AllocationSubRegionFilterTable') IS NOT NULL
	DROP TABLE #AllocationSubRegionFilterTable

IF 	OBJECT_ID('tempdb..#MajorAccountCategoryFilterTable') IS NOT NULL
	DROP TABLE #MajorAccountCategoryFilterTable

IF 	OBJECT_ID('tempdb..#MinorAccountCategoryFilterTable') IS NOT NULL
	DROP TABLE #MinorAccountCategoryFilterTable

IF 	OBJECT_ID('tempdb..#OriginatingRegionFilterTable') IS NOT NULL
	DROP TABLE #OriginatingRegionFilterTable

IF 	OBJECT_ID('tempdb..#OriginatingSubRegionFilterTable') IS NOT NULL
	DROP TABLE #OriginatingSubRegionFilterTable


GO

/****** Object:  StoredProcedure [dbo].[stp_R_BudgetOriginator]    Script Date: 12/08/2010 12:01:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [dbo].[stp_R_BudgetOriginator]
	@ReportExpensePeriod INT = NULL,
	@ReforecastQuaterName VARCHAR(10) = NULL, --'Q1' or 'Q2' or 'Q3'
	@DestinationCurrency VARCHAR(3) = NULL,
	@TranslationTypeName VARCHAR(50) = 'Global',
	@IsGross bit = 1,
	@FunctionalDepartmentList TEXT = NULL,
	@ActivityTypeList TEXT = NULL,
	@EntityList TEXT = NULL,
	@MajorAccountCategoryList TEXT = NULL,
	@MinorAccountCategoryList TEXT = NULL,
	@AllocationRegionList TEXT = NULL,
	@AllocationSubRegionList TEXT = NULL,
	@OriginatingRegionList TEXT = NULL,
	@OriginatingSubRegionList TEXT = NULL,
	@OverheadCode Varchar(10)='UNALLOC'

AS

DECLARE
	@_ReportExpensePeriod INT = @ReportExpensePeriod,
	@_ReforecastQuaterName VARCHAR(10) = @ReforecastQuaterName,
	@_DestinationCurrency VARCHAR(3) = @DestinationCurrency,
	@_TranslationTypeName VARCHAR(50) = @TranslationTypeName,
	@_IsGross bit = @IsGross,
	@_FunctionalDepartmentList VARCHAR(8000) = @FunctionalDepartmentList,
	@_ActivityTypeList VARCHAR(8000) = @ActivityTypeList,
	@_EntityList VARCHAR(8000) = @EntityList,
	@_MajorAccountCategoryList VARCHAR(8000) = @MajorAccountCategoryList,
	@_MinorAccountCategoryList VARCHAR(8000) = @MinorAccountCategoryList,
	@_AllocationRegionList VARCHAR(8000) = @AllocationRegionList,
	@_AllocationSubRegionList VARCHAR(8000) = @AllocationSubRegionList,
	@_OriginatingRegionList VARCHAR(8000) = @OriginatingRegionList,
	@_OriginatingSubRegionList VARCHAR(8000) = @OriginatingSubRegionList
	
IF LEN(@_FunctionalDepartmentList) > 7998 OR
	LEN(@_ActivityTypeList) > 7998 OR
	LEN(@_EntityList) > 7998 OR
	LEN(@_MajorAccountCategoryList) > 7998 OR
	LEN(@_MinorAccountCategoryList) > 7998 OR
	LEN(@_AllocationRegionList) > 7998 OR
	LEN(@_AllocationSubRegionList) > 7998 OR
	LEN(@_OriginatingRegionList) > 7998 OR
	LEN(@_OriginatingSubRegionList) > 7998
BEGIN
	RAISERROR('Filter List parameter is to big',19,1)
END
	
/*
DECLARE @ReportExpensePeriod		AS INT,
        @FunctionalDepartmentList  AS VARCHAR(8000),
        @DestinationCurrency		AS VARCHAR(3),
        @TranslationTypeName				VARCHAR(50)
				
		
SET @ReportExpensePeriod = 201011
SET @FunctionalDepartmentList = 'Information Technologies'
SET @DestinationCurrency = 'USD'
SET @TranslationTypeName = 'Global'

EXEC stp_R_BudgetOriginatorOwnerFunctionalDepartment
	@ReportExpensePeriod = 201011,
	@TranslationTypeName = 'Global',
	@DestinationCurrency = 'USD',

	@FunctionalDepartmentList = 'Information Technologies',
	@AllocationRegionList = 'CHICAGO',
	@EntityList = 'Aldgate|Centrium (St Cathrine House/Pegasus)'

*/

--------------------------------------------------------------------------
/*	COMMON Block to setup the Report Filter Variable defaults		*/
--------------------------------------------------------------------------

IF @ReportExpensePeriod IS NULL
	SET @ReportExpensePeriod = CAST(CAST(YEAR(GETDATE()) AS VARCHAR(4)) + REPLACE(STR(MONTH(GETDATE()),2 ),' ','0')AS INT)

IF @DestinationCurrency IS NULL
	SET @DestinationCurrency = 'USD'

IF 	@TranslationTypeName IS NULL
	SET @TranslationTypeName = 'Global'

	DECLARE @CalendarYear AS INT
	SET @CalendarYear = CAST(SUBSTRING(CAST(@ReportExpensePeriod AS VARCHAR(10)), 1, 4) AS INT)				

--------------------------------------------------------------------------
-- let latest reforecast (it will be zero if there is no data for the reforecast)
IF @ReforecastQuaterName IS NULL OR @ReforecastQuaterName NOT IN ('Q0', 'Q1', 'Q2', 'Q3')
	SET @ReforecastQuaterName = (SELECT TOP 1
									ReforecastQuarterName 
								 FROM
									dbo.Reforecast 
								 WHERE
									ReforecastEffectivePeriod <= @ReportExpensePeriod AND 
									ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4)
								 ORDER BY ReforecastEffectivePeriod DESC)
--------------------------------------------------------------------------
-- Compute Reforecast Effective Periods

DECLARE @ReforecastEffectivePeriodQ1 INT
DECLARE @ReforecastEffectivePeriodQ2 INT
DECLARE @ReforecastEffectivePeriodQ3 INT

SET @ReforecastEffectivePeriodQ1 = (SELECT TOP 1
										ReforecastEffectivePeriod 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										ReforecastQuarterName = 'Q1'
									ORDER BY
										ReforecastEffectivePeriod)								

SET @ReforecastEffectivePeriodQ2 = (SELECT TOP 1
										ReforecastEffectivePeriod 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										ReforecastQuarterName = 'Q2'
									ORDER BY
										ReforecastEffectivePeriod)								

SET @ReforecastEffectivePeriodQ3 = (SELECT TOP 1
										ReforecastEffectivePeriod 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										ReforecastQuarterName = 'Q3'
									ORDER BY
										ReforecastEffectivePeriod)

-- Retrieve Reforecast Quarter Name

DECLARE @ReforecastQuarterNameQ1 CHAR(2)
DECLARE @ReforecastQuarterNameQ2 CHAR(2)
DECLARE @ReforecastQuarterNameQ3 CHAR(2)

IF (@ReforecastEffectivePeriodQ1 IS NOT NULL)
BEGIN
	SET @ReforecastQuarterNameQ1 = (SELECT TOP 1
										ReforecastQuarterName 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectivePeriod = @ReforecastEffectivePeriodQ1)
END
ELSE
BEGIN
	PRINT ('@ReforecastEffectivePeriodQ1 is NULL - cannot determine Q1 reforecast quarter name.')
END


IF (@ReforecastEffectivePeriodQ2 IS NOT NULL)
BEGIN
	SET @ReforecastQuarterNameQ2 = (SELECT TOP 1
											ReforecastQuarterName 
										FROM
											dbo.Reforecast 
										WHERE
											ReforecastEffectivePeriod = @ReforecastEffectivePeriodQ2)
END
ELSE
BEGIN
	PRINT ('@ReforecastEffectivePeriodQ2 is NULL - cannot determine Q2 reforecast quarter name.')
END


IF (@ReforecastEffectivePeriodQ3 IS NOT NULL)
BEGIN
	SET @ReforecastQuarterNameQ3 = (SELECT TOP 1
											ReforecastQuarterName 
										FROM
											dbo.Reforecast 
										WHERE
											ReforecastEffectivePeriod = @ReforecastEffectivePeriodQ3)
END
ELSE
BEGIN
	PRINT ('@ReforecastEffectivePeriodQ3 is NULL - cannot determine Q3 reforecast quarter name.')
END
	
--------------------------------------------------------------------------
/*	COMMON Block to setup the Report Filter Tables		*/
--------------------------------------------------------------------------
	
CREATE TABLE #EntityFilterTable	(PropertyFundKey Int NOT NULL)
CREATE TABLE #FunctionalDepartmentFilterTable (FunctionalDepartmentKey Int NOT NULL)
CREATE TABLE #ActivityTypeFilterTable (ActivityTypeKey Int NOT NULL)
CREATE TABLE #AllocationRegionFilterTable (AllocationRegionKey Int NOT NULL)
CREATE TABLE #AllocationSubRegionFilterTable (AllocationRegionKey Int NOT NULL)
CREATE TABLE #MajorAccountCategoryFilterTable (GlAccountCategoryKey Int NOT NULL)	
CREATE TABLE #MinorAccountCategoryFilterTable (GlAccountCategoryKey Int NOT NULL)	
CREATE TABLE #OriginatingRegionFilterTable (OriginatingRegionKey Int NOT NULL)
CREATE TABLE #OriginatingSubRegionFilterTable (OriginatingRegionKey Int NOT NULL)	
	
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #EntityFilterTable	(PropertyFundKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #FunctionalDepartmentFilterTable	(FunctionalDepartmentKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #ActivityTypeFilterTable(ActivityTypeKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #AllocationRegionFilterTable	(AllocationRegionKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #AllocationSubRegionFilterTable	(AllocationRegionKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #MajorAccountCategoryFilterTable(GlAccountCategoryKey)	
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #MinorAccountCategoryFilterTable(GlAccountCategoryKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OriginatingRegionFilterTable	(OriginatingRegionKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OriginatingSubRegionFilterTable	(OriginatingRegionKey)
	
IF (@EntityList IS NOT NULL)
	BEGIN
	Insert Into #EntityFilterTable
	Select pf.PropertyFundKey
	From dbo.Split(@_EntityList) t1
		INNER JOIN PropertyFund pf ON pf.PropertyFundName = t1.item
	END
	
IF (@FunctionalDepartmentList IS NOT NULL)
	BEGIN
	Insert Into #FunctionalDepartmentFilterTable
	Select fd.FunctionalDepartmentKey 
	From dbo.Split(@_FunctionalDepartmentList) t1
		INNER JOIN FunctionalDepartment fd ON fd.FunctionalDepartmentName = t1.item
	END

IF 	(@ActivityTypeList IS NOT NULL)
	BEGIN
    INSERT INTO #ActivityTypeFilterTable
    SELECT at.ActivityTypeKey 
    FROM dbo.Split(@_ActivityTypeList) t1
		INNER JOIN ActivityType at ON at.ActivityTypeName = t1.item
	END
	
IF (@AllocationRegionList IS NOT NULL)
	BEGIN
	Insert Into #AllocationRegionFilterTable
	Select ar.AllocationRegionKey 
	From dbo.Split(@_AllocationRegionList) t1
		INNER JOIN AllocationRegion ar ON ar.RegionName = t1.item
	END

IF (@AllocationSubRegionList IS NOT NULL)
	BEGIN
	Insert Into #AllocationSubRegionFilterTable
	Select ar.AllocationRegionKey
	From dbo.Split(@_AllocationSubRegionList) t1
		INNER JOIN AllocationRegion ar ON ar.SubRegionName = t1.item
	END

IF (@MajorAccountCategoryList IS NOT NULL)
	BEGIN
	Insert Into #MajorAccountCategoryFilterTable
	Select gl.GlAccountCategoryKey 
	From dbo.Split(@_MajorAccountCategoryList) t1
		INNER JOIN GlAccountCategory gl ON gl.MajorCategoryName = t1.item
	END
	
IF 	(@MinorAccountCategoryList IS NOT NULL)
	BEGIN
    INSERT INTO #MinorAccountCategoryFilterTable
    SELECT gl.GlAccountCategoryKey 
    FROM dbo.Split(@MinorAccountCategoryList) t1
		INNER JOIN GlAccountCategory gl ON gl.MinorCategoryName = t1.item
	END	

IF (@OriginatingRegionList IS NOT NULL)
	BEGIN
	Insert Into #OriginatingRegionFilterTable
	Select orr.OriginatingRegionKey 
	From dbo.Split(@_OriginatingRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.RegionName = t1.item
	END

IF (@OriginatingSubRegionList IS NOT NULL)
	BEGIN
	Insert Into #OriginatingSubRegionFilterTable
	Select orr.OriginatingRegionKey  
	From dbo.Split(@OriginatingSubRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.SubRegionName = t1.item
	END		
--------------------------------------------------------------------------
/*	COMMON END															*/
--------------------------------------------------------------------------
	
IF 	OBJECT_ID('tempdb..#BudgetOriginatorOwner') IS NOT NULL
    DROP TABLE #BudgetOriginatorOwner

CREATE TABLE #BudgetOriginatorOwner
(	
	ActivityTypeKey			INT,
	AllocationRegionKey		INT,
	OriginatingRegionKey	INT,
    PropertyFundKey			INT,
    FunctionalDepartmentKey INT,    
	GlAccountCategoryKey	INT,
	SourceName				VARCHAR(50),
	EntryDate				VARCHAR(10),
	[User]					NVARCHAR(20),
	[Description]			NVARCHAR(60),
	AdditionalDescription	NVARCHAR(4000),
	PropertyFundCode		VARCHAR(6) DEFAULT(''), --Varchar, for this helps to keep reports size smaller
	OriginatingRegionCode	VARCHAR(15) DEFAULT(''), --Varchar, for this helps to keep reports size smaller
	GlAccountKey			INT NULL,
	CalendarPeriod			Varchar(6) DEFAULT(''),

	--Month to date	
	MtdGrossActual			MONEY,
	MtdGrossBudget			MONEY,
	MtdGrossReforecastQ1	MONEY,
	MtdGrossReforecastQ2	MONEY,
	MtdGrossReforecastQ3	MONEY,
	MtdNetActual			MONEY,
	MtdNetBudget			MONEY,
	MtdNetReforecastQ1		MONEY,
	MtdNetReforecastQ2		MONEY,
	MtdNetReforecastQ3		MONEY,
	
	--Year to date
	YtdGrossActual			MONEY,	
	YtdGrossBudget			MONEY, 
	YtdGrossReforecastQ1	MONEY,
	YtdGrossReforecastQ2	MONEY,
	YtdGrossReforecastQ3	MONEY,
	YtdNetActual			MONEY, 
	YtdNetBudget			MONEY, 
	YtdNetReforecastQ1		MONEY,
	YtdNetReforecastQ2		MONEY,
	YtdNetReforecastQ3		MONEY,
	
	--Annual
	AnnualGrossBudget		MONEY,
	AnnualGrossReforecastQ1	MONEY,
	AnnualGrossReforecastQ2 MONEY,
	AnnualGrossReforecastQ3 MONEY,
	AnnualNetBudget			MONEY,
	AnnualNetReforecastQ1	MONEY,
	AnnualNetReforecastQ2	MONEY,
	AnnualNetReforecastQ3	MONEY,

	--Annual estimated
	AnnualEstGrossBudget	 MONEY,
	AnnualEstGrossReforecastQ1 MONEY,
	AnnualEstGrossReforecastQ2 MONEY,
	AnnualEstGrossReforecastQ3 MONEY,
	AnnualEstNetBudget		 MONEY,
	AnnualEstNetReforecastQ1 MONEY,
	AnnualEstNetReforecastQ2 MONEY,
	AnnualEstNetReforecastQ3 MONEY
)

DECLARE @cmdString Varchar(MAX)

--Get actual information
SET @cmdString = (Select '

INSERT INTO #BudgetOriginatorOwner
SELECT 	
	pa.ActivityTypeKey,
	pa.AllocationRegionKey,
	pa.OriginatingRegionKey,
    pa.PropertyFundKey,
    pa.FunctionalDepartmentKey,    
	gac.GlAccountCategoryKey,
    s.SourceName,
    CONVERT(varchar(10),ISNULL(pa.EntryDate,''''), 101) as EntryDate,
    ISNULL(pa.[User], '''') [User],
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.Description ELSE '''' END as Description,
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.AdditionalDescription ELSE '''' END as AdditionalDescription,
    ISNULL(pa.PropertyFundCode, '''') PropertyFundCode,
    ISNULL(pa.OriginatingRegionCode, '''') OriginatingRegionCode,
    pa.GLAccountKey,
    c.CalendarPeriod,
    
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as MtdGrossActual,
	NULL as MtdGrossBudget,
	
	' + /*-- ReforecastEffectivePeriod --------------------------*/ + '
	
	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + -- < because we are selecting from ProfitabilityActual
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdGrossReforecastQ1,

	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + -- < because we are selecting from ProfitabilityActual
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdGrossReforecastQ2,

	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + -- < because we are selecting from ProfitabilityActual
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdGrossReforecastQ3,
	
	' + /*-- ReforecastEffectivePeriod End ----------------------*/ + '
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as MtdNetActual,
	NULL as MtdNetBudget,
	
	' + /*-- MtdNetReforecast --------------------------*/ + '
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdNetReforecastQ1,

	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdNetReforecastQ2,
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdNetReforecastQ3,	
	
	' + /*-- MtdNetReforecast End --------------------------*/ + '
	
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as YtdGrossActual,
	NULL as YtdGrossBudget,
	
	' + /*-- YTDGrossReforecast --------------------------*/ + '
	
	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdGrossReforecastQ1,

	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdGrossReforecastQ2,

	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdGrossReforecastQ3,

	' + /*-- YTDGrossReforecast End ----------------------*/ + '
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as YtdNetActual,
	NULL as YtdNetBudget,
	')
	
	DECLARE @cmdString2 Varchar(MAX)
	SET @cmdString2 = (Select '
	
	
	' + /*-- YtdNetReforecast ----------------------*/ + '
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdNetReforecastQ1,

	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdNetReforecastQ2,

	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdNetReforecastQ3,

	' +
	
	/*-- YtdNetReforecast End ------------------*/ + '
	

	NULL as AnnualGrossBudget,
	
	' + /*-- AnnualGrossReforecast ------------------*/ + '
	
	SUM(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ1,
	
	SUM(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ2,

	SUM(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ3,

	' + /*-- AnnualGrossReforecast End ------------------*/ + '

	')

	DECLARE @cmdString3 Varchar(MAX)
	SET @cmdString3 = (Select '

	NULL as AnnualNetBudget,
	
	' + /*-- AnnualNetReforecast ------------------*/ + '
	
    SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualNetReforecastQ1,
	
    SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualNetReforecastQ2,

    SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualNetReforecastQ3,

	' + /*-- AnnualNetReforecast End ------------------*/ + '
	
	SUM(
        er.Rate *
        CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pa.LocalActual
        ELSE 
			0
        END
	) as AnnualEstGrossBudget,
	
	' + /*-- AnnualEstGrossReforecast ------------------*/ + '
	
	SUM(
            er.Rate *
            CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstGrossReforecastQ1,

	SUM(
            er.Rate *
            CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstGrossReforecastQ2,
	
	SUM(
            er.Rate *
            CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstGrossReforecastQ3,	

	' + /*-- AnnualEstGrossReforecast End ------------------*/ + '

    SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pa.LocalActual
        ELSE 
			0
        END
    ) as AnnualEstNetBudget,
    
    ' + /*-- AnnualEstNetReforecast ------------------*/ + '
    
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstNetReforecastQ1,
	
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstNetReforecastQ2,
	
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstNetReforecastQ3		

	' + /*-- AnnualEstNetReforecast End ------------------*/ + '
	
FROM
	ProfitabilityActual pa

	INNER JOIN Overhead oh ON oh.OverheadKey = pa.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1

	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pa.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pa.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pa.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pa.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pa.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pa.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pa.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pa.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')
	
    INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pa.LocalCurrencyKey AND er.CalendarKey = pa.CalendarKey
    INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON  c.CalendarKey = pa.CalendarKey
    INNER JOIN Source s ON s.SourceKey = pa.SourceKey
    INNER JOIN Reimbursable r ON  r.ReimbursableKey = pa.ReimbursableKey '
    		
    + CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pa.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pa.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pa.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pa.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pa.PropertyFundKey' ELSE '' END + '

WHERE  1 = 1
    AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
 	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
 	AND gac.MinorCategoryName <> ''Bonus''
 	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select t1.FunctionalDepartmentKey From #FunctionalDepartmentFilterTable t1)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select t1.ActivityTypeKey From #ActivityTypeFilterTable t1)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select t1.PropertyFundKey From #EntityFilterTable t1)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select t1.AllocationRegionKey From #AllocationRegionFilterTable t1)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select t1.AllocationRegionKey From #AllocationSubRegionFilterTable t1)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select t1.GlAccountCategoryKey From #MajorAccountCategoryFilterTable t1)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select t1.GlAccountCategoryKey From #MinorAccountCategoryFilterTable t1)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OriginatingRegionFilterTable t1)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OriginatingSubRegionFilterTable t1)' END +
'
GROUP BY
	pa.ActivityTypeKey,
	pa.AllocationRegionKey,
	pa.OriginatingRegionKey,
    pa.PropertyFundKey,
    pa.FunctionalDepartmentKey,
	gac.GlAccountCategoryKey,
	s.SourceName,
	CONVERT(varchar(10),ISNULL(pa.EntryDate,''''), 101),
	ISNULL(pa.[User], '''') ,
	CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.Description ELSE '''' END,
	CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.AdditionalDescription ELSE '''' END,
	ISNULL(pa.PropertyFundCode, ''''),
    ISNULL(pa.OriginatingRegionCode, ''''),
	pa.GlAccountKey,
	c.CalendarPeriod
	
	')

IF (LEN(@cmdString) > 7995 OR LEN(@cmdString2) > 7995 OR LEN(@cmdString3) > 7995)
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LTRIM(RTRIM(LEN(@cmdString)))) + ' + ' + STR(LTRIM(RTRIM(LEN(@cmdString2)))) + ' + ' + STR(LTRIM(RTRIM(LEN(@cmdString3)))))

PRINT (@cmdString)
PRINT (@cmdString2)
PRINT (@cmdString3)

EXEC (@cmdString + @cmdString2 + @cmdString3)

-- Get budget information
SET @cmdString = (Select '
INSERT INTO #BudgetOriginatorOwner
SELECT 
	pb.ActivityTypeKey,
	pb.AllocationRegionKey,
	pb.OriginatingRegionKey,
    pb.PropertyFundKey,
    pb.FunctionalDepartmentKey,
	gac.GlAccountCategoryKey,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pb.GlAccountKey END,
    '''' as CalendarPeriod,
    
    NULL as MtdGrossActual,
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as MtdGrossBudget,
	
	NULL as MtdGrossReforecastQ1,
	NULL as MtdGrossReforecastQ2,
	NULL as MtdGrossReforecastQ3,
	
	NULL as MtdNetActual,
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pb.LocalBudget
        ELSE 
			0
        END
    ) as MtdNetBudget,
    
	NULL as MtdNetReforecastQ1,
	NULL as MtdNetReforecastQ2,
	NULL as MtdNetReforecastQ3,
	
	NULL as YtdGrossActual,	
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as YtdGrossBudget,
	
	NULL as YtdGrossReforecastQ1,
	NULL as YtdGrossReforecastQ2,
	NULL as YtdGrossReforecastQ3,
	
	NULL as YtdNetActual, 
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pb.LocalBudget
        ELSE 
			0
        END
    ) as YtdNetBudget,
    
	NULL as YtdNetReforecastQ1,
	NULL as YtdNetReforecastQ2,
	NULL as YtdNetReforecastQ3,
	
	SUM(er.Rate * pb.LocalBudget) as AnnualGrossBudget,
	
	NULL as AnnualGrossReforecastQ1,
	NULL as AnnualGrossReforecastQ2,
	NULL as AnnualGrossReforecastQ3,

	SUM(er.Rate * r.MultiplicationFactor * pb.LocalBudget) as AnnualNetBudget,
	
	NULL as AnnualNetReforecastQ1,
	NULL as AnnualNetReforecastQ2,
	NULL as AnnualNetReforecastQ3,

	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as AnnualEstGrossBudget,
	
	NULL as AnnualEstGrossReforecastQ1,
	NULL as AnnualEstGrossReforecastQ2,
	NULL as AnnualEstGrossReforecastQ3,

	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pb.LocalBudget
        ELSE 
			0
        END
    ) as AnnualEstNetBudget,
    
	NULL as AnnualEstNetReforecastQ1,
	NULL as AnnualEstNetReforecastQ2,
	NULL as AnnualEstNetReforecastQ3
	
FROM
    ProfitabilityBudget pb

	INNER JOIN Overhead oh ON oh.OverheadKey = pb.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
    	
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pb.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pb.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pb.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pb.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pb.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pb.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pb.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pb.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')

    INNER JOIN ExchangeRate er ON er.SourceCurrencyKey = pb.LocalCurrencyKey AND er.CalendarKey = pb.CalendarKey 
	INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey    
	INNER JOIN Calendar c ON  c.CalendarKey = pb.CalendarKey
	INNER JOIN Source s ON s.SourceKey = pb.SourceKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pb.ReimbursableKey '
    
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pb.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pb.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pb.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pb.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pb.PropertyFundKey' ELSE '' END + '
		
WHERE  1 = 1 
    AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Bonus''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'
Group By
	pb.ActivityTypeKey,
	pb.AllocationRegionKey,
	pb.OriginatingRegionKey,
    pb.PropertyFundKey,
    pb.FunctionalDepartmentKey,
	gac.GlAccountCategoryKey,
	s.SourceName,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pb.GlAccountKey END
    
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)

-- Get reforecast information -------------------------------------------------------------------------------------------------

-- Q1
SET @cmdString = (Select '
INSERT INTO #BudgetOriginatorOwner
SELECT 
	pr.ActivityTypeKey,
	pr.AllocationRegionKey,
	pr.OriginatingRegionKey,
    pr.PropertyFundKey,
    pr.FunctionalDepartmentKey,
	gac.GlAccountCategoryKey,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END,
    '''' as CalendarPeriod,
    
	NULL as MtdGrossActual,
	NULL as MtdGrossBudget,
	
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecastQ1,
	NULL as MtdGrossReforecastQ2,
	NULL as MtdGrossReforecastQ3,
	
	NULL as MtdNetActual,
	NULL as MtdNetBudget,
	
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as MtdNetReforecastQ1,
	NULL as MtdNetReforecastQ2,
	NULL as MtdNetReforecastQ3,
	
	NULL as YtdGrossActual,	
	NULL as YtdGrossBudget,
	
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecastQ1,
	NULL as YtdGrossReforecastQ2,
	NULL as YtdGrossReforecastQ3,
	
	NULL as YtdNetActual, 
	NULL as YtdNetBudget,
	
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as YtdNetReforecastQ1,
    NULL as YtdNetReforecastQ2,
    NULL as YtdNetReforecastQ3,
    
    NULL as AnnualGrossBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    'SUM(er.Rate * pr.LocalReforecast) as AnnualGrossReforecastQ1,
     NULL as AnnualGrossReforecastQ2,
     NULL as AnnualGrossReforecastQ3,

	NULL as AnnualNetBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    'SUM (er.Rate * r.MultiplicationFactor * pr.LocalReforecast)as AnnualNetReforecastQ1,
    NULL as AnnualNetReforecastQ2,
    NULL as AnnualNetReforecastQ3,

	NULL as AnnualEstGrossBudget,
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstGrossReforecastQ1,
    NULL as AnnualEstGrossReforecastQ2,
    NULL as AnnualEstGrossReforecastQ3,

	NULL as AnnualEstNetBudget,
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstNetReforecastQ1,
    NULL as AnnualEstNetReforecastQ2,
    NULL as AnnualEstNetReforecastQ3
FROM
    ProfitabilityReforecast pr

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
    	
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')

    INNER JOIN ExchangeRate er ON er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey 
	INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey    
	INNER JOIN Calendar c ON  c.CalendarKey = pr.CalendarKey
	INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
	INNER JOIN Source s ON s.SourceKey = pr.SourceKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pr.ReimbursableKey '
    
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pr.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey' ELSE '' END + '
		
WHERE  1 = 1 
	AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ1,6,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Bonus''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'
Group By
	pr.ActivityTypeKey,
	pr.AllocationRegionKey,
	pr.OriginatingRegionKey,
    pr.PropertyFundKey,
    pr.FunctionalDepartmentKey,
	gac.GlAccountCategoryKey,
	s.SourceName,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END
    
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)


-- Q2 -------------------------------------------------------------------------------------------------
SET @cmdString = (Select '
INSERT INTO #BudgetOriginatorOwner
SELECT 
	pr.ActivityTypeKey,
	pr.AllocationRegionKey,
	pr.OriginatingRegionKey,
    pr.PropertyFundKey,
    pr.FunctionalDepartmentKey,
	gac.GlAccountCategoryKey,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END,
    '''' as CalendarPeriod,
    
	NULL as MtdGrossActual,
	NULL as MtdGrossBudget,
	
	NULL as MtdGrossReforecastQ1,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecastQ2,
	NULL as MtdGrossReforecastQ3,
	
	NULL as MtdNetActual,
	NULL as MtdNetBudget,
	
	NULL as MtdNetReforecastQ1,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as MtdNetReforecastQ2,
	NULL as MtdNetReforecastQ3,
	
	NULL as YtdGrossActual,	
	NULL as YtdGrossBudget,
	
	NULL as YtdGrossReforecastQ1,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecastQ2,
	NULL as YtdGrossReforecastQ3,
	
	NULL as YtdNetActual, 
	NULL as YtdNetBudget,
	
	NULL as YtdNetReforecastQ1,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as YtdNetReforecastQ2,
    NULL as YtdNetReforecastQ3,
    
    NULL as AnnualGrossBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    'NULL as AnnualGrossReforecastQ1,
    SUM(er.Rate * pr.LocalReforecast) as AnnualGrossReforecastQ2,     
     NULL as AnnualGrossReforecastQ3,

	NULL as AnnualNetBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '
    NULL as AnnualNetReforecastQ1,
    SUM (er.Rate * r.MultiplicationFactor * pr.LocalReforecast)as AnnualNetReforecastQ2,    
    NULL as AnnualNetReforecastQ3,

	NULL as AnnualEstGrossBudget,
	
	NULL as AnnualEstGrossReforecastQ1,
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstGrossReforecastQ2,
    NULL as AnnualEstGrossReforecastQ3,

	NULL as AnnualEstNetBudget,
	
	NULL as AnnualEstNetReforecastQ1,
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstNetReforecastQ2,
    NULL as AnnualEstNetReforecastQ3
FROM
    ProfitabilityReforecast pr

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
    	
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')

    INNER JOIN ExchangeRate er ON er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey 
	INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey    
	INNER JOIN Calendar c ON  c.CalendarKey = pr.CalendarKey
	INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
	INNER JOIN Source s ON s.SourceKey = pr.SourceKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pr.ReimbursableKey '
    
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pr.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey' ELSE '' END + '
		
WHERE  1 = 1 
	AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ2,6,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Bonus''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'
GROUP BY
	pr.ActivityTypeKey,
	pr.AllocationRegionKey,
	pr.OriginatingRegionKey,
    pr.PropertyFundKey,
    pr.FunctionalDepartmentKey,
	gac.GlAccountCategoryKey,
	s.SourceName,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END
    
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)


-- Q3 -------------------------------------------------------------------------------------------------
SET @cmdString = (Select '
INSERT INTO #BudgetOriginatorOwner
SELECT 
	pr.ActivityTypeKey,
	pr.AllocationRegionKey,
	pr.OriginatingRegionKey,
    pr.PropertyFundKey,
    pr.FunctionalDepartmentKey,
	gac.GlAccountCategoryKey,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END,
    '''' as CalendarPeriod,
    
	NULL as MtdGrossActual,
	NULL as MtdGrossBudget,
	
	NULL as MtdGrossReforecastQ1,
	NULL as MtdGrossReforecastQ2,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecastQ3,
	
	NULL as MtdNetActual,
	NULL as MtdNetBudget,
	
	NULL as MtdNetReforecastQ1,
	NULL as MtdNetReforecastQ2,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as MtdNetReforecastQ3,
	
	NULL as YtdGrossActual,	
	NULL as YtdGrossBudget,
	
	NULL as YtdGrossReforecastQ1,
	NULL as YtdGrossReforecastQ2,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecastQ3,
	
	NULL as YtdNetActual, 
	NULL as YtdNetBudget,
	
	NULL as YtdNetReforecastQ1,
	NULL as YtdNetReforecastQ2,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as YtdNetReforecastQ3,    
    
    NULL as AnnualGrossBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    'NULL as AnnualGrossReforecastQ1,
    NULL as AnnualGrossReforecastQ2,
    SUM(er.Rate * pr.LocalReforecast) as AnnualGrossReforecastQ3,

	NULL as AnnualNetBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '
    NULL as AnnualNetReforecastQ1,
    NULL as AnnualNetReforecastQ2,
    SUM (er.Rate * r.MultiplicationFactor * pr.LocalReforecast)as AnnualNetReforecastQ3,

	NULL as AnnualEstGrossBudget,
	
	NULL as AnnualEstGrossReforecastQ1,
	NULL as AnnualEstGrossReforecastQ2,
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstGrossReforecastQ3,

	NULL as AnnualEstNetBudget,
	
	NULL as AnnualEstNetReforecastQ1,
	NULL as AnnualEstNetReforecastQ2,
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstNetReforecastQ3
FROM
    ProfitabilityReforecast pr

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
    	
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')

    INNER JOIN ExchangeRate er ON er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey 
	INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey    
	INNER JOIN Calendar c ON  c.CalendarKey = pr.CalendarKey
	INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
	INNER JOIN Source s ON s.SourceKey = pr.SourceKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pr.ReimbursableKey '
    
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pr.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey' ELSE '' END + '
		
WHERE  1 = 1 
	AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ3,6,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Bonus''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'
GROUP BY
	pr.ActivityTypeKey,
	pr.AllocationRegionKey,
	pr.OriginatingRegionKey,
    pr.PropertyFundKey,
    pr.FunctionalDepartmentKey,
	gac.GlAccountCategoryKey,
	s.SourceName,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END
    
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)

--Functional Department Mode
SELECT 
	aty.ActivityTypeName,
	aty.ActivityTypeName AS ActivityTypeFilterName,
	gac.AccountSubTypeName AS ExpenseType,
	ar.RegionName AS AllocationRegionName,
    ar.SubRegionName AS AllocationSubRegionName,
    ar.SubRegionName AS AllocationSubRegionFilterName,
    orr.RegionName AS OriginatingRegionName,
    orr.SubRegionName AS OriginatingSubRegionName,
    orr.SubRegionName AS OriginatingSubRegionFilterName,
	gac.MajorCategoryName AS MajorExpenseCategoryName,
	gac.MinorCategoryName AS MinorExpenseCategoryName,
	pf.PropertyFundType AS EntityType,
	pf.PropertyFundName AS EntityName,
	fd.FunctionalDepartmentName as FunctionalDepartmentName,
    res.CalendarPeriod AS ActualsExpensePeriod,
    res.EntryDate,
    res.[User],
    res.[Description],
    res.AdditionalDescription,
	res.SourceName AS SourceName,
	res.PropertyFundCode,
    res.OriginatingRegionCode,
    ISNULL(ga.Code, '') GlAccountCode,
    ISNULL(ga.Name, '') GlAccountName,
    
	--Month to date    
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(MtdGrossActual,0) ELSE ISNULL(MtdNetActual,0) END) AS MtdActual,
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(MtdGrossBudget,0) ELSE ISNULL(MtdNetBudget,0) END) AS MtdOriginalBudget,
	
	--
	
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ1
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ1
		END,0) 
	END) 
	AS MtdReforecastQ1,

	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ2
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ2
		END,0) 
	END) 
	AS MtdReforecastQ2,
	
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ3
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ3
		END,0) 
	END) 
	AS MtdReforecastQ3,	

	--
	
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ1
		END, 0) - ISNULL(MtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ1 
		END, 0) - ISNULL(MtdNetActual, 0) 
	END) 
	AS MtdVarianceQ1,
	
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ2
		END, 0) - ISNULL(MtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ2
		END, 0) - ISNULL(MtdNetActual, 0) 
	END) 
	AS MtdVarianceQ2,
	
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ3
		END, 0) - ISNULL(MtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ3
		END, 0) - ISNULL(MtdNetActual, 0) 
	END) 
	AS MtdVarianceQ3,		
	
	--Year to date
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(YtdGrossActual,0) ELSE ISNULL(YtdNetActual,0) END) AS YtdActual,	
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(YtdGrossBudget,0) ELSE ISNULL(YtdNetBudget,0) END) AS YtdOriginalBudget,
	
	--
	
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ1
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ1
		END,0) 
	END) 
	AS YtdReforecastQ1,

	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ2 
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ2 
		END,0) 
	END) 
	AS YtdReforecastQ2,
	
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ3 
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ3 
		END,0) 
	END) 
	AS YtdReforecastQ3,	
	
	--
	
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ1
		END, 0) - ISNULL(YtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ1
		END, 0) - ISNULL(YtdNetActual, 0) 
	END) 
	AS YtdVarianceQ1,
	
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ2 
		END, 0) - ISNULL(YtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ2 
		END, 0) - ISNULL(YtdNetActual, 0) 
	END) 
	AS YtdVarianceQ2,
	
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ3 
		END, 0) - ISNULL(YtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ3 
		END, 0) - ISNULL(YtdNetActual, 0) 
	END) 
	AS YtdVarianceQ3,		
	
	--Annual
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(AnnualGrossBudget,0) ELSE ISNULL(AnnualNetBudget,0) END) AS AnnualOriginalBudget,

	--
	
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualGrossBudget 
		ELSE 
			AnnualGrossReforecastQ1
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualNetBudget 
		ELSE 
			AnnualNetReforecastQ1
		END,0) 
	END) 
	AS AnnualReforecastQ1,
	
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualGrossBudget 
		ELSE 
			AnnualGrossReforecastQ2
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualNetBudget 
		ELSE 
			AnnualNetReforecastQ2
		END,0) 
	END) 
	AS AnnualReforecastQ2,
	
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualGrossBudget 
		ELSE 
			AnnualGrossReforecastQ3
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualNetBudget 
		ELSE 
			AnnualNetReforecastQ3
		END,0) 
	END) 
	AS AnnualReforecastQ3	
	
	--

INTO
	#Output
FROM
	#BudgetOriginatorOwner res
		INNER JOIN AllocationRegion ar ON ar.AllocationRegionKey = res.AllocationRegionKey
		INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = res.OriginatingRegionKey
		INNER JOIN PropertyFund pf ON pf.PropertyFundKey = res.PropertyFundKey
		INNER JOIN FunctionalDepartment fd ON fd.FunctionalDepartmentKey = res.FunctionalDepartmentKey
		INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = res.GlAccountCategoryKey
		INNER JOIN ActivityType aty ON aty.ActivityTypeKey = res.ActivityTypeKey
		LEFT OUTER JOIN GlAccount ga ON ga.GlAccountKey = res.GlAccountKey 
GROUP BY
	aty.ActivityTypeName,
	gac.AccountSubTypeName,
	ar.RegionName,
    ar.SubRegionName, 
    orr.RegionName,
    orr.SubRegionName,
	gac.MajorCategoryName,
	gac.MinorCategoryName,
	pf.PropertyFundType,
	pf.PropertyFundName,
	fd.FunctionalDepartmentName,
	res.CalendarPeriod,
	res.EntryDate,
    res.[User],
    res.[Description],
    res.AdditionalDescription,
	res.SourceName,
	res.PropertyFundCode,
    res.OriginatingRegionCode,
    ISNULL(ga.Code, ''),
    ISNULL(ga.Name, '')

--Output
SELECT
	ActivityTypeName,
	ActivityTypeFilterName,
	ExpenseType,
	AllocationRegionName,
    AllocationSubRegionName,
    AllocationSubRegionFilterName,
    OriginatingRegionName,
    OriginatingSubRegionName,
    OriginatingSubRegionFilterName,
	MajorExpenseCategoryName,
	MinorExpenseCategoryName,
	EntityType,
	EntityName,
	FunctionalDepartmentName,
	ActualsExpensePeriod,
    EntryDate,
    [User],
    [Description],
    AdditionalDescription,
	SourceName,
	PropertyFundCode,
    OriginatingRegionCode,    
    GlAccountCode,
    GlAccountName,
	
	--Month to date    
	MtdActual,
	MtdOriginalBudget,
	--MtdReforecastQ1,
	--MtdReforecastQ2,
	MtdReforecastQ3,
	
	--MtdVarianceQ1,
	--MtdVarianceQ2,
	MtdVarianceQ3,
	
	--Year to date
	YtdActual,	
	YtdOriginalBudget,
	
	--YtdReforecastQ1,
	--YtdReforecastQ2,
	YtdReforecastQ3,
	
	--YtdVarianceQ1,
	--YtdVarianceQ2,
	YtdVarianceQ3,
	
	--Annual
	AnnualOriginalBudget,
		
	AnnualReforecastQ1,
	AnnualReforecastQ2,
	AnnualReforecastQ3

FROM
	#Output
WHERE
	--Month to date    
	MtdActual <> 0.00 OR
	MtdOriginalBudget <> 0.00 OR
	
	--MtdReforecastQ1 <> 0.00 OR
	--MtdReforecastQ2 <> 0.00 OR
	MtdReforecastQ3 <> 0.00 OR
	
	--MtdVarianceQ1 <> 0.00 OR
	--MtdVarianceQ2 <> 0.00 OR
	MtdVarianceQ3 <> 0.00 OR
	
	--Year to date
	YtdActual <> 0.00 OR
	YtdOriginalBudget <> 0.00 OR
	
	--YtdReforecastQ1 <> 0.00 OR
	--YtdReforecastQ2 <> 0.00 OR
	YtdReforecastQ3 <> 0.00 OR
		
	--YtdVarianceQ1 <> 0.00 OR
	--YtdVarianceQ2 <> 0.00 OR
	YtdVarianceQ3 <> 0.00 OR
	
	--Annual
	AnnualOriginalBudget <> 0.00 OR
	
	AnnualReforecastQ1 <> 0.00 OR
	AnnualReforecastQ2 <> 0.00 OR
	AnnualReforecastQ3 <> 0.00

IF 	OBJECT_ID('tempdb..#BudgetOriginatorOwner') IS NOT NULL
    DROP TABLE #BudgetOriginatorOwner

IF 	OBJECT_ID('tempdb..#Output') IS NOT NULL
    DROP TABLE #Output

IF 	OBJECT_ID('tempdb..#ReforecastsEffectivePeriods') IS NOT NULL
	DROP TABLE #ReforecastsEffectivePeriods

IF 	OBJECT_ID('tempdb..#EntityFilterTable') IS NOT NULL
	DROP TABLE #EntityFilterTable
	
IF 	OBJECT_ID('tempdb..#FunctionalDepartmentFilterTable') IS NOT NULL	
	DROP TABLE #FunctionalDepartmentFilterTable
	
IF 	OBJECT_ID('tempdb..#ActivityTypeFilterTable') IS NOT NULL	
	DROP TABLE #ActivityTypeFilterTable

IF 	OBJECT_ID('tempdb..#AllocationRegionFilterTable') IS NOT NULL	
	DROP TABLE #AllocationRegionFilterTable
	
IF 	OBJECT_ID('tempdb..#AllocationSubRegionFilterTable') IS NOT NULL	
	DROP TABLE #AllocationSubRegionFilterTable
	
IF 	OBJECT_ID('tempdb..#MajorAccountCategoryFilterTable') IS NOT NULL	
	DROP TABLE #MajorAccountCategoryFilterTable
	
IF 	OBJECT_ID('tempdb..#MinorAccountCategoryFilterTable') IS NOT NULL	
	DROP TABLE #MinorAccountCategoryFilterTable
	
IF 	OBJECT_ID('tempdb..#OriginatingRegionFilterTable') IS NOT NULL	
	DROP TABLE #OriginatingRegionFilterTable
	
IF 	OBJECT_ID('tempdb..#OriginatingSubRegionFilterTable') IS NOT NULL	
	DROP TABLE #OriginatingSubRegionFilterTable


GO

/****** Object:  StoredProcedure [dbo].[stp_R_BudgetOwner]    Script Date: 12/08/2010 12:01:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[stp_R_BudgetOwner]
	@ReportExpensePeriod INT = NULL,
	@ReforecastQuaterName VARCHAR(10) = NULL, --'Q1' or 'Q2' or 'Q3'
	@DestinationCurrency VARCHAR(3) = NULL,
	@TranslationTypeName VARCHAR(50) = 'Global',
	@IsGross bit = 1,
	@FunctionalDepartmentList TEXT = NULL,
	@ActivityTypeList TEXT = NULL,
	@EntityList TEXT = NULL,
	@MajorAccountCategoryList TEXT = NULL,
	@MinorAccountCategoryList TEXT = NULL,
	@AllocationRegionList TEXT = NULL,
	@AllocationSubRegionList TEXT = NULL,
	@OriginatingRegionList TEXT = NULL,
	@OriginatingSubRegionList TEXT = NULL,
	@OverheadCode Varchar(10)='ALLOC'
AS

/*
DECLARE @ReportExpensePeriod		AS INT,
        @DestinationCurrency		AS VARCHAR(3),
        @TranslationTypeName				VARCHAR(50)
				
SET @ReportExpensePeriod = 201011
SET @DestinationCurrency = 'USD'
SET @EntityList = 'Aldgate|Centrium (St Cathrine House/Pegasus)'
SET @TranslationTypeName = 'Global'

EXEC stp_R_BudgetOriginatorOwnerEntity
	@ReportExpensePeriod = 201011,
	@TranslationTypeName = 'Global',
	@DestinationCurrency = 'USD',

	@FunctionalDepartmentList = 'Information Technologies',
	@AllocationRegionList = 'CHICAGO',
	@EntityList = 'Aldgate|Centrium (St Cathrine House/Pegasus)'
*/
DECLARE

	@_ReportExpensePeriod INT = @ReportExpensePeriod,
	@_ReforecastQuaterName VARCHAR(10) = @ReforecastQuaterName,
	@_DestinationCurrency VARCHAR(3) = @DestinationCurrency,
	@_TranslationTypeName VARCHAR(50) = @TranslationTypeName,
	@_IsGross bit = @IsGross,
	@_FunctionalDepartmentList VARCHAR(8000) = @FunctionalDepartmentList,
	@_ActivityTypeList VARCHAR(8000) = @ActivityTypeList,
	@_EntityList VARCHAR(8000) = @EntityList,
	@_MajorAccountCategoryList VARCHAR(8000) = @MajorAccountCategoryList,
	@_MinorAccountCategoryList VARCHAR(8000) = @MinorAccountCategoryList,
	@_AllocationRegionList VARCHAR(8000) = @AllocationRegionList,
	@_AllocationSubRegionList VARCHAR(8000) = @AllocationSubRegionList,
	@_OriginatingRegionList VARCHAR(8000) = @OriginatingRegionList,
	@_OriginatingSubRegionList VARCHAR(8000) = @OriginatingSubRegionList

IF LEN(@_FunctionalDepartmentList) > 7998 OR
	LEN(@_ActivityTypeList) > 7998 OR
	LEN(@_EntityList) > 7998 OR
	LEN(@_MajorAccountCategoryList) > 7998 OR
	LEN(@_MinorAccountCategoryList) > 7998 OR
	LEN(@_AllocationRegionList) > 7998 OR
	LEN(@_AllocationSubRegionList) > 7998 OR
	LEN(@_OriginatingRegionList) > 7998 OR
	LEN(@_OriginatingSubRegionList) > 7998
BEGIN
	RAISERROR('Filter List parameter is too big',9,1)
END

--------------------------------------------------------------------------
/*	COMMON Block to setup the Report Filter Variable defaults		*/
--------------------------------------------------------------------------

IF @ReportExpensePeriod IS NULL
	SET @ReportExpensePeriod = CAST(CAST(YEAR(GETDATE()) AS VARCHAR(4)) + REPLACE(STR(MONTH(GETDATE()),2 ),' ','0')AS INT)

IF @DestinationCurrency IS NULL
	SET @DestinationCurrency = 'USD'

IF 	@TranslationTypeName IS NULL
	SET @TranslationTypeName = 'Global'

DECLARE @CalendarYear AS INT
SET @CalendarYear = CAST(SUBSTRING(CAST(@ReportExpensePeriod AS VARCHAR(10)), 1, 4) AS INT)

--------------------------------------------------------------------------
IF @ReforecastQuaterName IS NULL OR @ReforecastQuaterName NOT IN ('Q0', 'Q1', 'Q2', 'Q3')
	SET @ReforecastQuaterName = (SELECT TOP 1
									ReforecastQuarterName 
								 FROM
									dbo.Reforecast 
								 WHERE
									ReforecastEffectivePeriod <= @ReportExpensePeriod AND 
									ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4)
								 ORDER BY ReforecastEffectivePeriod DESC)
-- Compute Reforecast Effective Periods

DECLARE @ReforecastEffectivePeriodQ1 INT
DECLARE @ReforecastEffectivePeriodQ2 INT
DECLARE @ReforecastEffectivePeriodQ3 INT

SET @ReforecastEffectivePeriodQ1 = (SELECT TOP 1
										ReforecastEffectivePeriod 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										ReforecastQuarterName = 'Q1'
									ORDER BY
										ReforecastEffectivePeriod)								

SET @ReforecastEffectivePeriodQ2 = (SELECT TOP 1
										ReforecastEffectivePeriod 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										ReforecastQuarterName = 'Q2'
									ORDER BY
										ReforecastEffectivePeriod)								

SET @ReforecastEffectivePeriodQ3 = (SELECT TOP 1
										ReforecastEffectivePeriod 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										ReforecastQuarterName = 'Q3'
									ORDER BY
										ReforecastEffectivePeriod)

-- Retrieve Reforecast Quarter Name

DECLARE @ReforecastQuarterNameQ1 CHAR(2)
DECLARE @ReforecastQuarterNameQ2 CHAR(2)
DECLARE @ReforecastQuarterNameQ3 CHAR(2)

IF (@ReforecastEffectivePeriodQ1 IS NOT NULL)
BEGIN
	SET @ReforecastQuarterNameQ1 = (SELECT TOP 1
										ReforecastQuarterName 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectivePeriod = @ReforecastEffectivePeriodQ1)
END
ELSE
BEGIN
	PRINT ('@ReforecastEffectivePeriodQ1 is NULL - cannot determine Q1 reforecast quarter name.')
END


IF (@ReforecastEffectivePeriodQ2 IS NOT NULL)
BEGIN
	SET @ReforecastQuarterNameQ2 = (SELECT TOP 1
											ReforecastQuarterName 
										FROM
											dbo.Reforecast 
										WHERE
											ReforecastEffectivePeriod = @ReforecastEffectivePeriodQ2)
END
ELSE
BEGIN
	PRINT ('@ReforecastEffectivePeriodQ2 is NULL - cannot determine Q2 reforecast quarter name.')
END


IF (@ReforecastEffectivePeriodQ3 IS NOT NULL)
BEGIN
	SET @ReforecastQuarterNameQ3 = (SELECT TOP 1
											ReforecastQuarterName 
										FROM
											dbo.Reforecast 
										WHERE
											ReforecastEffectivePeriod = @ReforecastEffectivePeriodQ3)
END
ELSE
BEGIN
	PRINT ('@ReforecastEffectivePeriodQ3 is NULL - cannot determine Q3 reforecast quarter name.')
END

--------------------------------------------------------------------------
/*	COMMON Block to setup the Report Filter Tables		*/
--------------------------------------------------------------------------
	
CREATE TABLE #EntityFilterTable	(PropertyFundKey Int NOT NULL)
CREATE TABLE #FunctionalDepartmentFilterTable (FunctionalDepartmentKey Int NOT NULL)
CREATE TABLE #ActivityTypeFilterTable (ActivityTypeKey Int NOT NULL)
CREATE TABLE #AllocationRegionFilterTable (AllocationRegionKey Int NOT NULL)
CREATE TABLE #AllocationSubRegionFilterTable (AllocationRegionKey Int NOT NULL)
CREATE TABLE #MajorAccountCategoryFilterTable (GlAccountCategoryKey Int NOT NULL)	
CREATE TABLE #MinorAccountCategoryFilterTable (GlAccountCategoryKey Int NOT NULL)	
CREATE TABLE #OriginatingRegionFilterTable (OriginatingRegionKey Int NOT NULL)
CREATE TABLE #OriginatingSubRegionFilterTable (OriginatingRegionKey Int NOT NULL)	
	
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #EntityFilterTable	(PropertyFundKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #FunctionalDepartmentFilterTable	(FunctionalDepartmentKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #ActivityTypeFilterTable(ActivityTypeKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #AllocationRegionFilterTable	(AllocationRegionKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #AllocationSubRegionFilterTable	(AllocationRegionKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #MajorAccountCategoryFilterTable(GlAccountCategoryKey)	
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #MinorAccountCategoryFilterTable(GlAccountCategoryKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OriginatingRegionFilterTable	(OriginatingRegionKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OriginatingSubRegionFilterTable	(OriginatingRegionKey)
	
IF (@EntityList IS NOT NULL)
	BEGIN
	Insert Into #EntityFilterTable
	Select pf.PropertyFundKey
	From dbo.Split(@_EntityList) t1
		INNER JOIN PropertyFund pf ON pf.PropertyFundName = t1.item
	
	END
	
IF (@FunctionalDepartmentList IS NOT NULL)
	BEGIN
	Insert Into #FunctionalDepartmentFilterTable
	Select fd.FunctionalDepartmentKey 
	From dbo.Split(@_FunctionalDepartmentList) t1
		INNER JOIN FunctionalDepartment fd ON fd.FunctionalDepartmentName = t1.item
	END

IF 	(@ActivityTypeList IS NOT NULL)
	BEGIN
    INSERT INTO #ActivityTypeFilterTable
    SELECT at.ActivityTypeKey 
    FROM dbo.Split(@_ActivityTypeList) t1
		INNER JOIN ActivityType at ON at.ActivityTypeName = t1.item
	END
	
IF (@AllocationRegionList IS NOT NULL)
	BEGIN
	Insert Into #AllocationRegionFilterTable
	Select ar.AllocationRegionKey 
	From dbo.Split(@_AllocationRegionList) t1
		INNER JOIN AllocationRegion ar ON ar.RegionName = t1.item
	END

IF (@AllocationSubRegionList IS NOT NULL)
	BEGIN
	Insert Into #AllocationSubRegionFilterTable
	Select ar.AllocationRegionKey
	From dbo.Split(@_AllocationSubRegionList) t1
		INNER JOIN AllocationRegion ar ON ar.SubRegionName = t1.item
	END

IF (@MajorAccountCategoryList IS NOT NULL)
	BEGIN
	Insert Into #MajorAccountCategoryFilterTable
	Select gl.GlAccountCategoryKey 
	From dbo.Split(@_MajorAccountCategoryList) t1
		INNER JOIN GlAccountCategory gl ON gl.MajorCategoryName = t1.item
	END
	
IF 	(@MinorAccountCategoryList IS NOT NULL)
	BEGIN
    INSERT INTO #MinorAccountCategoryFilterTable
    SELECT gl.GlAccountCategoryKey 
    FROM dbo.Split(@MinorAccountCategoryList) t1
		INNER JOIN GlAccountCategory gl ON gl.MinorCategoryName = t1.item
	END	

IF (@OriginatingRegionList IS NOT NULL)
	BEGIN
	Insert Into #OriginatingRegionFilterTable
	Select orr.OriginatingRegionKey 
	From dbo.Split(@_OriginatingRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.RegionName = t1.item
	END

IF (@OriginatingSubRegionList IS NOT NULL)
	BEGIN
	Insert Into #OriginatingSubRegionFilterTable
	Select orr.OriginatingRegionKey  
	From dbo.Split(@OriginatingSubRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.SubRegionName = t1.item
	END		
--------------------------------------------------------------------------
/*	COMMON END															*/
--------------------------------------------------------------------------
	

IF 	OBJECT_ID('tempdb..#BudgetOriginatorOwnerEntity') IS NOT NULL
    DROP TABLE #BudgetOriginatorOwnerEntity

CREATE TABLE #BudgetOriginatorOwnerEntity
(
	ActivityTypeKey				Int,	
    GlAccountCategoryKey		Int,
    AllocationRegionKey			Int,
    OriginatingRegionKey		Int,
    FunctionalDepartmentKey		Int,
    PropertyFundKey				INT,
	SourceName					VarChar(50),
	EntryDate					VARCHAR(10),
	[User]						NVARCHAR(20),
	[Description]				NVARCHAR(60),
	AdditionalDescription		NVARCHAR(4000),
	PropertyFundCode			Varchar(6) DEFAULT(''), --Varchar, for this helps to keep reports size smaller
	OriginatingRegionCode		Varchar(15) DEFAULT(''), --Varchar, for this helps to keep reports size smaller
	GlAccountKey				Int NULL,
	CalendarPeriod				Varchar(6) DEFAULT(''),

	--Month to date	
	MtdGrossActual				MONEY,
	MtdGrossBudget				MONEY,
	MtdGrossReforecastQ1		MONEY,
	MtdGrossReforecastQ2		MONEY,
	MtdGrossReforecastQ3		MONEY,
	
	MtdNetActual				MONEY,
	MtdNetBudget				MONEY,
	MtdNetReforecastQ1			MONEY,
	MtdNetReforecastQ2			MONEY,
	MtdNetReforecastQ3			MONEY,
	
	--Year to date
	YtdGrossActual				MONEY,	
	YtdGrossBudget				MONEY, 
	YtdGrossReforecastQ1		MONEY,
	YtdGrossReforecastQ2		MONEY,
	YtdGrossReforecastQ3		MONEY,
	
	YtdNetActual				MONEY, 
	YtdNetBudget				MONEY, 
	YtdNetReforecastQ1			MONEY, 
	YtdNetReforecastQ2			MONEY, 
	YtdNetReforecastQ3			MONEY, 

	--Annual	
	AnnualGrossBudget			MONEY,
	AnnualGrossReforecastQ1		MONEY,
	AnnualGrossReforecastQ2		MONEY,
	AnnualGrossReforecastQ3		MONEY,
	AnnualNetBudget				MONEY,
	AnnualNetReforecastQ1		MONEY,
	AnnualNetReforecastQ2		MONEY,
	AnnualNetReforecastQ3		MONEY,

	--Annual estimated
	AnnualEstGrossBudget		MONEY,
	AnnualEstGrossReforecastQ1	MONEY,
	AnnualEstGrossReforecastQ2	MONEY,
	AnnualEstGrossReforecastQ3	MONEY,
	AnnualEstNetBudget			MONEY,
	AnnualEstNetReforecastQ1	MONEY,
	AnnualEstNetReforecastQ2	MONEY,
	AnnualEstNetReforecastQ3	MONEY
)

DECLARE @cmdString	VARCHAR(MAX)
DECLARE @cmdString2	VARCHAR(MAX)
DECLARE @cmdString3	VARCHAR(MAX)

--Get actual information
SET @cmdString = (Select '

INSERT INTO #BudgetOriginatorOwnerEntity
SELECT 
	pa.ActivityTypeKey,
    gac.GlAccountCategoryKey,
    pa.AllocationRegionKey,
    pa.OriginatingRegionKey,
    pa.FunctionalDepartmentKey,
    pa.PropertyFundKey,
    s.SourceName,
    CONVERT(varchar(10),ISNULL(pa.EntryDate,''''), 101) as EntryDate,
    ISNULL(pa.[User], '''') [User],
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.Description ELSE '''' END as Description,
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.AdditionalDescription ELSE '''' END as AdditionalDescription,
    ISNULL(pa.PropertyFundCode, '''') PropertyFundCode,
    ISNULL(pa.OriginatingRegionCode, '''') OriginatingRegionCode,
    pa.GlAccountKey,
    c.CalendarPeriod,
    
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as MtdGrossActual,
	NULL as MtdGrossBudget,
	
	' + /*-- MtdGrossReforecast --------------------------*/ + '	
	
	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as MtdGrossReforecastQ1,

	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as MtdGrossReforecastQ2,
	
	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as MtdGrossReforecastQ3,	
	
	' + /*-- MtdGrossReforecast End --------------------------*/ + '
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as MtdNetActual,
	NULL as MtdNetBudget,
	
	' + /*-- MtdNetReforecast --------------------------*/ + '
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) +  
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as MtdNetReforecastQ1,

	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) +  
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as MtdNetReforecastQ2,
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) +  
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as MtdNetReforecastQ3,	

	' + /*-- MtdNetReforecast End --------------------------*/ + '
	
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as YtdGrossActual,
	NULL as YtdGrossBudget,
	
	' + /*-- YtdGrossReforecast --------------------------*/ + '
	
	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) +  
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as YtdGrossReforecastQ1,
	
	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) +  
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as YtdGrossReforecastQ2,
	
	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) +  
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as YtdGrossReforecastQ3,		
	
	' + /*-- YtdGrossReforecast End --------------------------*/ + '
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as YtdNetActual,
	NULL as YtdNetBudget,
	
	' + /*-- YtdNetReforecast --------------------------*/ + '
	
	')
	
	SET @cmdString2 = (Select '	
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) +  
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as YtdNetReforecastQ1,

	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) +  
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as YtdNetReforecastQ2,

	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) +  
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as YtdNetReforecastQ3,

	' + /*-- YtdNetReforecast End --------------------------*/ + '
	
	NULL as AnnualGrossBudget,
	
	' + /*-- AnnualGrossReforecast --------------------------*/ + '
	
	SUM(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ1,

	SUM(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ2,

	SUM(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ3,

	' + /*-- AnnualGrossReforecast End --------------------------*/ + '

	NULL as AnnualNetBudget,
	
	' + /*-- AnnualNetReforecast --------------------------*/ + '
	
    SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as AnnualNetReforecastQ1,
	
    SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as AnnualNetReforecastQ2,

    SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as AnnualNetReforecastQ3,	

	' + /*-- AnnualNetReforecast End --------------------------*/ + '
	
	SUM(
        er.Rate *
        CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pa.LocalActual
        ELSE 
			0
        END
	) as AnnualEstGrossBudget,
	
	' + /*-- AnnualEstGrossReforecast --------------------------*/ + '
	
	SUM(
            er.Rate *
            CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as AnnualEstGrossReforecastQ1,

	SUM(
            er.Rate *
            CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as AnnualEstGrossReforecastQ2,

	SUM(
            er.Rate *
            CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as AnnualEstGrossReforecastQ3,

	' + /*-- AnnualEstGrossReforecast End --------------------------*/ + '

	')
	
	SET @cmdString3 = (Select '

    SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pa.LocalActual
        ELSE 
			0
        END
    ) as AnnualEstNetBudget,
    
    ' + /*-- AnnualEstNetReforecast --------------------------*/ + '
    
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as AnnualEstNetReforecastQ1,
	
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as AnnualEstNetReforecastQ2,
	
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as AnnualEstNetReforecastQ3		
	
	' + /*-- AnnualEstNetReforecast End --------------------------*/ + '
	
FROM
	ProfitabilityActual pa

	INNER JOIN Overhead oh ON oh.OverheadKey = pa.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
	
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pa.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pa.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pa.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pa.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pa.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pa.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pa.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pa.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')
    
    INNER JOIN ExchangeRate er ON er.SourceCurrencyKey = pa.LocalCurrencyKey AND er.CalendarKey = pa.CalendarKey
    INNER JOIN Currency dc ON er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON c.CalendarKey = pa.CalendarKey
    INNER JOIN Source s ON s.SourceKey = pa.SourceKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pa.ReimbursableKey '
    
    + CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pa.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pa.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pa.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pa.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pa.PropertyFundKey' ELSE '' END + '

WHERE  1 = 1
    AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select t1.FunctionalDepartmentKey From #FunctionalDepartmentFilterTable t1)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select t1.ActivityTypeKey From #ActivityTypeFilterTable t1)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select t1.PropertyFundKey From #EntityFilterTable t1)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select t1.AllocationRegionKey From #AllocationRegionFilterTable t1)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select t1.AllocationRegionKey From #AllocationSubRegionFilterTable t1)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select t1.GlAccountCategoryKey From #MajorAccountCategoryFilterTable t1)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select t1.GlAccountCategoryKey From #MinorAccountCategoryFilterTable t1)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OriginatingRegionFilterTable t1)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OriginatingSubRegionFilterTable t1)' END +
'
Group by
	pa.ActivityTypeKey,
    gac.GlAccountCategoryKey,
    pa.AllocationRegionKey,
    pa.OriginatingRegionKey,
    pa.FunctionalDepartmentKey,
    pa.PropertyFundKey,
    s.SourceName,
	CONVERT(varchar(10),ISNULL(pa.EntryDate,''''), 101),
	ISNULL(pa.[User], '''') ,
	CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.Description ELSE '''' END,
	CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.AdditionalDescription ELSE '''' END,
	ISNULL(pa.PropertyFundCode, ''''),
    ISNULL(pa.OriginatingRegionCode, ''''),
	pa.GlAccountKey,
	c.CalendarPeriod
')

IF (LEN(@cmdString) > 7995 OR LEN(@cmdString2) > 7995 OR LEN(@cmdString3) > 7995)
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LTRIM(RTRIM(LEN(@cmdString)))) + ' + ' + STR(LTRIM(RTRIM(LEN(@cmdString2)))) + ' + ' + STR(LTRIM(RTRIM(LEN(@cmdString3)))))

PRINT @cmdString
PRINT @cmdString2
PRINT @cmdString3
EXEC (@cmdString + @cmdString2 + @cmdString3)

-- Get budget information
SET @cmdString = (Select '
INSERT INTO #BudgetOriginatorOwnerEntity
SELECT 
	pb.ActivityTypeKey,
    gac.GlAccountCategoryKey,
    pb.AllocationRegionKey,
    pb.OriginatingRegionKey,
    pb.FunctionalDepartmentKey,
    pb.PropertyFundKey,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,    
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pb.GlAccountKey END,
    '''' as CalendarPeriod,
    
    NULL as MtdGrossActual,
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as MtdGrossBudget,
	
	NULL as MtdGrossReforecastQ1,
	NULL as MtdGrossReforecastQ2,
	NULL as MtdGrossReforecastQ3,
	
	NULL as MtdNetActual,
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pb.LocalBudget
        ELSE 
			0
        END
    ) as MtdNetBudget,
    
	NULL as MtdNetReforecastQ1,
	NULL as MtdNetReforecastQ2,
	NULL as MtdNetReforecastQ3,
	
	NULL as YtdGrossActual,	
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as YtdGrossBudget,
	
	NULL as YtdGrossReforecastQ1,
	NULL as YtdGrossReforecastQ2,
	NULL as YtdGrossReforecastQ3,
	
	NULL as YtdNetActual, 
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pb.LocalBudget
        ELSE 
			0
        END
    ) as YtdNetBudget,
    
	NULL as YtdNetReforecastQ1,
	NULL as YtdNetReforecastQ2,
	NULL as YtdNetReforecastQ3,
	
	SUM(er.Rate * pb.LocalBudget) as AnnualGrossBudget,
	
	NULL as AnnualGrossReforecastQ1,
	NULL as AnnualGrossReforecastQ2,
	NULL as AnnualGrossReforecastQ3,

	SUM(er.Rate * r.MultiplicationFactor * pb.LocalBudget) as AnnualNetBudget,
	
	NULL as AnnualNetReforecastQ1,
	NULL as AnnualNetReforecastQ2,
	NULL as AnnualNetReforecastQ3,	

	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as AnnualEstGrossBudget,
	
	NULL as AnnualEstGrossReforecastQ1,
	NULL as AnnualEstGrossReforecastQ2,
	NULL as AnnualEstGrossReforecastQ3,

	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pb.LocalBudget
        ELSE 
			0
        END
    ) as AnnualEstNetBudget,
    
	NULL as AnnualEstNetReforecastQ1,
	NULL as AnnualEstNetReforecastQ2,
	NULL as AnnualEstNetReforecastQ3
FROM
	ProfitabilityBudget pb

	INNER JOIN Overhead oh ON oh.OverheadKey = pb.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
	
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pb.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pb.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pb.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pb.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pb.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pb.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pb.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pb.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')

	INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pb.LocalCurrencyKey AND er.CalendarKey = pb.CalendarKey
    INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON  c.CalendarKey = pb.CalendarKey
    INNER JOIN Source s ON s.SourceKey = pb.SourceKey
    INNER JOIN Reimbursable r ON  r.ReimbursableKey = pb.ReimbursableKey '
        
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pb.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pb.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pb.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pb.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pb.PropertyFundKey' ELSE '' END + '
	
WHERE  1 = 1 
    AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
 	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
 	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'
Group By
	pb.ActivityTypeKey,
    gac.GlAccountCategoryKey,
    pb.AllocationRegionKey,
    pb.OriginatingRegionKey,
    pb.FunctionalDepartmentKey,
    pb.PropertyFundKey,
    s.SourceName,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pb.GlAccountKey END
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)

-- Get reforecast information
SET @cmdString = (Select '
INSERT INTO #BudgetOriginatorOwnerEntity
SELECT
	pr.ActivityTypeKey, 
    gac.GlAccountCategoryKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.FunctionalDepartmentKey,
    pr.PropertyFundKey,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END,
    '''' as CalendarPeriod,
    
	NULL as MtdGrossActual,
	NULL as MtdGrossBudget,
	
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecastQ1,
	NULL as MtdGrossReforecastQ2,
	NULL as MtdGrossReforecastQ3,
	
	NULL as MtdNetActual,
	NULL as MtdNetBudget,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as MtdNetReforecastQ1,
	NULL as MtdNetReforecastQ2,
	NULL as MtdNetReforecastQ3,
	
	NULL as YtdGrossActual,	
	NULL as YtdGrossBudget,
	
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecastQ1, 
	NULL as YtdGrossReforecastQ2,
	NULL as YtdGrossReforecastQ3,
	
	NULL as YtdNetActual, 
	NULL as YtdNetBudget, 
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as YtdNetReforecastQ1,
    NULL as YtdNetReforecastQ2,
    NULL as YtdNetReforecastQ3,
	
	NULL as AnnualGrossBudget,' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    'SUM(er.Rate * pr.LocalReforecast) as AnnualGrossReforecastQ1,
    NULL as AnnualGrossReforecastQ2,
    NULL as AnnualGrossReforecastQ3,

	NULL as AnnualNetBudget,' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    'SUM (er.Rate * r.MultiplicationFactor * pr.LocalReforecast)as AnnualNetReforecastQ1,
    NULL as AnnualNetReforecastQ2,
    NULL as AnnualNetReforecastQ3,

	NULL as AnnualEstGrossBudget,	
	
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstGrossReforecastQ1,
    NULL as AnnualEstGrossReforecastQ2,
    NULL as AnnualEstGrossReforecastQ3,

	NULL as AnnualEstNetBudget,
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstNetReforecastQ1,
    NULL as AnnualEstNetReforecastQ2,
    NULL as AnnualEstNetReforecastQ3

FROM
	ProfitabilityReforecast pr

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
	
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')

	INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
    INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON  c.CalendarKey = pr.CalendarKey
    INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
    INNER JOIN Source s ON s.SourceKey = pr.SourceKey
    INNER JOIN Reimbursable r ON  r.ReimbursableKey = pr.ReimbursableKey '
        
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pr.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey' ELSE '' END + '
	
WHERE  1 = 1 
	AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ1,10,0) + '
 	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
 	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'
GROUP BY
	pr.ActivityTypeKey,
    gac.GlAccountCategoryKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.FunctionalDepartmentKey,
    pr.PropertyFundKey,
    s.SourceName,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)

-- Q2 -----------------------------------------------------------------------------------------------------
SET @cmdString = (Select '
INSERT INTO #BudgetOriginatorOwnerEntity
SELECT
	pr.ActivityTypeKey, 
    gac.GlAccountCategoryKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.FunctionalDepartmentKey,
    pr.PropertyFundKey,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END,
    '''' as CalendarPeriod,
    
	NULL as MtdGrossActual,
	NULL as MtdGrossBudget,
	
	NULL as MtdGrossReforecastQ1,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecastQ2,
	NULL as MtdGrossReforecastQ3,
	
	NULL as MtdNetActual,
	NULL as MtdNetBudget,
	
	NULL as MtdNetReforecastQ1,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as MtdNetReforecastQ2,
	NULL as MtdNetReforecastQ3,
	
	NULL as YtdGrossActual,	
	NULL as YtdGrossBudget,
	
	NULL as YtdGrossReforecastQ1,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecastQ2, 
	NULL as YtdGrossReforecastQ3,
	
	NULL as YtdNetActual, 
	NULL as YtdNetBudget,
	
	NULL as YtdNetReforecastQ1,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as YtdNetReforecastQ2,
    NULL as YtdNetReforecastQ3,
	
	NULL as AnnualGrossBudget,' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    'NULL as AnnualGrossReforecastQ1,
    SUM(er.Rate * pr.LocalReforecast) as AnnualGrossReforecastQ2,    
    NULL as AnnualGrossReforecastQ3,

	NULL as AnnualNetBudget,' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    'NULL as AnnualNetReforecastQ1,
    SUM (er.Rate * r.MultiplicationFactor * pr.LocalReforecast)as AnnualNetReforecastQ2,    
    NULL as AnnualNetReforecastQ3,

	NULL as AnnualEstGrossBudget,	
	
	NULL as AnnualEstGrossReforecastQ1,
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstGrossReforecastQ2,
    NULL as AnnualEstGrossReforecastQ3,

	NULL as AnnualEstNetBudget,
	
	NULL as AnnualEstNetReforecastQ1,
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstNetReforecastQ2,
    NULL as AnnualEstNetReforecastQ3

FROM
	ProfitabilityReforecast pr

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
	
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')

	INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
    INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON  c.CalendarKey = pr.CalendarKey
    INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
    INNER JOIN Source s ON s.SourceKey = pr.SourceKey
    INNER JOIN Reimbursable r ON  r.ReimbursableKey = pr.ReimbursableKey '
        
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pr.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey' ELSE '' END + '
	
WHERE  1 = 1 
	AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ2,10,0) + '
 	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
 	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'
GROUP BY
	pr.ActivityTypeKey,
    gac.GlAccountCategoryKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.FunctionalDepartmentKey,
    pr.PropertyFundKey,
    s.SourceName,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)

-- Q3 -----------------------------------------------------------------------------------------------------
SET @cmdString = (Select '
INSERT INTO #BudgetOriginatorOwnerEntity
SELECT
	pr.ActivityTypeKey, 
    gac.GlAccountCategoryKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.FunctionalDepartmentKey,
    pr.PropertyFundKey,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END,
    '''' as CalendarPeriod,
    
	NULL as MtdGrossActual,
	NULL as MtdGrossBudget,
	
	NULL as MtdGrossReforecastQ1,
	NULL as MtdGrossReforecastQ2,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecastQ3,
	
	NULL as MtdNetActual,
	NULL as MtdNetBudget,
	
	NULL as MtdNetReforecastQ1,
	NULL as MtdNetReforecastQ2,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as MtdNetReforecastQ3,
	
	NULL as YtdGrossActual,	
	NULL as YtdGrossBudget,
	
	NULL as YtdGrossReforecastQ1,
	NULL as YtdGrossReforecastQ2,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecastQ3,
	
	NULL as YtdNetActual, 
	NULL as YtdNetBudget,
	
	NULL as YtdNetReforecastQ1,
	NULL as YtdNetReforecastQ2,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as YtdNetReforecastQ3,
	
	NULL as AnnualGrossBudget,' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    'NULL as AnnualGrossReforecastQ1,
    NULL as AnnualGrossReforecastQ2,
    SUM(er.Rate * pr.LocalReforecast) as AnnualGrossReforecastQ3,

	NULL as AnnualNetBudget,' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    'NULL as AnnualNetReforecastQ1,
    NULL as AnnualNetReforecastQ2,
    SUM (er.Rate * r.MultiplicationFactor * pr.LocalReforecast)as AnnualNetReforecastQ3,

	NULL as AnnualEstGrossBudget,	
	
	NULL as AnnualEstGrossReforecastQ1,
	NULL as AnnualEstGrossReforecastQ2,
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstGrossReforecastQ3,

	NULL as AnnualEstNetBudget,
	
	NULL as AnnualEstNetReforecastQ1,
	NULL as AnnualEstNetReforecastQ2,
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstNetReforecastQ3

FROM
	ProfitabilityReforecast pr

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
	
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')

	INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
    INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON  c.CalendarKey = pr.CalendarKey
    INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
    INNER JOIN Source s ON s.SourceKey = pr.SourceKey
    INNER JOIN Reimbursable r ON  r.ReimbursableKey = pr.ReimbursableKey '
        
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pr.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey' ELSE '' END + '
	
WHERE  1 = 1 
	AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ3,10,0) + '
 	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
 	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'
Group By
	pr.ActivityTypeKey,
    gac.GlAccountCategoryKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.FunctionalDepartmentKey,
    pr.PropertyFundKey,
    s.SourceName,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

print @cmdString
EXEC (@cmdString)
-------------------------------------------------------------------------------------------------------


--Entity Mode
SELECT 
	aty.ActivityTypeName as ActivityTypeName,
	aty.ActivityTypeName as ActivityTypeFilterName,
    gac.AccountSubTypeName as ExpenseType,
    ar.RegionName AS AllocationRegionName,
    ar.SubRegionName AS AllocationSubRegionName,
    ar.SubRegionName AS AllocationSubRegionFilterName,
    orr.RegionName AS OriginatingRegionName,
    orr.SubRegionName AS OriginatingSubRegionName,
    orr.SubRegionName AS OriginatingSubRegionFilterName,
    --NB!!!!!!!
    --The roll up to payroll is very sensitive information. It is crutial that information regarding payroll not 
    --get communicated to TS employees.
    CASE WHEN (gac.MajorCategoryName = 'Salaries/Taxes/Benefits') THEN 'Payroll' ELSE fd.FunctionalDepartmentName END AS FunctionalDepartmentName,
    gac.MajorCategoryName AS MajorExpenseCategoryName,
    gac.MinorCategoryName AS MinorExpenseCategoryName,
    pf.PropertyFundType AS EntityType,
    pf.PropertyFundName AS EntityName,
    res.CalendarPeriod AS ActualsExpensePeriod,
    res.EntryDate,
    res.[User],
    res.[Description],
    res.AdditionalDescription,
	res.SourceName AS SourceName,
	res.PropertyFundCode,
    res.OriginatingRegionCode,
	ISNULL(ga.Code, '') GlAccountCode,
    ISNULL(ga.Name, '') GlAccountName,
	
	--Month to date    
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(MtdGrossActual,0) ELSE ISNULL(MtdNetActual,0) END) AS MtdActual,
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(MtdGrossBudget,0) ELSE ISNULL(MtdNetBudget,0) END) AS MtdOriginalBudget,
	
	----------
	
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ1
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ1
		END,0) 
	END) AS MtdReforecastQ1,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ2
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ2
		END,0) 
	END) AS MtdReforecastQ2,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ3
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ3
		END,0) 
	END) AS MtdReforecastQ3,	
	
	----------
	
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ1
		END, 0) - ISNULL(MtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ1
		END, 0) - ISNULL(MtdNetActual, 0) 
	END) AS MtdVarianceQ1,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ2
		END, 0) - ISNULL(MtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ2
		END, 0) - ISNULL(MtdNetActual, 0) 
	END) AS MtdVarianceQ2,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ3
		END, 0) - ISNULL(MtdGrossActual, 0) 
	ELSE
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ3
		END, 0) - ISNULL(MtdNetActual, 0) 
	END) AS MtdVarianceQ3,		
	
	----------
	
	--Year to date
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(YtdGrossActual,0) ELSE ISNULL(YtdNetActual,0) END) AS YtdActual,	
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(YtdGrossBudget,0) ELSE ISNULL(YtdNetBudget,0) END) AS YtdOriginalBudget,
	
	----------
	
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ1 
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ1 
		END,0) 
	END) AS YtdReforecastQ1,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ2
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ2
		END,0) 
	END) AS YtdReforecastQ2,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ3
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ3
		END,0) 
	END) AS YtdReforecastQ3,	
	----------
	
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ1
		END, 0) - ISNULL(YtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ1
		END, 0) - ISNULL(YtdNetActual, 0) 
	END) AS YtdVarianceQ1,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ2
		END, 0) - ISNULL(YtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ2
		END, 0) - ISNULL(YtdNetActual, 0) 
	END) AS YtdVarianceQ2,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ3
		END, 0) - ISNULL(YtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ3
		END, 0) - ISNULL(YtdNetActual, 0) 
	END) AS YtdVarianceQ3,
	
	----------
	
	--Annual
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(AnnualGrossBudget,0) ELSE ISNULL(AnnualNetBudget,0) END) AS AnnualOriginalBudget,	
	----------
	
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualGrossBudget 
		ELSE 
			AnnualGrossReforecastQ1 
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualNetBudget 
		ELSE 
			AnnualNetReforecastQ1
		END,0) 
	END) AS AnnualReforecastQ1,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualGrossBudget 
		ELSE 
			AnnualGrossReforecastQ2
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualNetBudget 
		ELSE 
			AnnualNetReforecastQ2
		END,0) 
	END) AS AnnualReforecastQ2,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualGrossBudget 
		ELSE 
			AnnualGrossReforecastQ3
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualNetBudget 
		ELSE 
			AnnualNetReforecastQ3
		END,0) 
	END) AS AnnualReforecastQ3
	--
	
INTO
	#Output
FROM
	#BudgetOriginatorOwnerEntity res
		INNER JOIN AllocationRegion ar ON ar.AllocationRegionKey = res.AllocationRegionKey
		INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = res.OriginatingRegionKey
		INNER JOIN FunctionalDepartment fd ON fd.FunctionalDepartmentKey = res.FunctionalDepartmentKey
		INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = res.GlAccountCategoryKey
		INNER JOIN PropertyFund pf ON pf.PropertyFundKey = res.PropertyFundKey
		INNER JOIN ActivityType aty ON aty.ActivityTypeKey = res.ActivityTypeKey
		LEFT OUTER JOIN GlAccount ga ON ga.GlAccountKey = res.GlAccountKey 
GROUP BY
	aty.ActivityTypeName,
    gac.AccountSubTypeName,
    ar.RegionName,
    ar.SubRegionName,
    orr.RegionName,
    orr.SubRegionName,
    --NB!!!!!!!
    --The roll up to payroll is very sensitive information. It is crutial that information regarding payroll not 
    --get communicated to TS employees.
    CASE WHEN (gac.MajorCategoryName = 'Salaries/Taxes/Benefits') THEN 'Payroll' ELSE fd.FunctionalDepartmentName END,
    gac.MajorCategoryName,
    gac.MinorCategoryName,
    pf.PropertyFundType,
    pf.PropertyFundName,
    res.CalendarPeriod,
    res.EntryDate,
    res.[User],
    res.[Description],
    res.AdditionalDescription,
    res.SourceName,
    res.PropertyFundCode,
    res.OriginatingRegionCode,
    ISNULL(ga.Code, ''),
    ISNULL(ga.Name, '')

--Output
SELECT
	ActivityTypeName,
	ActivityTypeFilterName,
    ExpenseType,
    AllocationRegionName,
    AllocationSubRegionName,
    AllocationSubRegionFilterName,
    OriginatingRegionName,
    OriginatingSubRegionName,
    OriginatingSubRegionFilterName,
    FunctionalDepartmentName,
    MajorExpenseCategoryName,
    MinorExpenseCategoryName,
    EntityType,
    EntityName,
    ActualsExpensePeriod,
    EntryDate,
    [User],
    [Description],
    AdditionalDescription,
	SourceName,
	PropertyFundCode,
    OriginatingRegionCode,
    GlAccountCode,
    GlAccountName,
	
	--Month to date    
	MtdActual,
	MtdOriginalBudget,
	
	MtdReforecastQ1,
	MtdReforecastQ2,
	MtdReforecastQ3,
	
	MtdVarianceQ1,
	MtdVarianceQ2,
	MtdVarianceQ3,
	
	--Year to date
	YtdActual,
	YtdOriginalBudget,
	
	YtdReforecastQ1,
	YtdReforecastQ2,
	YtdReforecastQ3,
	
	YtdVarianceQ1,
	YtdVarianceQ2,
	YtdVarianceQ3,
	--Annual
	AnnualOriginalBudget,
	
	AnnualReforecastQ1,
	AnnualReforecastQ2,
	AnnualReforecastQ3
	
	--Annual Estimated
	--AnnualEstimatedActual,
	--AnnualEstimatedVariance
FROM
	#Output
WHERE
	--Month to date    
	MtdActual <> 0.00 OR
	MtdOriginalBudget <> 0.00 OR
	
	--MtdReforecastQ1 <> 0.00 OR
	--MtdReforecastQ2 <> 0.00 OR
	MtdReforecastQ3 <> 0.00 OR
	
	--MtdVarianceQ1 <> 0.00 OR
	--MtdVarianceQ2 <> 0.00 OR
	MtdVarianceQ3 <> 0.00 OR
	--Year to date
	YtdActual <> 0.00 OR
	YtdOriginalBudget <> 0.00 OR
	
	--YtdReforecastQ1 <> 0.00 OR
	--YtdReforecastQ2 <> 0.00 OR
	YtdReforecastQ3 <> 0.00 OR
	
	--YtdVarianceQ1 <> 0.00 OR
	--YtdVarianceQ2 <> 0.00 OR
	YtdVarianceQ3 <> 0.00 OR
	--Annual
	AnnualOriginalBudget <> 0.00 OR
	
	AnnualReforecastQ1 <> 0.00 OR
	AnnualReforecastQ2 <> 0.00 OR
	AnnualReforecastQ3 <> 0.00
	--Annual Estimated
	--AnnualEstimatedActual <> 0.00 OR
	--AnnualEstimatedVariance <> 0.00

IF 	OBJECT_ID('tempdb..#BudgetOriginatorOwnerEntity') IS NOT NULL
    DROP TABLE #BudgetOriginatorOwnerEntity

IF 	OBJECT_ID('tempdb..#Output') IS NOT NULL
    DROP TABLE #Output

IF 	OBJECT_ID('tempdb..#EntityFilterTable') IS NOT NULL
	DROP TABLE	#EntityFilterTable

IF 	OBJECT_ID('tempdb..#FunctionalDepartmentFilterTable') IS NOT NULL
	DROP TABLE	#FunctionalDepartmentFilterTable
	
IF 	OBJECT_ID('tempdb..#ActivityTypeFilterTable') IS NOT NULL	
	DROP TABLE	#ActivityTypeFilterTable
	
IF 	OBJECT_ID('tempdb..#AllocationRegionFilterTable') IS NOT NULL	
	DROP TABLE	#AllocationRegionFilterTable
	
IF 	OBJECT_ID('tempdb..#AllocationSubRegionFilterTable') IS NOT NULL	
	DROP TABLE	#AllocationSubRegionFilterTable
	
IF 	OBJECT_ID('tempdb..#MajorAccountCategoryFilterTable') IS NOT NULL	
	DROP TABLE	#MajorAccountCategoryFilterTable

IF 	OBJECT_ID('tempdb..#MinorAccountCategoryFilterTable') IS NOT NULL	
	DROP TABLE	#MinorAccountCategoryFilterTable
	
IF 	OBJECT_ID('tempdb..#OriginatingRegionFilterTable') IS NOT NULL	
	DROP TABLE	#OriginatingRegionFilterTable

IF 	OBJECT_ID('tempdb..#OriginatingSubRegionFilterTable') IS NOT NULL	
	DROP TABLE	#OriginatingSubRegionFilterTable

IF 	OBJECT_ID('tempdb..#ReforecastsEffectivePeriods') IS NOT NULL	
	DROP TABLE #ReforecastsEffectivePeriods


GO

/****** Object:  StoredProcedure [dbo].[stp_R_ExpenseCzar]    Script Date: 12/08/2010 12:01:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[stp_R_ExpenseCzar]
	@ReportExpensePeriod INT = NULL,
	@ReforecastQuaterName VARCHAR(10) = NULL, --'Q1' or 'Q2' or 'Q3'
	@DestinationCurrency VARCHAR(3) = NULL,
	@TranslationTypeName VARCHAR(50) = 'Global',
	@IsGross bit = 1,
	@FunctionalDepartmentList TEXT = NULL,
	@ActivityTypeList TEXT = NULL,
	@EntityList TEXT = NULL,
	@MajorAccountCategoryList TEXT = NULL,
	@MinorAccountCategoryList TEXT = NULL,
	@AllocationRegionList TEXT = NULL,
	@AllocationSubRegionList TEXT = NULL,
	@OriginatingRegionList TEXT = NULL,
	@OriginatingSubRegionList TEXT = NULL,
	@CategoryActivityGroups dbo.CategoryActivityGroup READONLY,
	@OverheadCode Varchar(10)='UNALLOC'
AS

/*
DECLARE @ReportExpensePeriod	AS INT,
	@AccountCategoryList	AS TEXT,
	@DestinationCurrency	AS VARCHAR(3),
	@TranslationTypeName	VARCHAR(50)
	
	SET @ReportExpensePeriod = 201011
	SET @AccountCategoryList = 'IT Costs & Telecommunications|Legal & Professional Fees|Marketing'
	SET @DestinationCurrency ='USD'
	SET @TranslationTypeName = 'Global'
	
EXEC stp_R_ExpenseCzar
	@ReportExpensePeriod = 201011,
	@TranslationTypeName = 'Global',
	@DestinationCurrency = 'USD',

	@FunctionalDepartmentList = 'Information Technologies',
	@AllocationRegionList = 'CHICAGO',
	@EntityList = 'Aldgate|Centrium (St Cathrine House/Pegasus)'
*/

DECLARE
	@_ReportExpensePeriod INT = @ReportExpensePeriod,
	@_ReforecastQuaterName VARCHAR(10) = @ReforecastQuaterName,
	@_DestinationCurrency VARCHAR(3) = @DestinationCurrency,
	@_TranslationTypeName VARCHAR(50) = @TranslationTypeName,
	@_FunctionalDepartmentList VARCHAR(8000) = @FunctionalDepartmentList,
	@_ActivityTypeList VARCHAR(8000) = @ActivityTypeList,
	@_EntityList VARCHAR(8000) = @EntityList,
	@_MajorAccountCategoryList VARCHAR(8000) = @MajorAccountCategoryList,
	@_MinorAccountCategoryList VARCHAR(8000) = @MinorAccountCategoryList,
	@_AllocationRegionList VARCHAR(8000) = @AllocationRegionList,
	@_AllocationSubRegionList VARCHAR(8000) = @AllocationSubRegionList,
	@_OriginatingRegionList VARCHAR(8000) = @OriginatingRegionList,
	@_OriginatingSubRegionList VARCHAR(8000) = @OriginatingSubRegionList

IF LEN(@_FunctionalDepartmentList) > 7998 OR
	LEN(@_ActivityTypeList) > 7998 OR
	LEN(@_EntityList) > 7998 OR
	LEN(@_MajorAccountCategoryList) > 7998 OR
	LEN(@_MinorAccountCategoryList) > 7998 OR
	LEN(@_AllocationRegionList) > 7998 OR
	LEN(@_AllocationSubRegionList) > 7998 OR
	LEN(@_OriginatingRegionList) > 7998 OR
	LEN(@_OriginatingSubRegionList) > 7998
BEGIN
	RAISERROR('Filter List parameter is too big',9,1)
END

--------------------------------------------------------------------------
/*	COMMON Block to setup the Report Filter Variable defaults		*/
--------------------------------------------------------------------------

IF @ReportExpensePeriod IS NULL
	SET @ReportExpensePeriod = CAST(CAST(YEAR(GETDATE()) AS VARCHAR(4)) + CAST(MONTH(GETDATE()) AS VARCHAR(2))AS INT)

IF @DestinationCurrency IS NULL
	SET @DestinationCurrency = 'USD'

IF 	@TranslationTypeName IS NULL
	SET @TranslationTypeName = 'Global'

	DECLARE @CalendarYear AS INT
	SET @CalendarYear = CAST(SUBSTRING(CAST(@ReportExpensePeriod AS VARCHAR(10)), 1, 4) AS INT)		
	
-- let latest reforecast (it will be zero if there is no data for the reforecast)
IF @ReforecastQuaterName IS NULL OR @ReforecastQuaterName NOT IN ('Q0', 'Q1', 'Q2', 'Q3')
	SET @ReforecastQuaterName = (SELECT TOP 1 ReforecastQuarterName 
									FROM dbo.Reforecast 
									WHERE ReforecastEffectivePeriod <= @ReportExpensePeriod AND 
										  ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4)
									ORDER BY ReforecastEffectivePeriod DESC)

-- Compute Reforecast Effective Periods

DECLARE @ReforecastEffectivePeriodQ1 INT
DECLARE @ReforecastEffectivePeriodQ2 INT
DECLARE @ReforecastEffectivePeriodQ3 INT

SET @ReforecastEffectivePeriodQ1 = (SELECT TOP 1
										ReforecastEffectivePeriod 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										ReforecastQuarterName = 'Q1'
									ORDER BY
										ReforecastEffectivePeriod)								

SET @ReforecastEffectivePeriodQ2 = (SELECT TOP 1
										ReforecastEffectivePeriod 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										ReforecastQuarterName = 'Q2'
									ORDER BY
										ReforecastEffectivePeriod)								

SET @ReforecastEffectivePeriodQ3 = (SELECT TOP 1
										ReforecastEffectivePeriod 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										ReforecastQuarterName = 'Q3'
									ORDER BY
										ReforecastEffectivePeriod)

-- Retrieve Reforecast Quarter Name

DECLARE @ReforecastQuarterNameQ1 CHAR(2)
DECLARE @ReforecastQuarterNameQ2 CHAR(2)
DECLARE @ReforecastQuarterNameQ3 CHAR(2)

IF (@ReforecastEffectivePeriodQ1 IS NOT NULL)
BEGIN
	SET @ReforecastQuarterNameQ1 = (SELECT TOP 1
										ReforecastQuarterName 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectivePeriod = @ReforecastEffectivePeriodQ1)
END
ELSE
BEGIN
	PRINT ('@ReforecastEffectivePeriodQ1 is NULL - cannot determine Q1 reforecast quarter name.')
END


IF (@ReforecastEffectivePeriodQ2 IS NOT NULL)
BEGIN
	SET @ReforecastQuarterNameQ2 = (SELECT TOP 1
											ReforecastQuarterName 
										FROM
											dbo.Reforecast 
										WHERE
											ReforecastEffectivePeriod = @ReforecastEffectivePeriodQ2)
END
ELSE
BEGIN
	PRINT ('@ReforecastEffectivePeriodQ2 is NULL - cannot determine Q2 reforecast quarter name.')
END


IF (@ReforecastEffectivePeriodQ3 IS NOT NULL)
BEGIN
	SET @ReforecastQuarterNameQ3 = (SELECT TOP 1
											ReforecastQuarterName 
										FROM
											dbo.Reforecast 
										WHERE
											ReforecastEffectivePeriod = @ReforecastEffectivePeriodQ3)
END
ELSE
BEGIN
	PRINT ('@ReforecastEffectivePeriodQ3 is NULL - cannot determine Q3 reforecast quarter name.')
END

--------------------------------------------------------------------------
/*	COMMON Block to setup the Report Filter Tables		*/
--------------------------------------------------------------------------
	
CREATE TABLE #EntityFilterTable	(PropertyFundKey Int NOT NULL)
CREATE TABLE #FunctionalDepartmentFilterTable (FunctionalDepartmentKey Int NOT NULL)
CREATE TABLE #ActivityTypeFilterTable (ActivityTypeKey Int NOT NULL)
CREATE TABLE #AllocationRegionFilterTable (AllocationRegionKey Int NOT NULL)
CREATE TABLE #AllocationSubRegionFilterTable (AllocationRegionKey Int NOT NULL)
CREATE TABLE #MajorAccountCategoryFilterTable (GlAccountCategoryKey Int NOT NULL)	
CREATE TABLE #MinorAccountCategoryFilterTable (GlAccountCategoryKey Int NOT NULL)	
CREATE TABLE #OriginatingRegionFilterTable (OriginatingRegionKey Int NOT NULL)
CREATE TABLE #OriginatingSubRegionFilterTable (OriginatingRegionKey Int NOT NULL)	
CREATE TABLE #CategoryActivityGroupFilterTable (GlAccountCategoryKey Int NOT NULL, ActivityTypeKey Int NULL)	
	
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #EntityFilterTable (PropertyFundKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #FunctionalDepartmentFilterTable	(FunctionalDepartmentKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #ActivityTypeFilterTable (ActivityTypeKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #AllocationRegionFilterTable	(AllocationRegionKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #AllocationSubRegionFilterTable (AllocationRegionKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #MajorAccountCategoryFilterTable (GlAccountCategoryKey)	
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #MinorAccountCategoryFilterTable (GlAccountCategoryKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OriginatingRegionFilterTable (OriginatingRegionKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OriginatingSubRegionFilterTable (OriginatingRegionKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #CategoryActivityGroupFilterTable (GlAccountCategoryKey, ActivityTypeKey)
	
IF (@EntityList IS NOT NULL)
	BEGIN
	Insert Into #EntityFilterTable
	Select pf.PropertyFundKey
	From dbo.Split(@_EntityList) t1
		INNER JOIN PropertyFund pf ON pf.PropertyFundName = t1.item
	
	END
	
IF (@FunctionalDepartmentList IS NOT NULL)
	BEGIN
	Insert Into #FunctionalDepartmentFilterTable
	Select fd.FunctionalDepartmentKey 
	From dbo.Split(@_FunctionalDepartmentList) t1
		INNER JOIN FunctionalDepartment fd ON fd.FunctionalDepartmentName = t1.item
	END

IF 	(@ActivityTypeList IS NOT NULL)
	BEGIN
    INSERT INTO #ActivityTypeFilterTable
    SELECT at.ActivityTypeKey 
    FROM dbo.Split(@_ActivityTypeList) t1
		INNER JOIN ActivityType at ON at.ActivityTypeName = t1.item
	END
	
IF (@AllocationRegionList IS NOT NULL)
	BEGIN
	Insert Into #AllocationRegionFilterTable
	Select ar.AllocationRegionKey 
	From dbo.Split(@_AllocationRegionList) t1
		INNER JOIN AllocationRegion ar ON ar.RegionName = t1.item
	END

IF (@AllocationSubRegionList IS NOT NULL)
	BEGIN
	Insert Into #AllocationSubRegionFilterTable
	Select ar.AllocationRegionKey
	From dbo.Split(@_AllocationSubRegionList) t1
		INNER JOIN AllocationRegion ar ON ar.SubRegionName = t1.item
	END

IF (@MajorAccountCategoryList IS NOT NULL)
	BEGIN
	Insert Into #MajorAccountCategoryFilterTable
	Select gl.GlAccountCategoryKey 
	From dbo.Split(@_MajorAccountCategoryList) t1
		INNER JOIN GlAccountCategory gl ON gl.MajorCategoryName = t1.item
	END
	
IF 	(@MinorAccountCategoryList IS NOT NULL)
	BEGIN
    INSERT INTO #MinorAccountCategoryFilterTable
    SELECT gl.GlAccountCategoryKey 
    FROM dbo.Split(@MinorAccountCategoryList) t1
		INNER JOIN GlAccountCategory gl ON gl.MinorCategoryName = t1.item
	END	

IF (@OriginatingRegionList IS NOT NULL)
	BEGIN
	Insert Into #OriginatingRegionFilterTable
	Select orr.OriginatingRegionKey 
	From dbo.Split(@_OriginatingRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.RegionName = t1.item
	END

IF (@OriginatingSubRegionList IS NOT NULL)
	BEGIN
	Insert Into #OriginatingSubRegionFilterTable
	Select orr.OriginatingRegionKey  
	From dbo.Split(@OriginatingSubRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.SubRegionName = t1.item
	END		
	
IF EXISTS(SELECT * FROM @CategoryActivityGroups)
	BEGIN
	Insert Into #CategoryActivityGroupFilterTable
	Select gl.GlAccountCategoryKey, at.ActivityTypeKey 
	From @CategoryActivityGroups cag
		CROSS APPLY dbo.Split(cag.MinorAccountCategoryList) t1
		OUTER APPLY dbo.Split(cag.ActivityTypeList) t2
		INNER JOIN GlAccountCategory gl ON gl.MinorCategoryName = t1.item 
		LEFT OUTER JOIN ActivityType at ON at.ActivityTypeName = t2.item
	END
--------------------------------------------------------------------------
/*	COMMON END															*/
--------------------------------------------------------------------------
		
IF 	OBJECT_ID('tempdb..#ExpenseCzar') IS NOT NULL
    DROP TABLE #ExpenseCzar
		
CREATE TABLE #ExpenseCzar
(	
	GlAccountCategoryKey		Int,
	AllocationRegionKey			Int,
	FunctionalDepartmentKey		Int,	
	PropertyFundKey				Int,
	CalendarPeriod				INT,
	SourceName					VarChar(50),
	EntryDate					VARCHAR(10),
	[User]						NVARCHAR(20),
	[Description]				NVARCHAR(60),
	AdditionalDescription		NVARCHAR(4000),
	PropertyFundCode			Varchar(6) DEFAULT(''), --Varchar, for this helps to keep reports size smaller
	OriginatingRegionCode		Varchar(15) DEFAULT(''), --Varchar, for this helps to keep reports size smaller
	GlAccountKey				Int  NULL,
	
	--Month to date	
	MtdGrossActual				MONEY,
	MtdGrossBudget				MONEY,
	
	MtdGrossReforecastQ1		MONEY,
	MtdGrossReforecastQ2		MONEY,
	MtdGrossReforecastQ3		MONEY,
	
	MtdNetActual				MONEY,
	MtdNetBudget				MONEY,
	
	MtdNetReforecastQ1			MONEY,
	MtdNetReforecastQ2			MONEY,
	MtdNetReforecastQ3			MONEY,
	
	--Year to date
	YtdGrossActual				MONEY,	
	YtdGrossBudget				MONEY,
	 
	YtdGrossReforecastQ1		MONEY,
	YtdGrossReforecastQ2		MONEY,
	YtdGrossReforecastQ3		MONEY,
	
	YtdNetActual				MONEY, 
	YtdNetBudget				MONEY, 
	
	YtdNetReforecastQ1			MONEY,
	YtdNetReforecastQ2			MONEY,
	YtdNetReforecastQ3			MONEY,

	--Annual	
	AnnualGrossBudget			MONEY,
	
	AnnualGrossReforecastQ1		MONEY,
	AnnualGrossReforecastQ2		MONEY,
	AnnualGrossReforecastQ3		MONEY,
	
	AnnualNetBudget				MONEY,
	
	AnnualNetReforecastQ1		MONEY,
	AnnualNetReforecastQ2		MONEY,
	AnnualNetReforecastQ3		MONEY,
	
	--Annual estimated
	AnnualEstGrossBudget		MONEY,
	
	AnnualEstGrossReforecastQ1	MONEY,
	AnnualEstGrossReforecastQ2	MONEY,
	AnnualEstGrossReforecastQ3	MONEY,
	
	AnnualEstNetBudget			MONEY,
	
	AnnualEstNetReforecastQ1	MONEY,
	AnnualEstNetReforecastQ2	MONEY,
	AnnualEstNetReforecastQ3	MONEY
)

DECLARE @cmdString VARCHAR(8000)

--Get actual information
SET @cmdString = (SELECT '

INSERT INTO #ExpenseCzar
SELECT 
	gac.GlAccountCategoryKey,
	pa.AllocationRegionKey,
    pa.FunctionalDepartmentKey,    
    pa.PropertyFundKey,
    c.CalendarPeriod,
    s.SourceName,
    CONVERT(varchar(10),ISNULL(pa.EntryDate,''''), 101) as EntryDate,
    ISNULL(pa.[User], '''') [User],
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.Description ELSE '''' END as Description,
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.AdditionalDescription ELSE '''' END as AdditionalDescription,
    ISNULL(pa.PropertyFundCode, '''') PropertyFundCode,
    ISNULL(pa.OriginatingRegionCode, '''') OriginatingRegionCode,
    pa.GlAccountKey,
    
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as MtdGrossActual,
	NULL as MtdGrossBudget,
	
	' + /*-- MtdGrossReforecast --------------------------*/ + '
	
	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdGrossReforecastQ1,

	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdGrossReforecastQ2,

	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdGrossReforecastQ3,
	
	' + /*-- MtdGrossReforecast End --------------------------*/ + '
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as MtdNetActual,
	NULL as MtdNetBudget,
	
	' + /*-- MtdNetReforecast --------------------------*/ + '
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdNetReforecastQ1,

	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdNetReforecastQ2,

	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdNetReforecastQ3,
	
	' + /*-- MtdNetReforecast End --------------------------*/ + '
	
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as YtdGrossActual,
	NULL as YtdGrossBudget,
	
	')
	
	DECLARE @cmdString2 VARCHAR(8000)
	SET @cmdString2 = (SELECT '
	
	
	' + /*-- YtdGrossReforecast --------------------------*/ + '
	
	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdGrossReforecastQ1,

	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdGrossReforecastQ2,

	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdGrossReforecastQ3,

	' + /*-- YtdGrossReforecast End --------------------------*/ + '
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as YtdNetActual,
	NULL as YtdNetBudget,
	
	' + /*-- YtdNetReforecast --------------------------*/ + '
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdNetReforecastQ1,

	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdNetReforecastQ2,

	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdNetReforecastQ3,
	
	' + /*-- YtdNetReforecast End --------------------------*/ + '
	
	NULL as AnnualGrossBudget,
	
	' + /*-- AnnualGrossReforecast --------------------------*/ + '
	
	SUM(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ1,

	SUM(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ2,

	SUM(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ3,

	' + /*-- AnnualGrossReforecast End --------------------------*/ + '

	NULL as AnnualNetBudget,
	
	' + /*-- AnnualNetReforecast --------------------------*/ + '
	
    SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualNetReforecastQ1,

    SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualNetReforecastQ2,

    SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualNetReforecastQ3,
	
	' + /*-- AnnualNetReforecast End --------------------------*/ + '
		
	SUM(
        er.Rate *
        CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pa.LocalActual
        ELSE 
			0
        END
	) as AnnualEstGrossBudget,
	
	' + /*-- AnnualEstGrossReforecast --------------------------*/ + '
	
	SUM(
            er.Rate *
            CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstGrossReforecastQ1,

	SUM(
            er.Rate *
            CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstGrossReforecastQ2,

	SUM(
            er.Rate *
            CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstGrossReforecastQ3,

	')
	
	DECLARE @cmdString3 VARCHAR(8000)
	SET @cmdString3 = (SELECT '


	' + /*-- AnnualEstGrossReforecast End --------------------------*/ + '

    SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pa.LocalActual
        ELSE 
			0
        END
    ) as AnnualEstNetBudget,
    
    ' + /*-- AnnualEstNetReforecast End --------------------------*/ + '
    
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstNetReforecastQ1,

	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstNetReforecastQ2,

	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstNetReforecastQ3
	
	' + /*-- AnnualEstNetReforecast End --------------------------*/ + '
FROM
	ProfitabilityActual pa

	INNER JOIN Overhead oh ON oh.OverheadKey = pa.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1

	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pa.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pa.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pa.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pa.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pa.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pa.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pa.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pa.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')

    INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pa.LocalCurrencyKey AND er.CalendarKey = pa.CalendarKey
	INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
	INNER JOIN Calendar c ON  c.CalendarKey = pa.CalendarKey
	INNER JOIN Source s ON s.SourceKey = pa.SourceKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pa.ReimbursableKey '
    			    
    + CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pa.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pa.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pa.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pa.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pa.PropertyFundKey' ELSE '' END + 
	+ CASE WHEN EXISTS(SELECT * FROM @CategoryActivityGroups) THEN ' INNER JOIN #CategoryActivityGroupFilterTable cag ON cag.GlAccountCategoryKey = gac.GlAccountCategoryKey AND (cag.ActivityTypeKey IS NULL OR cag.ActivityTypeKey = pa.ActivityTypeKey)' ELSE '' END + '
		
WHERE  1 = 1 
	AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select t1.FunctionalDepartmentKey From #FunctionalDepartmentFilterTable t1)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select t1.ActivityTypeKey From #ActivityTypeFilterTable t1)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select t1.PropertyFundKey From #EntityFilterTable t1)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select t1.AllocationRegionKey From #AllocationRegionFilterTable t1)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select t1.AllocationRegionKey From #AllocationSubRegionFilterTable t1)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select t1.GlAccountCategoryKey From #MajorAccountCategoryFilterTable t1)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select t1.GlAccountCategoryKey From #MinorAccountCategoryFilterTable t1)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OriginatingRegionFilterTable t1)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OriginatingSubRegionFilterTable t1)' END +
'	
GROUP BY
	gac.GlAccountCategoryKey,
	pa.AllocationRegionKey,
	pa.FunctionalDepartmentKey,		
	pa.PropertyFundKey,
	c.CalendarPeriod,
	s.SourceName,
	CONVERT(varchar(10),ISNULL(pa.EntryDate,''''), 101),
	ISNULL(pa.[User], '''') ,
	CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.Description ELSE '''' END,
	CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.AdditionalDescription ELSE '''' END,
	ISNULL(pa.PropertyFundCode, ''''),
	ISNULL(pa.OriginatingRegionCode, ''''),
	pa.GlAccountKey
')

IF (LEN(@cmdString) > 7995 OR LEN(@cmdString2) > 7995 OR LEN(@cmdString3) > 7995)
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LTRIM(RTRIM(LEN(@cmdString)))) + ' + ' + STR(LTRIM(RTRIM(LEN(@cmdString2)))) + ' + ' + STR(LTRIM(RTRIM(LEN(@cmdString3)))))

PRINT @cmdString
PRINT @cmdString2
PRINT @cmdString3

EXEC (@cmdString + @cmdString2 + @cmdString3)

-- Get budget information
SET @cmdString = (Select '
INSERT INTO #ExpenseCzar
SELECT 
	gac.GlAccountCategoryKey,
	pb.AllocationRegionKey,
	pb.FunctionalDepartmentKey,	
	pb.PropertyFundKey,
	c.CalendarPeriod,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pb.GlAccountKey END,
    
   NULL as MtdGrossActual,
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as MtdGrossBudget,	
	NULL as MtdGrossReforecastQ1,
	NULL as MtdGrossReforecastQ2,
	NULL as MtdGrossReforecastQ3,
	
	NULL as MtdNetActual,
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pb.LocalBudget
        ELSE 
			0
        END
    ) as MtdNetBudget,
	NULL as MtdNetReforecastQ1,
	NULL as MtdNetReforecastQ2,
	NULL as MtdNetReforecastQ3,
	
	NULL as YtdGrossActual,	
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as YtdGrossBudget, 
	NULL as YtdGrossReforecastQ1,
	NULL as YtdGrossReforecastQ2,
	NULL as YtdGrossReforecastQ3,
	
	NULL as YtdNetActual, 
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pb.LocalBudget
        ELSE 
			0
        END
    ) as YtdNetBudget, 
	NULL as YtdNetReforecastQ1,
	NULL as YtdNetReforecastQ2,
	NULL as YtdNetReforecastQ3,
	
	SUM(er.Rate * pb.LocalBudget) as AnnualGrossBudget,
	NULL as AnnualGrossReforecastQ1,
	NULL as AnnualGrossReforecastQ2,
	NULL as AnnualGrossReforecastQ3,
	

	SUM(er.Rate * r.MultiplicationFactor * pb.LocalBudget) as AnnualNetBudget,
	NULL as AnnualNetReforecastQ1,
	NULL as AnnualNetReforecastQ2,
	NULL as AnnualNetReforecastQ3,
	
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as AnnualEstGrossBudget,
	NULL as AnnualEstGrossReforecastQ1,
	NULL as AnnualEstGrossReforecastQ2,
	NULL as AnnualEstGrossReforecastQ3,

	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pb.LocalBudget
        ELSE 
			0
        END
    ) as AnnualEstNetBudget,
	NULL as AnnualEstNetReforecastQ1,
	NULL as AnnualEstNetReforecastQ2,
	NULL as AnnualEstNetReforecastQ3
FROM
	ProfitabilityBudget pb

	INNER JOIN Overhead oh ON oh.OverheadKey = pb.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
    
    	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pb.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pb.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pb.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pb.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pb.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pb.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pb.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pb.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')

    INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pb.LocalCurrencyKey AND er.CalendarKey = pb.CalendarKey
    INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON c.CalendarKey = pb.CalendarKey
    INNER JOIN Source s ON s.SourceKey = pb.SourceKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pb.ReimbursableKey '
    
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pb.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pb.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pb.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pb.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pb.PropertyFundKey' ELSE '' END + 
	+ CASE WHEN EXISTS(SELECT * FROM @CategoryActivityGroups) THEN ' INNER JOIN #CategoryActivityGroupFilterTable cag ON cag.GlAccountCategoryKey = gac.GlAccountCategoryKey AND (cag.ActivityTypeKey IS NULL OR cag.ActivityTypeKey = pb.ActivityTypeKey)' ELSE '' END + '
		
WHERE  1 = 1 
    AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'    
GROUP BY
	gac.GlAccountCategoryKey,
	pb.AllocationRegionKey,
	pb.FunctionalDepartmentKey,
	pb.PropertyFundKey,
	c.CalendarPeriod,
	s.SourceName,
	CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pb.GlAccountKey END
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)

----------------------------------------------------------------------------------------------------------------------------------
-- Get Q1 reforecast information
SET @cmdString = (SELECT '
INSERT INTO #ExpenseCzar
SELECT 
	gac.GlAccountCategoryKey,
	pr.AllocationRegionKey,
	pr.FunctionalDepartmentKey,	
	pr.PropertyFundKey,
	c.CalendarPeriod,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END,
    
	NULL as MtdGrossActual,
	NULL as MtdGrossBudget,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecastQ1,
	NULL as MtdGrossReforecastQ2,
	NULL as MtdGrossReforecastQ3,
	
	NULL as MtdNetActual,
	NULL as MtdNetBudget,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as MtdNetReforecastQ1,
	NULL as MtdNetReforecastQ2,
	NULL as MtdNetReforecastQ3,
	
	NULL as YtdGrossActual,	
	NULL as YtdGrossBudget, 
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecastQ1,
	NULL as YtdGrossReforecastQ2,
	NULL as YtdGrossReforecastQ3,
	
	NULL as YtdNetActual, 
	NULL as YtdNetBudget, 
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as YtdNetReforecastQ1,
    NULL as YtdNetReforecastQ2,
    NULL as YtdNetReforecastQ3,
	
	NULL as AnnualGrossBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    'SUM(er.Rate * pr.LocalReforecast) as AnnualGrossReforecastQ1,
    NULL as AnnualGrossReforecastQ2,
	NULL as AnnualGrossReforecastQ3,

	NULL as AnnualNetBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    'SUM (er.Rate * r.MultiplicationFactor * pr.LocalReforecast) as AnnualNetReforecastQ1,
    NULL as AnnualNetReforecastQ2,
    NULL as AnnualNetReforecastQ3,

	NULL as AnnualEstGrossBudget,
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstGrossReforecastQ1,
    NULL as AnnualEstGrossReforecastQ2,
    NULL as AnnualEstGrossReforecastQ3,

	NULL as AnnualEstNetBudget,
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE
			0
        END
    ) as AnnualEstNetReforecastQ1,
    NULL as AnnualEstNetReforecastQ2,
    NULL as AnnualEstNetReforecastQ3
    
FROM
	ProfitabilityReforecast pr

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
    
    	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')

    INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
    INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON c.CalendarKey = pr.CalendarKey
    INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
    INNER JOIN Source s ON s.SourceKey = pr.SourceKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pr.ReimbursableKey '
    
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pr.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey' ELSE '' END + 
	+ CASE WHEN EXISTS(SELECT * FROM @CategoryActivityGroups) THEN ' INNER JOIN #CategoryActivityGroupFilterTable cag ON cag.GlAccountCategoryKey = gac.GlAccountCategoryKey AND (cag.ActivityTypeKey IS NULL OR cag.ActivityTypeKey = pr.ActivityTypeKey)' ELSE '' END + '
		
WHERE  1 = 1 
	AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ1,10,0) + '
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'    
GROUP BY
	gac.GlAccountCategoryKey,
	pr.AllocationRegionKey,
	pr.FunctionalDepartmentKey,			
	pr.PropertyFundKey,
	c.CalendarPeriod,
	s.SourceName,
	CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)

----------------------------------------------------------------------------------------------------------------------------------
-- Get Q2 reforecast information
SET @cmdString = (SELECT '
INSERT INTO #ExpenseCzar
SELECT 
	gac.GlAccountCategoryKey,
	pr.AllocationRegionKey,
	pr.FunctionalDepartmentKey,	
	pr.PropertyFundKey,
	c.CalendarPeriod,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END,
    
	NULL as MtdGrossActual,
	NULL as MtdGrossBudget,
	
	NULL as MtdGrossReforecastQ1,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecastQ2,
	NULL as MtdGrossReforecastQ3,
	
	NULL as MtdNetActual,
	NULL as MtdNetBudget,
	
	NULL as MtdNetReforecastQ1,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as MtdNetReforecastQ2,
	NULL as MtdNetReforecastQ3,
	
	NULL as YtdGrossActual,	
	NULL as YtdGrossBudget,
	
	NULL as YtdGrossReforecastQ1,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecastQ2,
	NULL as YtdGrossReforecastQ3,
	
	NULL as YtdNetActual, 
	NULL as YtdNetBudget,
	
	NULL as YtdNetReforecastQ1,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as YtdNetReforecastQ2,
    NULL as YtdNetReforecastQ3,
	
	NULL as AnnualGrossBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '
    NULL as AnnualGrossReforecastQ1,
    SUM(er.Rate * pr.LocalReforecast) as AnnualGrossReforecastQ2,
	NULL as AnnualGrossReforecastQ3,

	NULL as AnnualNetBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '
    NULL as AnnualNetReforecastQ1,
    SUM (er.Rate * r.MultiplicationFactor * pr.LocalReforecast) as AnnualNetReforecastQ2,
    NULL as AnnualNetReforecastQ3,

	NULL as AnnualEstGrossBudget,
	
	NULL as AnnualEstGrossReforecastQ1,
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstGrossReforecastQ2,
    NULL as AnnualEstGrossReforecastQ3,

	NULL as AnnualEstNetBudget,
	NULL as AnnualEstNetReforecastQ1,
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE
			0
        END
    ) as AnnualEstNetReforecastQ2,
    NULL as AnnualEstNetReforecastQ3
    
FROM
	ProfitabilityReforecast pr

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
    
    	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')

    INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
    INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON c.CalendarKey = pr.CalendarKey
    INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
    INNER JOIN Source s ON s.SourceKey = pr.SourceKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pr.ReimbursableKey '
    
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pr.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey' ELSE '' END + 
	+ CASE WHEN EXISTS(SELECT * FROM @CategoryActivityGroups) THEN ' INNER JOIN #CategoryActivityGroupFilterTable cag ON cag.GlAccountCategoryKey = gac.GlAccountCategoryKey AND (cag.ActivityTypeKey IS NULL OR cag.ActivityTypeKey = pr.ActivityTypeKey)' ELSE '' END + '
		
WHERE  1 = 1 
	AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ2,10,0) + '
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'    
GROUP BY
	gac.GlAccountCategoryKey,
	pr.AllocationRegionKey,
	pr.FunctionalDepartmentKey,			
	pr.PropertyFundKey,
	c.CalendarPeriod,
	s.SourceName,
	CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)



----------------------------------------------------------------------------------------------------------------------------------
-- Get Q3 reforecast information
SET @cmdString = (SELECT '
INSERT INTO #ExpenseCzar
SELECT 
	gac.GlAccountCategoryKey,
	pr.AllocationRegionKey,
	pr.FunctionalDepartmentKey,	
	pr.PropertyFundKey,
	c.CalendarPeriod,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END,
    
	NULL as MtdGrossActual,
	NULL as MtdGrossBudget,
	
	NULL as MtdGrossReforecastQ1,
	NULL as MtdGrossReforecastQ2,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecastQ3,
	
	NULL as MtdNetActual,
	NULL as MtdNetBudget,
	
	NULL as MtdNetReforecastQ1,
	NULL as MtdNetReforecastQ2,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as MtdNetReforecastQ3,
	
	NULL as YtdGrossActual,	
	NULL as YtdGrossBudget,
	
	NULL as YtdGrossReforecastQ1,
	NULL as YtdGrossReforecastQ2,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecastQ3,
	
	NULL as YtdNetActual, 
	NULL as YtdNetBudget,
	
	NULL as YtdNetReforecastQ1,
	NULL as YtdNetReforecastQ2,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as YtdNetReforecastQ3,
	
	NULL as AnnualGrossBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '
    NULL as AnnualGrossReforecastQ1,
    NULL as AnnualGrossReforecastQ2,
    SUM(er.Rate * pr.LocalReforecast) as AnnualGrossReforecastQ3,

	NULL as AnnualNetBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '
    NULL as AnnualNetReforecastQ1,
    NULL as AnnualNetReforecastQ2,    
    SUM (er.Rate * r.MultiplicationFactor * pr.LocalReforecast) as AnnualNetReforecastQ3,

	NULL as AnnualEstGrossBudget,
	
	NULL as AnnualEstGrossReforecastQ1,
	NULL as AnnualEstGrossReforecastQ2,
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstGrossReforecastQ3,

	NULL as AnnualEstNetBudget,
	NULL as AnnualEstNetReforecastQ1,
	NULL as AnnualEstNetReforecastQ2,
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE
			0
        END
    ) as AnnualEstNetReforecastQ3
    
FROM
	ProfitabilityReforecast pr

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
    
    	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')

    INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
    INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON c.CalendarKey = pr.CalendarKey
    INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
    INNER JOIN Source s ON s.SourceKey = pr.SourceKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pr.ReimbursableKey '
    
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pr.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey' ELSE '' END + 
	+ CASE WHEN EXISTS(SELECT * FROM @CategoryActivityGroups) THEN ' INNER JOIN #CategoryActivityGroupFilterTable cag ON cag.GlAccountCategoryKey = gac.GlAccountCategoryKey AND (cag.ActivityTypeKey IS NULL OR cag.ActivityTypeKey = pr.ActivityTypeKey)' ELSE '' END + '
		
WHERE  1 = 1 
	AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ3,10,0) + '
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'    
GROUP BY
	gac.GlAccountCategoryKey,
	pr.AllocationRegionKey,
	pr.FunctionalDepartmentKey,			
	pr.PropertyFundKey,
	c.CalendarPeriod,
	s.SourceName,
	CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)

---------------------------------------------------------------------------------------------------
SELECT 
	gac.AccountSubTypeName AS ExpenseType,
	ar.RegionName AS AllocationRegionName,
    fd.FunctionalDepartmentName AS FunctionalDepartmentName,    
    gac.MajorCategoryName AS MajorExpenseCategoryName,
    gac.MinorCategoryName AS MinorExpenseCategoryName,
    pf.PropertyFundName AS EntityName,
    res.CalendarPeriod AS ExpensePeriod,
    res.EntryDate,
    res.[User],
    res.[Description],
    res.AdditionalDescription,
    res.SourceName AS SourceName,
    res.PropertyFundCode,
    res.OriginatingRegionCode,
	ISNULL(ga.Code, '') GlAccountCode,
    ISNULL(ga.Name, '') GlAccountName,

	--Gross
	--Month to date    
	SUM(ISNULL(MtdGrossActual,0)) AS MtdGrossActual,
	SUM(ISNULL(MtdGrossBudget,0)) AS MtdGrossOriginalBudget,
	
	-----
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ1 
	END,0)) AS MtdGrossReforecastQ1,
	--
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ2 
	END,0)) AS MtdGrossReforecastQ2,
	--
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ3 
	END,0)) AS MtdGrossReforecastQ3,		
	-----
	
	-----
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ1 
	END, 0) - ISNULL(MtdGrossActual, 0)) 
	AS MtdGrossVarianceQ1,
	--
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ2 
	END, 0) - ISNULL(MtdGrossActual, 0)) 
	AS MtdGrossVarianceQ2,
	--
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ3 
	END, 0) - ISNULL(MtdGrossActual, 0)) 
	AS MtdGrossVarianceQ3,			
	-----
		
	--Year to date
	SUM(ISNULL(YtdGrossActual,0)) AS YtdGrossActual,	
	SUM(ISNULL(YtdGrossBudget,0)) AS YtdGrossOriginalBudget,
	
	-----
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ1 
	END,0)) AS YtdGrossReforecastQ1,
	--
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ2 
	END,0)) AS YtdGrossReforecastQ2,
	--
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ3 
	END,0)) AS YtdGrossReforecastQ3,			
	-----
	
	-----
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ1
		END, 0) - ISNULL(YtdGrossActual, 0)) 
	AS YtdGrossVarianceQ1,
	--
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ2
		END, 0) - ISNULL(YtdGrossActual, 0)) 
	AS YtdGrossVarianceQ2,
	--
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ3
		END, 0) - ISNULL(YtdGrossActual, 0)) 
	AS YtdGrossVarianceQ3,
	-----
	--Annual
	SUM(ISNULL(AnnualGrossBudget,0)) AS AnnualGrossOriginalBudget,	
	
	-----
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualGrossBudget 
		ELSE 
			AnnualGrossReforecastQ1 
		END,0)) 
	AS AnnualGrossReforecastQ1,
	--
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualGrossBudget 
		ELSE 
			AnnualGrossReforecastQ2 
		END,0)) 
	AS AnnualGrossReforecastQ2,
	--
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualGrossBudget 
		ELSE 
			AnnualGrossReforecastQ3 
		END,0)) 
	AS AnnualGrossReforecastQ3,		
	-----

	--Net
	--Month to date    
	SUM(ISNULL(MtdNetActual,0)) AS MtdNetActual,
	SUM(ISNULL(MtdNetBudget,0)) AS MtdNetOriginalBudget,
	
	-----
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ1
		END,0)) 
	AS MtdNetReforecastQ1,
	--
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ2
		END,0)) 
	AS MtdNetReforecastQ2,
	--
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ3
		END,0)) 
	AS MtdNetReforecastQ3,	
	-----
	
	-----
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ1
		END, 0) - ISNULL(MtdNetActual, 0)) 
	AS MtdNetVarianceQ1,
	--
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ2
		END, 0) - ISNULL(MtdNetActual, 0)) 
	AS MtdNetVarianceQ2,
	--
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ3
		END, 0) - ISNULL(MtdNetActual, 0)) 
	AS MtdNetVarianceQ3,	
	-----
		
	--Year to date
	SUM(ISNULL(YtdNetActual,0)) AS YtdNetActual,	
	SUM(ISNULL(YtdNetBudget,0)) AS YtdNetOriginalBudget,
	
	-----
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ1
		END,0)) 
	AS YtdNetReforecastQ1,
	--
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ2
		END,0)) 
	AS YtdNetReforecastQ2,
	--
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ3
		END,0)) 
	AS YtdNetReforecastQ3,
	-----
	
	-----
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ1
		END, 0) - ISNULL(YtdNetActual, 0)) 
	AS YtdNetVarianceQ1,
	--
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ2
		END, 0) - ISNULL(YtdNetActual, 0)) 
	AS YtdNetVarianceQ2,
	--
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ3
		END, 0) - ISNULL(YtdNetActual, 0)) 
	AS YtdNetVarianceQ3,
	-----
	
	--Annual
	SUM(ISNULL(AnnualNetBudget,0)) AS AnnualNetOriginalBudget,	

	-----
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualNetBudget 
		ELSE 
			AnnualNetReforecastQ1
		END,0)) 
	AS AnnualNetReforecastQ1,
	--
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualNetBudget 
		ELSE 
			AnnualNetReforecastQ2
		END,0)) 
	AS AnnualNetReforecastQ2,
	--
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualNetBudget 
		ELSE 
			AnnualNetReforecastQ3
		END,0)) 
	AS AnnualNetReforecastQ3
	-----
INTO
	#Output
FROM
	#ExpenseCzar res
		INNER JOIN PropertyFund pf ON pf.PropertyFundKey = res.PropertyFundKey		
		INNER JOIN AllocationRegion ar ON ar.AllocationRegionKey = res.AllocationRegionKey
		INNER JOIN FunctionalDepartment fd ON fd.FunctionalDepartmentKey = res.FunctionalDepartmentKey
		INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = res.GlAccountCategoryKey 
		LEFT OUTER JOIN GlAccount ga ON ga.GlAccountKey = res.GlAccountKey 
GROUP BY
	gac.AccountSubTypeName,
	ar.RegionName,
    fd.FunctionalDepartmentName,    
    gac.MajorCategoryName,
    gac.MinorCategoryName,
    pf.PropertyFundName,
    res.CalendarPeriod,
    res.EntryDate,
    res.[User],
    res.[Description],
    res.AdditionalDescription,
    res.SourceName,
    res.PropertyFundCode,
    res.OriginatingRegionCode,
    ISNULL(ga.Code, ''),
    ISNULL(ga.Name, '')

--Output
SELECT
	ExpenseType,
	AllocationRegionName,
    FunctionalDepartmentName,    
    MajorExpenseCategoryName,
    MinorExpenseCategoryName,
    EntityName,
    ExpensePeriod,
    EntryDate,
    [User],
    [Description],
    AdditionalDescription,
    SourceName,
    PropertyFundCode,
    OriginatingRegionCode,
    GlAccountCode,
    GlAccountName,
    
	--Gross
	--Month to date    
	MtdGrossActual,
	MtdGrossOriginalBudget,

	--MtdGrossReforecastQ1,
	--MtdGrossReforecastQ2,
	MtdGrossReforecastQ3,
	
	--MtdGrossVarianceQ1,
	--MtdGrossVarianceQ2,
	MtdGrossVarianceQ3,
		
	--Year to date
	YtdGrossActual,	
	YtdGrossOriginalBudget,

	--YtdGrossReforecastQ1,
	--YtdGrossReforecastQ2,
	YtdGrossReforecastQ3,
	
	--YtdGrossVarianceQ1,
	--YtdGrossVarianceQ2,
	YtdGrossVarianceQ3,

	--Annual
	AnnualGrossOriginalBudget,
	
	AnnualGrossReforecastQ1,
	AnnualGrossReforecastQ2,
	AnnualGrossReforecastQ3,

	--Annual Estimated
	--AnnualGrossEstimatedActual,
	--AnnualGrossEstimatedVariance,

	--Net
	--Month to date    
	MtdNetActual,
	MtdNetOriginalBudget,
	
	--MtdNetReforecastQ1,
	--MtdNetReforecastQ2,
	MtdNetReforecastQ3,
	
	--MtdNetVarianceQ1,
	--MtdNetVarianceQ2,
	MtdNetVarianceQ3,

	--Year to date
	YtdNetActual,	
	YtdNetOriginalBudget,
	
	--YtdNetReforecastQ1,
	--YtdNetReforecastQ2,
	YtdNetReforecastQ3,
	
	--YtdNetVarianceQ1,
	--YtdNetVarianceQ2,
	YtdNetVarianceQ3,

	--Annual
	AnnualNetOriginalBudget,	
	
	AnnualNetReforecastQ1,
	AnnualNetReforecastQ2,
	AnnualNetReforecastQ3

	--Annual Estimated
	--AnnualNetEstimatedActual,	
	--AnnualNetEstimatedVariance
FROM
	#Output
WHERE
	--Gross
	--Month to date    
	MtdGrossActual <> 0.00 OR
	MtdGrossOriginalBudget <> 0.00 OR

	--MtdGrossReforecastQ1 <> 0.00 OR
	--MtdGrossReforecastQ2 <> 0.00 OR
	MtdGrossReforecastQ3 <> 0.00 OR
	
	--MtdGrossVarianceQ1 <> 0.00 OR
	--MtdGrossVarianceQ2 <> 0.00 OR
	MtdGrossVarianceQ3 <> 0.00 OR
		
	--Year to date
	YtdGrossActual <> 0.00 OR
	YtdGrossOriginalBudget <> 0.00 OR

	--YtdGrossReforecastQ1 <> 0.00 OR
	--YtdGrossReforecastQ2 <> 0.00 OR
	YtdGrossReforecastQ3 <> 0.00 OR
	
	--YtdGrossVarianceQ1 <> 0.00 OR
	--YtdGrossVarianceQ2 <> 0.00 OR
	YtdGrossVarianceQ3 <> 0.00 OR

	--Annual
	AnnualGrossOriginalBudget <> 0.00 OR
	
	AnnualGrossReforecastQ1 <> 0.00 OR
	AnnualGrossReforecastQ2 <> 0.00 OR
	AnnualGrossReforecastQ3 <> 0.00 OR
	
	--Annual Estimated
	--AnnualGrossEstimatedActual <> 0.00 OR
	--AnnualGrossEstimatedVariance <> 0.00 OR

	--Net
	--Month to date
	MtdNetActual <> 0.00 OR
	MtdNetOriginalBudget <> 0.00 OR
	
	--MtdNetReforecastQ1 <> 0.00 OR
	--MtdNetReforecastQ2 <> 0.00 OR
	MtdNetReforecastQ3 <> 0.00 OR
	
	--MtdNetVarianceQ1 <> 0.00 OR
	--MtdNetVarianceQ2 <> 0.00 OR
	MtdNetVarianceQ3 <> 0.00 OR

	--Year to date
	YtdNetActual <> 0.00 OR
	YtdNetOriginalBudget <> 0.00 OR
	
	--YtdNetReforecastQ1 <> 0.00 OR
	--YtdNetReforecastQ2 <> 0.00 OR
	YtdNetReforecastQ3 <> 0.00 OR
	
	--YtdNetVarianceQ1 <> 0.00 OR
	--YtdNetVarianceQ2 <> 0.00 OR
	YtdNetVarianceQ3 <> 0.00 OR

	--Annual
	AnnualNetOriginalBudget <> 0.00 OR
	
	AnnualNetReforecastQ1 <> 0.00 OR
	AnnualNetReforecastQ2 <> 0.00 OR
	AnnualNetReforecastQ3 <> 0.00

IF 	OBJECT_ID('tempdb..#AccountCategoryFilterTable') IS NOT NULL
    DROP TABLE #AccountCategoryFilterTable
    
IF 	OBJECT_ID('tempdb..#ActivityTypeFilterTable') IS NOT NULL
    DROP TABLE #ActivityTypeFilterTable
    
IF 	OBJECT_ID('tempdb..#MinorAccountCategoryFilterTable') IS NOT NULL
	DROP TABLE #MinorAccountCategoryFilterTable

IF 	OBJECT_ID('tempdb..#CategoryActivityGroupFilterTable') IS NOT NULL
	DROP TABLE #CategoryActivityGroupFilterTable

IF 	OBJECT_ID('tempdb..#ExpenseCzar') IS NOT NULL
    DROP TABLE #ExpenseCzar
    
IF 	OBJECT_ID('tempdb..#Output') IS NOT NULL
	DROP TABLE #Output

IF 	OBJECT_ID('tempdb..#EntityFilterTable') IS NOT NULL
	DROP TABLE #EntityFilterTable

IF 	OBJECT_ID('tempdb..#FunctionalDepartmentFilterTable') IS NOT NULL
	DROP TABLE #FunctionalDepartmentFilterTable

IF 	OBJECT_ID('tempdb..#AllocationRegionFilterTable') IS NOT NULL
	DROP TABLE #AllocationRegionFilterTable

IF 	OBJECT_ID('tempdb..#AllocationSubRegionFilterTable') IS NOT NULL
	DROP TABLE #AllocationSubRegionFilterTable

IF 	OBJECT_ID('tempdb..#MajorAccountCategoryFilterTable') IS NOT NULL
	DROP TABLE #MajorAccountCategoryFilterTable

IF 	OBJECT_ID('tempdb..#OriginatingRegionFilterTable') IS NOT NULL
	DROP TABLE #OriginatingRegionFilterTable

IF 	OBJECT_ID('tempdb..#OriginatingSubRegionFilterTable') IS NOT NULL
	DROP TABLE #OriginatingSubRegionFilterTable


GO

/****** Object:  StoredProcedure [dbo].[stp_R_ExpenseCzarDetail]    Script Date: 12/08/2010 12:01:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[stp_R_ExpenseCzarDetail]
	@ReportExpensePeriod INT = NULL,
	@DestinationCurrency VARCHAR(3) = NULL,
	@HierarchyName VARCHAR(50) = NULL,
	@IsGross bit = 1,
	@FunctionalDepartmentList TEXT = NULL,
	@ActivityTypeList TEXT = NULL,
	@EntityList TEXT = NULL,
	@MajorAccountCategoryList TEXT = NULL,
	@MinorAccountCategoryList TEXT = NULL,
	@AllocationRegionList TEXT = NULL,
	@AllocationSubRegionList TEXT = NULL,
	@OriginatingRegionList TEXT = NULL,
	@OriginatingSubRegionList TEXT = NULL

AS
/*
	DECLARE @ReportExpensePeriod   INT,
	@AccountCategoryList   VARCHAR(8000),
	@DestinationCurrency   VARCHAR(3),
	@HierarchyName         VARCHAR(50),
	@FunctionalDepartmentList VARCHAR(8000),
	@AllocationRegionList VARCHAR(8000),
	@EntityList VARCHAR(8000)
	
	
	SET @ReportExpensePeriod = 201011
	SET @AccountCategoryList = 'IT Costs & Telecommunications'
	SET @DestinationCurrency ='USD'
	SET @HierarchyName = 'Global'
	SET @FunctionalDepartmentList = 'Information Technologies'
	SET @AllocationRegionList = NULL
	SET @EntityList = NULL
	
EXEC stp_R_ExpenseCzarDetail
		@ReportExpensePeriod = 201011,
		@AccountCategoryList = 'IT Costs & Telecommunications|Legal & Professional Fees|Marketing',
		@DestinationCurrency = 'USD',
		@HierarchyName = 'Global',
		@FunctionalDepartmentList = 'Information Technology',
		@AllocationRegionList = null,
		@EntityList = NULL,
		@MinorAccountCategoryList = 'Architects & Engineering|Legal - Immigration',
		@ActivityTypeList = 'Corporate Overhead|Corporate'
	
*/
DECLARE

	@_ReportExpensePeriod INT = @ReportExpensePeriod,
	@_DestinationCurrency VARCHAR(3) = @DestinationCurrency,
	@_HierarchyName VARCHAR(50) = @HierarchyName,
	@_IsGross bit = @IsGross,
	@_FunctionalDepartmentList VARCHAR(8000) = @FunctionalDepartmentList,
	@_ActivityTypeList VARCHAR(8000) = @ActivityTypeList,
	@_EntityList VARCHAR(8000) = @EntityList,
	@_MajorAccountCategoryList VARCHAR(8000) = @MajorAccountCategoryList,
	@_MinorAccountCategoryList VARCHAR(8000) = @MinorAccountCategoryList,
	@_AllocationRegionList VARCHAR(8000) = @AllocationRegionList,
	@_AllocationSubRegionList VARCHAR(8000) = @AllocationSubRegionList,
	@_OriginatingRegionList VARCHAR(8000) = @OriginatingRegionList,
	@_OriginatingSubRegionList VARCHAR(8000) = @OriginatingSubRegionList
--------------------------------------------------------------------------
/*	COMMON Block to setup the Report Filter Variable defaults		*/
--------------------------------------------------------------------------

IF @ReportExpensePeriod IS NULL
	SET @ReportExpensePeriod = CAST(CAST(YEAR(GETDATE()) AS VARCHAR(4)) + REPLACE(STR(MONTH(GETDATE()),2 ),' ','0')AS INT)

IF @DestinationCurrency IS NULL
	SET @DestinationCurrency = 'USD'

IF 	@HierarchyName IS NULL
	SET @HierarchyName = 'Global'

	DECLARE @CalendarYear AS INT
	SET @CalendarYear = CAST(SUBSTRING(CAST(@ReportExpensePeriod AS VARCHAR(10)), 1, 4) AS INT)				

--------------------------------------------------------------------------
/*	COMMON Block to setup the Report Filter Tables		*/
--------------------------------------------------------------------------
	
	CREATE TABLE	#EntityFilterTable	(PropertyFundKey Int NOT NULL)
	CREATE TABLE	#FunctionalDepartmentFilterTable	(FunctionalDepartmentKey Int NOT NULL)
	CREATE TABLE	#ActivityTypeFilterTable(ActivityTypeKey Int NOT NULL)
	CREATE TABLE	#AllocationRegionFilterTable	(AllocationRegionKey Int NOT NULL)
	CREATE TABLE	#AllocationSubRegionFilterTable	(AllocationRegionKey Int NOT NULL)
	CREATE TABLE	#MajorAccountCategoryFilterTable(GlAccountCategoryKey Int NOT NULL)	
	CREATE TABLE	#MinorAccountCategoryFilterTable(GlAccountCategoryKey Int NOT NULL)	
	CREATE TABLE	#OriginatingRegionFilterTable	(OriginatingRegionKey Int NOT NULL)
	CREATE TABLE	#OriginatingSubRegionFilterTable	(OriginatingRegionKey Int NOT NULL)	
		
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #EntityFilterTable	(PropertyFundKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #FunctionalDepartmentFilterTable	(FunctionalDepartmentKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #ActivityTypeFilterTable(ActivityTypeKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #AllocationRegionFilterTable	(AllocationRegionKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #AllocationSubRegionFilterTable	(AllocationRegionKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #MajorAccountCategoryFilterTable(GlAccountCategoryKey)	
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #MinorAccountCategoryFilterTable(GlAccountCategoryKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OriginatingRegionFilterTable	(OriginatingRegionKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OriginatingSubRegionFilterTable	(OriginatingRegionKey)
	
IF (@EntityList IS NOT NULL)
	BEGIN
	Insert Into #EntityFilterTable
	Select pf.PropertyFundKey
	From dbo.Split(@_EntityList) t1
		INNER JOIN PropertyFund pf ON pf.PropertyFundName = t1.item
	
	END
	
IF (@FunctionalDepartmentList IS NOT NULL)
	BEGIN
	Insert Into #FunctionalDepartmentFilterTable
	Select fd.FunctionalDepartmentKey 
	From dbo.Split(@_FunctionalDepartmentList) t1
		INNER JOIN FunctionalDepartment fd ON fd.FunctionalDepartmentName = t1.item
	END

IF 	(@ActivityTypeList IS NOT NULL)
	BEGIN
    INSERT INTO #ActivityTypeFilterTable
    SELECT at.ActivityTypeKey 
    FROM dbo.Split(@_ActivityTypeList) t1
		INNER JOIN ActivityType at ON at.ActivityTypeName = t1.item
	END
	
IF (@AllocationRegionList IS NOT NULL)
	BEGIN
	Insert Into #AllocationRegionFilterTable
	Select ar.AllocationRegionKey 
	From dbo.Split(@_AllocationRegionList) t1
		INNER JOIN AllocationRegion ar ON ar.RegionName = t1.item
	END

IF (@AllocationSubRegionList IS NOT NULL)
	BEGIN
	Insert Into #AllocationSubRegionFilterTable
	Select ar.AllocationRegionKey
	From dbo.Split(@_AllocationSubRegionList) t1
		INNER JOIN AllocationRegion ar ON ar.SubRegionName = t1.item
	END

IF (@MajorAccountCategoryList IS NOT NULL)
	BEGIN
	Insert Into #MajorAccountCategoryFilterTable
	Select gl.GlAccountCategoryKey 
	From dbo.Split(@_MajorAccountCategoryList) t1
		INNER JOIN GlAccountCategory gl ON gl.MajorCategoryName = t1.item
	END
	
IF 	(@MinorAccountCategoryList IS NOT NULL)
	BEGIN
    INSERT INTO #MinorAccountCategoryFilterTable
    SELECT gl.GlAccountCategoryKey 
    FROM dbo.Split(@MinorAccountCategoryList) t1
		INNER JOIN GlAccountCategory gl ON gl.MinorCategoryName = t1.item
	END	

IF (@OriginatingRegionList IS NOT NULL)
	BEGIN
	Insert Into #OriginatingRegionFilterTable
	Select orr.OriginatingRegionKey 
	From dbo.Split(@_OriginatingRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.RegionName = t1.item
	END

IF (@OriginatingSubRegionList IS NOT NULL)
	BEGIN
	Insert Into #OriginatingSubRegionFilterTable
	Select orr.OriginatingRegionKey  
	From dbo.Split(@OriginatingSubRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.SubRegionName = t1.item
	END		
--------------------------------------------------------------------------
/*	COMMON END															*/
--------------------------------------------------------------------------

IF 	OBJECT_ID('tempdb..#ExpenseCzarTotalComparisonDetail') IS NOT NULL
    DROP TABLE #ExpenseCzarTotalComparisonDetail

CREATE TABLE #ExpenseCzarTotalComparisonDetail
(
	GlAccountCategoryKey	Int,
    FunctionalDepartmentKey	Int,
    AllocationRegionKey		Int,
    PropertyFundKey			Int,
	SourceName				VarChar(50),
	MtdGrossBudget           MONEY,
	MtdGrossActual           MONEY,
	MtdNetBudget			 MONEY,
	MtdNetActual			 MONEY,
	YtdGrossBudget           MONEY,
	YtdGrossActual           MONEY,
	YtdNetBudget			 MONEY,
	YtdNetActual			 MONEY,
	AnualGrossBudget		 MONEY,
	AnualEstGrossActual      MONEY,
	AnualNetBudget			 MONEY,
	AnualEstNetActual		 MONEY
)

CREATE TABLE #Gac (GlAccountCategoryKey Int NOT NULL)

DECLARE @cmdString Varchar(8000)


SET @cmdString = (Select '
	Select GlAccountCategoryKey
	From GlAccountCategory gac
	Where 1 = 1
	AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')
	AND gac.HierarchyName = ''' + @HierarchyName + '''
	')

print @cmdString
Insert Into #Gac
EXEC (@cmdString)

SET @cmdString = (Select '
	
	INSERT INTO #ExpenseCzarTotalComparisonDetail
	SELECT 
		pagacb.GlAccountCategoryKey,
	    pa.FunctionalDepartmentKey,
	    pa.AllocationRegionKey,
	    pa.PropertyFundKey,
	    s.SourceName,
		NULL as MtdGrossBudget,
		SUM(
			(
				er.Rate *
				CASE WHEN (c.CalendarPeriod = '+STR(@ReportExpensePeriod,10,0)+') THEN
					pa.LocalActual
				ELSE
					0
				END
			)
		) as MtdGrossActual,
		NULL as MtdNetBudget,
		SUM(
			(
				er.Rate *
				CASE WHEN (r.ReimbursableCode = ''NO'' AND c.CalendarPeriod = '+STR(@ReportExpensePeriod,10,0)+') THEN 
					pa.LocalActual
				ELSE 
					0
				END
			)
		) as MtdNetActual,
		NULL as YtdGrossBudget,
		SUM(
			(
				er.Rate *
				CASE WHEN (c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+') THEN
					pa.LocalActual
				ELSE
					0
				END
			)
			
		) as YtdGrossActual,
		NULL as YtdNetBudget,
		SUM(
			(
				er.Rate *
				CASE WHEN (r.ReimbursableCode = ''NO'' AND c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+') THEN 
					pa.LocalActual
				ELSE 
					0
				END
			)
		) as YtdNetActual,
		NULL as AnualGrossBudget,
		SUM(
				er.Rate *
				CASE WHEN (c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+') THEN 
					pa.LocalActual
				ELSE 
					0
				END
		) as AnualEstGrossActual,
		NULL as AnualNetBudget,
		SUM(
			(
				er.Rate *
				CASE WHEN (r.ReimbursableCode = ''NO'' AND c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+') THEN 
					pa.LocalActual
				ELSE 
					0
				END
			)
		) as AnualEstNetActual
	FROM
		ProfitabilityActual pa
		INNER JOIN (
				Select pagacb.* From dbo.ProfitabilityActualGlAccountCategoryBridge pagacb
					INNER JOIN #Gac gac on gac.GlAccountCategoryKey = pagacb.GlAccountCategoryKey
				UNION ALL
				Select pagacb.* From dbo.ProfitabilityActualGlAccountCategoryBridgeVirtual('+STR(@CalendarYear,10,0)+','+STR(@ReportExpensePeriod,10,0)+','''+ @HierarchyName + ''') pagacb
					INNER JOIN #Gac gac on gac.GlAccountCategoryKey = pagacb.GlAccountCategoryKey
				) pagacb ON  
		pa.ProfitabilityActualKey = pagacb.ProfitabilityActualKey' +	

    + CASE WHEN @MajorAccountCategoryList IS NOT NULL OR @MinorAccountCategoryList IS NOT NULL THEN ' INNER JOIN GlAccountCategory gac ON  gac.GlAccountCategoryKey = pagacb.GlAccountCategoryKey ' ELSE '' END +
    + CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pa.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pa.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pa.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pa.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pa.PropertyFundKey' ELSE '' END + '

	    INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pa.LocalCurrencyKey AND er.CalendarKey = pa.CalendarKey
	    INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
	    INNER JOIN Calendar c ON  c.CalendarKey = pa.CalendarKey
	    INNER JOIN Source s ON s.SourceKey = pa.SourceKey
	    INNER JOIN Reimbursable r ON  r.ReimbursableKey = pa.ReimbursableKey
			
WHERE  1 = 1
	AND c.CalendarPeriod >= ' + LEFT(LTRIM(STR(@ReportExpensePeriod,10,0)),4)+'01' + '
	AND c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select t1.FunctionalDepartmentKey From #FunctionalDepartmentFilterTable t1)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select t1.ActivityTypeKey From #ActivityTypeFilterTable t1)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select t1.PropertyFundKey From #EntityFilterTable t1)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select t1.AllocationRegionKey From #AllocationRegionFilterTable t1)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select t1.AllocationRegionKey From #AllocationSubRegionFilterTable t1)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select t1.GlAccountCategoryKey From #MajorAccountCategoryFilterTable t1)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select t1.GlAccountCategoryKey From #MinorAccountCategoryFilterTable t1)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OriginatingRegionFilterTable t1)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OriginatingSubRegionFilterTable t1)' END +
'
	Group By
		pagacb.GlAccountCategoryKey,
	    pa.FunctionalDepartmentKey,
	    pa.AllocationRegionKey,
	    pa.PropertyFundKey,
	    s.SourceName
')
print @cmdString
EXEC (@cmdString)


SET @cmdString = (Select '	

	INSERT INTO #ExpenseCzarTotalComparisonDetail
	SELECT 
		pbgacb.GlAccountCategoryKey,
	    pb.FunctionalDepartmentKey,
	    pb.AllocationRegionKey,
	    pb.PropertyFundKey,
	    s.SourceName,
		SUM(
			(
				er.Rate *
				CASE WHEN (c.CalendarPeriod = '+STR(@ReportExpensePeriod,10,0)+') THEN
					pb.LocalBudget
				ELSE
					0
				END
			)
		) as MtdGrossBudget,
		NULL as MtdGrossActual,
		SUM(
			(
				er.Rate *
				CASE WHEN (r.ReimbursableCode = ''NO'' AND c.CalendarPeriod = '+STR(@ReportExpensePeriod,10,0)+') THEN 
					pb.LocalBudget
				ELSE 
					0
				END
			)
		) as MtdNetBudget,
		NULL as MtdNetActual,
		SUM(
			(
				er.Rate *
				CASE WHEN (c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+') THEN
					pb.LocalBudget
				ELSE
					0
				END
			)
		) as YtdGrossBudget,
		NULL as YtdGrossActual,
		SUM(
			(
				er.Rate *
				CASE WHEN (r.ReimbursableCode = ''NO'' AND c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+') THEN 
					pb.LocalBudget
				ELSE 
					0
				END
			)
		) as YtdNetBudget,
		NULL as YtdNetActual,
		SUM(
			(
				er.Rate * pb.LocalBudget
			)
		) as AnualGrossBudget,
		SUM(
			(
				er.Rate *
				CASE WHEN (c.CalendarPeriod > '+STR(@ReportExpensePeriod,10,0)+') THEN
					pb.LocalBudget
				ELSE
					0
				END
			)
		) as AnualEstGrossActual,
		SUM(
			(
				er.Rate *
				CASE WHEN (r.ReimbursableCode = ''NO'') THEN 
					pb.LocalBudget
				ELSE 
					0
				END
			)
		) as AnualNetBudget,
		SUM(
			(
				er.Rate *
				CASE WHEN (r.ReimbursableCode = ''NO'' AND c.CalendarPeriod > '+STR(@ReportExpensePeriod,10,0)+') THEN 
					pb.LocalBudget
				ELSE 
					0
				END
			)
		) as AnualEstNetActual
		
	FROM
		ProfitabilityBudget pb
		INNER JOIN (
				Select pbgacb.* From dbo.ProfitabilityBudgetGlAccountCategoryBridge pbgacb
					INNER JOIN #Gac gac on gac.GlAccountCategoryKey = pbgacb.GlAccountCategoryKey
				UNION ALL
				Select pbgacbv.* From dbo.ProfitabilityBudgetGlAccountCategoryBridgeVirtual('+STR(@CalendarYear,10,0)+','+STR(@ReportExpensePeriod,10,0)+','''+ @HierarchyName + ''') pbgacbv
					INNER JOIN #Gac gac on gac.GlAccountCategoryKey = pbgacbv.GlAccountCategoryKey
				) pbgacb ON  
		pb.ProfitabilityBudgetKey = pbgacb.ProfitabilityBudgetKey' +	

    + CASE WHEN @MajorAccountCategoryList IS NOT NULL OR @MinorAccountCategoryList IS NOT NULL THEN ' INNER JOIN GlAccountCategory gac ON  gac.GlAccountCategoryKey = pbgacb.GlAccountCategoryKey ' ELSE '' END +
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pb.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pb.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pb.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pb.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pb.PropertyFundKey' ELSE '' END + '
		
	    INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pb.LocalCurrencyKey AND er.CalendarKey = pb.CalendarKey
	    INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
	    INNER JOIN Calendar c ON  c.CalendarKey = pb.CalendarKey
	    INNER JOIN Source s ON s.SourceKey = pb.SourceKey
	    INNER JOIN Reimbursable r ON  r.ReimbursableKey = pb.ReimbursableKey
WHERE  1 = 1 
	AND c.CalendarPeriod >= ' + LEFT(LTRIM(STR(@ReportExpensePeriod,10,0)),4)+'01' + '
	AND c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'
	Group By
		pbgacb.GlAccountCategoryKey,
	    pb.FunctionalDepartmentKey,
	    pb.AllocationRegionKey,
	    pb.PropertyFundKey,
	    s.SourceName
	    ')

print @cmdString
EXEC (@cmdString)

CREATE CLUSTERED INDEX IX ON #ExpenseCzarTotalComparisonDetail(PropertyFundKey,AllocationRegionKey,FunctionalDepartmentKey,GlAccountCategoryKey)

	SELECT 

		gac.ExpenseType,
		gac.MajorName MajorExpenseCategory,
	    gac.MinorName MinorExpenseCategory,
	    fd.FunctionalDepartmentName FunctionalDepartment,
	    fd.FunctionalDepartmentName FunctionalDepartmentFilter,
	    ar.SubRegionName AllocationSubRegion,
	    ar.SubRegionName AllocationSubRegionFilter,
	    pf.PropertyFundName Entity,
	    res.SourceName SourceName,
    
		SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(MtdGrossBudget,0) ELSE ISNULL(MtdNetBudget,0) END) AS MTDOriginalBudget,
		SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(MtdGrossActual,0) ELSE ISNULL(MtdNetActual,0) END) AS MTDActual,
		SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(MtdGrossBudget,0) - ISNULL(MtdGrossActual,0) ELSE ISNULL(MtdNetBudget,0) - ISNULL(MtdNetActual,0) END) AS MTDVariance,
		
		SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(YtdGrossBudget,0) ELSE ISNULL(YtdNetBudget,0) END) AS YTDOriginalBudget,
		SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(YtdGrossActual,0) ELSE ISNULL(YtdNetActual,0) END) AS YTDActual,
		SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(YtdGrossBudget,0) - ISNULL(YtdGrossActual,0) ELSE ISNULL(YtdNetBudget,0) - ISNULL(YtdNetActual,0) END) AS YTDVariance,
		
		SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(AnualGrossBudget,0) ELSE ISNULL(AnualNetBudget,0) END) AS AnualBudget,
		SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(AnualEstGrossActual,0) ELSE ISNULL(AnualEstNetActual,0) END) AS AnualEstimatedActual,
		SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(AnualGrossBudget,0) - ISNULL(AnualEstGrossActual,0) ELSE ISNULL(AnualNetBudget,0) - ISNULL(AnualEstNetActual,0) END) AS AnualEstimatedVariance

	FROM
		#ExpenseCzarTotalComparisonDetail res
				INNER JOIN PropertyFund pf ON pf.PropertyFundKey = res.PropertyFundKey
				INNER JOIN AllocationRegion ar ON ar.AllocationRegionKey = res.AllocationRegionKey
				INNER JOIN FunctionalDepartment fd ON fd.FunctionalDepartmentKey = res.FunctionalDepartmentKey
				INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = res.GlAccountCategoryKey 
		
	GROUP BY
		gac.ExpenseType,
		gac.MajorName,
	    gac.MinorName,
	    fd.FunctionalDepartmentName,
	    ar.SubRegionName,
	    pf.PropertyFundName,
	    res.SourceName
	
	IF 	OBJECT_ID('tempdb..#ExpenseCzarTotalComparisonDetail') IS NOT NULL
	    DROP TABLE #ExpenseCzarTotalComparisonDetail



GO

/****** Object:  StoredProcedure [dbo].[stp_R_ExpenseCzarTotalComparison]    Script Date: 12/08/2010 12:01:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[stp_R_ExpenseCzarTotalComparison]
	@ReportExpensePeriod INT = NULL,
	@ReforecastQuaterName VARCHAR(10) = NULL, --'Q1' or 'Q2' or 'Q3'
	@DestinationCurrency VARCHAR(3) = NULL,
	@TranslationTypeName VARCHAR(50) = 'Global',
	@IsGross bit = 1,
	@FunctionalDepartmentList TEXT = NULL,
	@ActivityTypeList TEXT = NULL,
	@EntityList TEXT = NULL,
	@MajorAccountCategoryList TEXT = NULL,
	@MinorAccountCategoryList TEXT = NULL,
	@AllocationRegionList TEXT = NULL,
	@AllocationSubRegionList TEXT = NULL,
	@OriginatingRegionList TEXT = NULL,
	@OriginatingSubRegionList TEXT = NULL,
	@CategoryActivityGroups dbo.CategoryActivityGroup READONLY,
	@OverheadCode Varchar(10)='UNALLOC'
AS
 
/*
DECLARE @ReportExpensePeriod   INT,
    @DestinationCurrency   VARCHAR(3),
    @MajorGlAccountCategoryList VARCHAR(8000),
    @TranslationTypeName         VARCHAR(50)

	SET @ReportExpensePeriod = 201002
	SET @DestinationCurrency = 'USD'
	SET @MajorGlAccountCategoryList = 'Salaries/Taxes/Benefits,Occupancy Costs'
	SET @TranslationTypeName = 'Global'
*/ 
/*
EXEC stp_R_ExpenseCzarTotalComparison
	@ReportExpensePeriod = 201011,
	@TranslationTypeName = 'Global',
	@DestinationCurrency = 'USD',

	@FunctionalDepartmentList = 'Information Technologies',
	@AllocationRegionList = 'CHICAGO',
	@EntityList = 'Aldgate|Centrium (St Cathrine House/Pegasus)'
*/

DECLARE
	@_ReportExpensePeriod INT = @ReportExpensePeriod,
	@_DestinationCurrency VARCHAR(3) = @DestinationCurrency,
	@_TranslationTypeName VARCHAR(50) = @TranslationTypeName,
	@_IsGross bit = @IsGross,
	@_FunctionalDepartmentList VARCHAR(8000) = @FunctionalDepartmentList,
	@_ActivityTypeList VARCHAR(8000) = @ActivityTypeList,
	@_EntityList VARCHAR(8000) = @EntityList,
	@_MajorAccountCategoryList VARCHAR(8000) = @MajorAccountCategoryList,
	@_MinorAccountCategoryList VARCHAR(8000) = @MinorAccountCategoryList,
	@_AllocationRegionList VARCHAR(8000) = @AllocationRegionList,
	@_AllocationSubRegionList VARCHAR(8000) = @AllocationSubRegionList,
	@_OriginatingRegionList VARCHAR(8000) = @OriginatingRegionList,
	@_OriginatingSubRegionList VARCHAR(8000) = @OriginatingSubRegionList

IF LEN(@_FunctionalDepartmentList) > 7998 OR
	LEN(@_ActivityTypeList) > 7998 OR
	LEN(@_EntityList) > 7998 OR
	LEN(@_MajorAccountCategoryList) > 7998 OR
	LEN(@_MinorAccountCategoryList) > 7998 OR
	LEN(@_AllocationRegionList) > 7998 OR
	LEN(@_AllocationSubRegionList) > 7998 OR
	LEN(@_OriginatingRegionList) > 7998 OR
	LEN(@_OriginatingSubRegionList) > 7998
BEGIN
	RAISERROR('Filter List parameter is too big',9,1)
END

--------------------------------------------------------------------------
/*	COMMON Block to setup the Report Filter Variable defaults		*/
--------------------------------------------------------------------------

IF @ReportExpensePeriod IS NULL
	SET @ReportExpensePeriod = CAST(CAST(YEAR(GETDATE()) AS VARCHAR(4)) + CAST(MONTH(GETDATE()) AS VARCHAR(2))AS INT)

IF @DestinationCurrency IS NULL
	SET @DestinationCurrency = 'USD'

IF 	@TranslationTypeName IS NULL
	SET @TranslationTypeName = 'Global'

	DECLARE @CalendarYear AS INT
	SET @CalendarYear = CAST(SUBSTRING(CAST(@ReportExpensePeriod AS VARCHAR(10)), 1, 4) AS INT)		
	
-- let latest reforecast (it will be zero if there is no data for the reforecast)
IF @ReforecastQuaterName IS NULL OR @ReforecastQuaterName NOT IN ('Q0', 'Q1', 'Q2', 'Q3')
	SET @ReforecastQuaterName = (SELECT TOP 1 ReforecastQuarterName 
									FROM dbo.Reforecast 
									WHERE ReforecastEffectivePeriod <= @ReportExpensePeriod AND 
										  ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4)
									ORDER BY ReforecastEffectivePeriod DESC)

-- Compute Reforecast Effective Periods

DECLARE @ReforecastEffectivePeriodQ1 INT
DECLARE @ReforecastEffectivePeriodQ2 INT
DECLARE @ReforecastEffectivePeriodQ3 INT

SET @ReforecastEffectivePeriodQ1 = (SELECT TOP 1
										ReforecastEffectivePeriod 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										ReforecastQuarterName = 'Q1'
									ORDER BY
										ReforecastEffectivePeriod)								

SET @ReforecastEffectivePeriodQ2 = (SELECT TOP 1
										ReforecastEffectivePeriod 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										ReforecastQuarterName = 'Q2'
									ORDER BY
										ReforecastEffectivePeriod)								

SET @ReforecastEffectivePeriodQ3 = (SELECT TOP 1
										ReforecastEffectivePeriod 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										ReforecastQuarterName = 'Q3'
									ORDER BY
										ReforecastEffectivePeriod)

-- Retrieve Reforecast Quarter Name

DECLARE @ReforecastQuarterNameQ1 CHAR(2)
DECLARE @ReforecastQuarterNameQ2 CHAR(2)
DECLARE @ReforecastQuarterNameQ3 CHAR(2)

IF (@ReforecastEffectivePeriodQ1 IS NOT NULL)
BEGIN
	SET @ReforecastQuarterNameQ1 = (SELECT TOP 1
										ReforecastQuarterName 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectivePeriod = @ReforecastEffectivePeriodQ1)
END
ELSE
BEGIN
	PRINT ('@ReforecastEffectivePeriodQ1 is NULL - cannot determine Q1 reforecast quarter name.')
END


IF (@ReforecastEffectivePeriodQ2 IS NOT NULL)
BEGIN
	SET @ReforecastQuarterNameQ2 = (SELECT TOP 1
											ReforecastQuarterName 
										FROM
											dbo.Reforecast 
										WHERE
											ReforecastEffectivePeriod = @ReforecastEffectivePeriodQ2)
END
ELSE
BEGIN
	PRINT ('@ReforecastEffectivePeriodQ2 is NULL - cannot determine Q2 reforecast quarter name.')
END


IF (@ReforecastEffectivePeriodQ3 IS NOT NULL)
BEGIN
	SET @ReforecastQuarterNameQ3 = (SELECT TOP 1
											ReforecastQuarterName 
										FROM
											dbo.Reforecast 
										WHERE
											ReforecastEffectivePeriod = @ReforecastEffectivePeriodQ3)
END
ELSE
BEGIN
	PRINT ('@ReforecastEffectivePeriodQ3 is NULL - cannot determine Q3 reforecast quarter name.')
END
											
--------------------------------------------------------------------------
/*	COMMON Block to setup the Report Filter Tables		*/
--------------------------------------------------------------------------
	
CREATE TABLE #EntityFilterTable	(PropertyFundKey Int NOT NULL)
CREATE TABLE #FunctionalDepartmentFilterTable (FunctionalDepartmentKey Int NOT NULL)
CREATE TABLE #ActivityTypeFilterTable (ActivityTypeKey Int NOT NULL)
CREATE TABLE #AllocationRegionFilterTable (AllocationRegionKey Int NOT NULL)
CREATE TABLE #AllocationSubRegionFilterTable (AllocationRegionKey Int NOT NULL)
CREATE TABLE #MajorAccountCategoryFilterTable (GlAccountCategoryKey Int NOT NULL)	
CREATE TABLE #MinorAccountCategoryFilterTable (GlAccountCategoryKey Int NOT NULL)	
CREATE TABLE #OriginatingRegionFilterTable (OriginatingRegionKey Int NOT NULL)
CREATE TABLE #OriginatingSubRegionFilterTable (OriginatingRegionKey Int NOT NULL)	
CREATE TABLE #CategoryActivityGroupFilterTable (GlAccountCategoryKey Int NOT NULL, ActivityTypeKey Int NULL)	
	
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #EntityFilterTable	(PropertyFundKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #FunctionalDepartmentFilterTable	(FunctionalDepartmentKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #ActivityTypeFilterTable(ActivityTypeKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #AllocationRegionFilterTable	(AllocationRegionKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #AllocationSubRegionFilterTable	(AllocationRegionKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #MajorAccountCategoryFilterTable(GlAccountCategoryKey)	
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #MinorAccountCategoryFilterTable(GlAccountCategoryKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OriginatingRegionFilterTable	(OriginatingRegionKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OriginatingSubRegionFilterTable	(OriginatingRegionKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #CategoryActivityGroupFilterTable	(GlAccountCategoryKey, ActivityTypeKey)
	
IF (@EntityList IS NOT NULL)
	BEGIN
	Insert Into #EntityFilterTable
	Select pf.PropertyFundKey
	From dbo.Split(@_EntityList) t1
		INNER JOIN PropertyFund pf ON pf.PropertyFundName = t1.item
	
	END
	
IF (@FunctionalDepartmentList IS NOT NULL)
	BEGIN
	Insert Into #FunctionalDepartmentFilterTable
	Select fd.FunctionalDepartmentKey 
	From dbo.Split(@_FunctionalDepartmentList) t1
		INNER JOIN FunctionalDepartment fd ON fd.FunctionalDepartmentName = t1.item
	END

IF 	(@ActivityTypeList IS NOT NULL)
	BEGIN
    INSERT INTO #ActivityTypeFilterTable
    SELECT at.ActivityTypeKey 
    FROM dbo.Split(@_ActivityTypeList) t1
		INNER JOIN ActivityType at ON at.ActivityTypeName = t1.item
	END
	
IF (@AllocationRegionList IS NOT NULL)
	BEGIN
	Insert Into #AllocationRegionFilterTable
	Select ar.AllocationRegionKey 
	From dbo.Split(@_AllocationRegionList) t1
		INNER JOIN AllocationRegion ar ON ar.RegionName = t1.item
	END

IF (@AllocationSubRegionList IS NOT NULL)
	BEGIN
	Insert Into #AllocationSubRegionFilterTable
	Select ar.AllocationRegionKey
	From dbo.Split(@_AllocationSubRegionList) t1
		INNER JOIN AllocationRegion ar ON ar.SubRegionName = t1.item
	END

IF (@MajorAccountCategoryList IS NOT NULL)
	BEGIN
	Insert Into #MajorAccountCategoryFilterTable
	Select gl.GlAccountCategoryKey 
	From dbo.Split(@_MajorAccountCategoryList) t1
		INNER JOIN GlAccountCategory gl ON gl.MajorCategoryName = t1.item
	END
	
IF 	(@MinorAccountCategoryList IS NOT NULL)
	BEGIN
    INSERT INTO #MinorAccountCategoryFilterTable
    SELECT gl.GlAccountCategoryKey 
    FROM dbo.Split(@MinorAccountCategoryList) t1
		INNER JOIN GlAccountCategory gl ON gl.MinorCategoryName = t1.item
	END	

IF (@OriginatingRegionList IS NOT NULL)
	BEGIN
	Insert Into #OriginatingRegionFilterTable
	Select orr.OriginatingRegionKey 
	From dbo.Split(@_OriginatingRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.RegionName = t1.item
	END

IF (@OriginatingSubRegionList IS NOT NULL)
	BEGIN
	Insert Into #OriginatingSubRegionFilterTable
	Select orr.OriginatingRegionKey  
	From dbo.Split(@OriginatingSubRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.SubRegionName = t1.item
	END	
	
IF EXISTS(SELECT * FROM @CategoryActivityGroups)
	BEGIN
	Insert Into #CategoryActivityGroupFilterTable
	Select gl.GlAccountCategoryKey, at.ActivityTypeKey 
	From @CategoryActivityGroups cag
		CROSS APPLY dbo.Split(cag.MinorAccountCategoryList) t1
		OUTER APPLY dbo.Split(cag.ActivityTypeList) t2
		INNER JOIN GlAccountCategory gl ON gl.MinorCategoryName = t1.item 
		LEFT OUTER JOIN ActivityType at ON at.ActivityTypeName = t2.item
	END	
--------------------------------------------------------------------------
/*	COMMON END															*/
--------------------------------------------------------------------------
 
 -- Combine budget and actual values
IF OBJECT_ID('tempdb..#TotalComparison') IS NOT NULL
    DROP TABLE #TotalComparison

CREATE TABLE #TotalComparison
(	
	AccountSubTypeName      VARCHAR(50),
	TranslationTypeName     VARCHAR(50),
	MajorCategoryName       VARCHAR(100),
	MinorCategoryName       VARCHAR(100),
	CalendarPeriod          INT,
	SourceName				VARCHAR(50),
	EntryDate				VARCHAR(10),
	[User]					NVARCHAR(20),
	[Description]			NVARCHAR(60),
	AdditionalDescription	NVARCHAR(4000),
	PropertyFundCode		VARCHAR(6) DEFAULT(''), --Varchar, for this helps to keep reports size smaller
	OriginatingRegionCode	VARCHAR(15) DEFAULT(''), --Varchar, for this helps to keep reports size smaller
	GlAccountCode			VARCHAR(50),
	GlAccountName			VARCHAR(150),

	--Month to date
	MtdGrossActual           MONEY,
	MtdGrossBudget           MONEY,
	
	MtdGrossReforecastQ1     MONEY,
	MtdGrossReforecastQ2     MONEY,
	MtdGrossReforecastQ3     MONEY,
	
	MtdNetActual			 MONEY,
	MtdNetBudget			 MONEY,
	
	MtdNetReforecastQ1		 MONEY,
	MtdNetReforecastQ2		 MONEY,
	MtdNetReforecastQ3		 MONEY,
	
	--Year to date
	YtdGrossActual           MONEY,
	YtdGrossBudget           MONEY,
	
	YtdGrossReforecastQ1     MONEY,
	YtdGrossReforecastQ2     MONEY,
	YtdGrossReforecastQ3     MONEY,
	
	YtdNetActual			 MONEY,
	YtdNetBudget			 MONEY,
	
	YtdNetReforecastQ1		 MONEY,
	YtdNetReforecastQ2		 MONEY,
	YtdNetReforecastQ3		 MONEY,

	--Annual
	AnnualGrossBudget		 MONEY,
	
	AnnualGrossReforecastQ1	 MONEY,
	AnnualGrossReforecastQ2	 MONEY,
	AnnualGrossReforecastQ3	 MONEY,
	
	AnnualNetBudget			 MONEY,
	
	AnnualNetReforecastQ1	 MONEY,
	AnnualNetReforecastQ2	 MONEY,
	AnnualNetReforecastQ3	 MONEY,

	--Annual estimated
	AnnualEstGrossBudget     MONEY,
	
	AnnualEstGrossReforecastQ1 MONEY,
	AnnualEstGrossReforecastQ2 MONEY,
	AnnualEstGrossReforecastQ3 MONEY,
	
	AnnualEstNetBudget		 MONEY,
	
	AnnualEstNetReforecastQ1 MONEY,
	AnnualEstNetReforecastQ2 MONEY,
	AnnualEstNetReforecastQ3 MONEY
)

DECLARE @cmdString Varchar(8000)

--Get actual information
SET @cmdString = (SELECT '
INSERT INTO #TotalComparison
SELECT 	
	gac.AccountSubTypeName,
    gac.TranslationTypeName,
    gac.MajorCategoryName,
    gac.MinorCategoryName,
    c.CalendarPeriod,
    s.SourceName,
    CONVERT(varchar(10),ISNULL(pa.EntryDate,''''), 101) as EntryDate,
    ISNULL(pa.[User], '''') [User],
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.Description ELSE '''' END as Description,
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.AdditionalDescription ELSE '''' END as AdditionalDescription,
    ISNULL(pa.PropertyFundCode, '''') PropertyFundCode,
    ISNULL(pa.OriginatingRegionCode, '''') OriginatingRegionCode,
    ga.Code,
	ga.Name,
	
    (
		er.Rate *
		CASE WHEN (c.CalendarPeriod = '+STR(@ReportExpensePeriod,10,0)+') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as MtdGrossActual,
	NULL as MtdGrossBudget,
	
	' + /*-- MtdGrossReforecast --------------------------*/ + '
	
	(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+'
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdGrossReforecastQ1,	
    
	(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+'
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdGrossReforecastQ2,
	
	(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+'
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdGrossReforecastQ3,
    
    ' + /*-- MtdGrossReforecast End --------------------------*/ + '
    
    (
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod = '+STR(@ReportExpensePeriod,10,0)+') THEN 
			pa.LocalActual
        ELSE 
			0
        END
    ) as MtdNetActual,    
	NULL as MtdNetBudget,
	
	' + /*-- MtdNetReforecast --------------------------*/ + '
	
	(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod = '+STR(@ReportExpensePeriod,10,0)+'
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdNetReforecastQ1,

	(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod = '+STR(@ReportExpensePeriod,10,0)+'
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdNetReforecastQ2,
	
	(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod = '+STR(@ReportExpensePeriod,10,0)+'
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdNetReforecastQ3,
	
	' + /*-- MtdNetReforecast End --------------------------*/ + '
	
    (
		er.Rate *
		CASE WHEN (c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as YtdGrossActual,    
    NULL as YtdGrossBudget,
    
    ' + /*-- YtdGrossReforecast --------------------------*/ + '
    
	(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+'
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdGrossReforecastQ1,

	(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+'
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdGrossReforecastQ2,

	(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+'
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdGrossReforecastQ3,
	
	' + /*-- YtdGrossReforecast End --------------------------*/ + '
	  
	(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+') THEN 
			pa.LocalActual
        ELSE 
			0
        END
    ) as YtdNetActual,
	NULL as YtdNetBudget,
   
    ' + /*-- YtdNetReforecast --------------------------*/ + '
   
	(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+'
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdNetReforecastQ1,

	(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+'
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdNetReforecastQ2,

	(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+'
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdNetReforecastQ3,
	')
	
	DECLARE @cmdString2 Varchar(8000)
	SET @cmdString2 = (SELECT '	
	
	' + /*-- YtdNetReforecast End --------------------------*/ + '
	
    NULL as AnnualGrossBudget,
    
    ' + /*-- AnnualGrossReforecast --------------------------*/ + '
    
	(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+'
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ1,

	(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+'
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ2,
	
	(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+'
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ3,

	' + /*-- AnnualGrossReforecast End --------------------------*/ + '

	NULL as AnnualNetBudget,
	
	' + /*-- AnnualNetReforecast --------------------------*/ + '
	
	(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+'
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualNetReforecastQ1,

	(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+'
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualNetReforecastQ2,

	(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+'
			  AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualNetReforecastQ3,

	' + /*-- AnnualNetReforecast End --------------------------*/ + '

	(
        er.Rate *
        CASE WHEN (c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0) + ') THEN 
			pa.LocalActual
        ELSE 
			0
        END
	) as AnnualEstGrossBudget,
	
	' + /*-- AnnualEstGrossReforecast --------------------------*/ + '
	
    (
        er.Rate *
        CASE WHEN c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstGrossReforecastQ1,

    (
        er.Rate *
        CASE WHEN c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstGrossReforecastQ2,

    (
        er.Rate *
        CASE WHEN c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstGrossReforecastQ3,
	')
	
	DECLARE @cmdString3 Varchar(8000)
	SET @cmdString3 = (SELECT '
	
	' + /*-- AnnualEstGrossReforecast End --------------------------*/ + '
		
	(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0) + ') THEN 
			pa.LocalActual
        ELSE 
			0
        END
    ) as AnnualEstNetBudget,
    
    ' + /*-- AnnualEstGrossReforecast --------------------------*/ + '
    
	(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstNetReforecastQ1,

	(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstNetReforecastQ2,

	(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstNetReforecastQ3

	' + /*-- AnnualEstGrossReforecast End --------------------------*/ + '
	
FROM
	ProfitabilityActual pa

	INNER JOIN Overhead oh ON oh.OverheadKey = pa.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1

	INNER JOIN GlAccount ga on ga.GlAccountKey = pa.GlAccountKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pa.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pa.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pa.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pa.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pa.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pa.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pa.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pa.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid TranslationTypeName' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')
			
    INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pa.LocalCurrencyKey AND er.CalendarKey = pa.CalendarKey
    INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON  c.CalendarKey = pa.CalendarKey
    INNER JOIN Source s ON s.SourceKey = pa.SourceKey
    INNER JOIN Reimbursable r ON  r.ReimbursableKey = pa.ReimbursableKey '
		
    + CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pa.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pa.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pa.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pa.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pa.PropertyFundKey' ELSE '' END + 
	+ CASE WHEN EXISTS(SELECT * FROM @CategoryActivityGroups) THEN ' INNER JOIN #CategoryActivityGroupFilterTable cag ON cag.GlAccountCategoryKey = gac.GlAccountCategoryKey AND (cag.ActivityTypeKey IS NULL OR cag.ActivityTypeKey = pa.ActivityTypeKey)' ELSE '' END + '
		
WHERE  1 = 1 
	AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select t1.FunctionalDepartmentKey From #FunctionalDepartmentFilterTable t1)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select t1.ActivityTypeKey From #ActivityTypeFilterTable t1)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select t1.PropertyFundKey From #EntityFilterTable t1)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select t1.AllocationRegionKey From #AllocationRegionFilterTable t1)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select t1.AllocationRegionKey From #AllocationSubRegionFilterTable t1)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select t1.GlAccountCategoryKey From #MajorAccountCategoryFilterTable t1)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select t1.GlAccountCategoryKey From #MinorAccountCategoryFilterTable t1)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OriginatingRegionFilterTable t1)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OriginatingSubRegionFilterTable t1)' END +
'    
')

IF (LEN(@cmdString) > 7995 OR LEN(@cmdString2) > 7995 OR LEN(@cmdString3) > 7995)
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LTRIM(RTRIM(LEN(@cmdString)))) + ' + ' + STR(LTRIM(RTRIM(LEN(@cmdString2)))) + ' + ' + STR(LTRIM(RTRIM(LEN(@cmdString3)))))

PRINT @cmdString
PRINT @cmdString2
PRINT @cmdString3

EXEC (@cmdString + @cmdString2 + @cmdString3)

--------------------------------------------------------------------------------------------------------
--Get budget information
SET @cmdString = (Select '
INSERT INTO #TotalComparison
SELECT 
	gac.AccountSubTypeName,
    gac.TranslationTypeName,
    gac.MajorCategoryName,
    gac.MinorCategoryName,
    c.CalendarPeriod,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN '''' ELSE ga.Code END,
	CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN '''' ELSE ga.Name END,
	
    NULL as MtdGrossActual,    
    (
		er.Rate *
		CASE WHEN (c.CalendarPeriod = '+STR(@ReportExpensePeriod,10,0)+') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as MtdGrossBudget,
	
	NULL as MtdGrossReforecastQ1,
	NULL as MtdGrossReforecastQ2,
	NULL as MtdGrossReforecastQ3,
    
    NULL as MtdNetActual,
	(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod = '+STR(@ReportExpensePeriod,10,0)+') THEN 
			pb.LocalBudget
        ELSE 
			0
        END
    ) as MtdNetBudget,
    
	NULL as MtdNetReforecastQ1,
	NULL as MtdNetReforecastQ2,
	NULL as MtdNetReforecastQ3,
    
    NULL as YtdGrossActual,	
	(
		er.Rate *
		CASE WHEN (c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as YtdGrossBudget,
	
	NULL as YtdGrossReforecastQ1,
	NULL as YtdGrossReforecastQ2,
	NULL as YtdGrossReforecastQ3,
	
	NULL as YtdNetActual,	
	(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+') THEN 
			pb.LocalBudget
        ELSE 
			0
        END
    ) as YtdNetBudget,
    
	NULL as YtdNetReforecastQ1,
	NULL as YtdNetReforecastQ2,
	NULL as YtdNetReforecastQ3,
	
	(
		er.Rate * pb.LocalBudget
	) as AnnualGrossBudget,
	
	NULL as AnnualGrossReforecastQ1,
	NULL as AnnualGrossReforecastQ2,
	NULL as AnnualGrossReforecastQ3,
	
	(
		er.Rate * r.MultiplicationFactor * pb.LocalBudget
    ) as AnnualNetBudget,
    
	NULL as AnnualNetReforecastQ1,
	NULL as AnnualNetReforecastQ2,
	NULL as AnnualNetReforecastQ3,
	
	(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > '+STR(@ReportExpensePeriod,10,0)+') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as AnnualEstGrossBudget,
	
	NULL as AnnualEstGrossReforecastQ1,
	NULL as AnnualEstGrossReforecastQ2,
	NULL as AnnualEstGrossReforecastQ3,
	
    (
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > '+STR(@ReportExpensePeriod,10,0)+') THEN 
			pb.LocalBudget
        ELSE 
			0
        END
    ) as AnnualEstNetBudget,
    
	NULL as AnnualEstNetReforecastQ1,
	NULL as AnnualEstNetReforecastQ2,
	NULL as AnnualEstNetReforecastQ3
    
FROM
	ProfitabilityBudget pb

	INNER JOIN Overhead oh ON oh.OverheadKey = pb.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1

	INNER JOIN GlAccount ga on ga.GlAccountKey = pb.GlAccountKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pb.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pb.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pb.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pb.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pb.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pb.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pb.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pb.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid TranslationTypeName' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')
	
    INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pb.LocalCurrencyKey AND er.CalendarKey = pb.CalendarKey
    INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON c.CalendarKey = pb.CalendarKey
    INNER JOIN Source s ON s.SourceKey = pb.SourceKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pb.ReimbursableKey	'
    
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pb.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pb.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pb.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pb.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pb.PropertyFundKey' ELSE '' END + 
	+ CASE WHEN EXISTS(SELECT * FROM @CategoryActivityGroups) THEN ' INNER JOIN #CategoryActivityGroupFilterTable cag ON cag.GlAccountCategoryKey = gac.GlAccountCategoryKey AND (cag.ActivityTypeKey IS NULL OR cag.ActivityTypeKey = pb.ActivityTypeKey)' ELSE '' END + '

WHERE  1 = 1  
	AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'

')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)

------------------------------------------------------------------------------------------------------------------------------
--Get Q1 reforecast information
SET @cmdString = (Select '
INSERT INTO #TotalComparison
SELECT 
	gac.AccountSubTypeName,
    gac.TranslationTypeName,
    gac.MajorCategoryName,
    gac.MinorCategoryName,
    c.CalendarPeriod,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN '''' ELSE ga.Code END,
	CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN '''' ELSE ga.Name END,
	
    NULL as MtdGrossActual,
    NULL as MtdGrossBudget,
    
    ' + /*-- MtdGrossReforecast --------------------------*/ + '
    
    (
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = '+STR(@ReportExpensePeriod,10,0)+') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecastQ1,
	NULL as MtdGrossReforecastQ2,
	NULL as MtdGrossReforecastQ3,
    
    ' + /*-- MtdGrossReforecast End --------------------------*/ + '
    
    NULL as MtdNetActual,
	NULL as MtdNetBudget,
	
	' + /*-- MtdNetReforecast --------------------------*/ + '
	
	(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = '+STR(@ReportExpensePeriod,10,0)+') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as MtdNetReforecastQ1,
    NULL as MtdNetReforecastQ2,
    NULL as MtdNetReforecastQ3,
    
    ' + /*-- MtdNetReforecast End --------------------------*/ + '
    
    NULL as YtdGrossActual,    
    NULL as YtdGrossBudget,
	
	' + /*-- YtdGrossReforecast --------------------------*/ + '
	
	(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecastQ1,
	NULL as YtdGrossReforecastQ2,
	NULL as YtdGrossReforecastQ3,
	
	' + /*-- YtdGrossReforecast End --------------------------*/ + '
	
	NULL as YtdNetActual,
	NULL as YtdNetBudget,
	
	' + /*-- YtdNetReforecast --------------------------*/ + '
	
	(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as YtdNetReforecastQ1,
    NULL as YtdNetReforecastQ2,
    NULL as YtdNetReforecastQ3,    
   	
   	' + /*-- YtdNetReforecast End --------------------------*/ + '
   	
   	NULL as AnnualGrossBudget,' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '
    
    ' + /*-- AnnualGrossReforecast --------------------------*/ + '
    
    (er.Rate * pr.LocalReforecast) as AnnualGrossReforecastQ1,
     NULL as AnnualGrossReforecastQ2,
     NULL as AnnualGrossReforecastQ3,
	
	' + /*-- AnnualGrossReforecast End --------------------------*/ + '
	
	NULL as AnnualNetBudget,' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '    
    ' + /*-- AnnualNetReforecast --------------------------*/ + '
    
    (er.Rate * r.MultiplicationFactor * pr.LocalReforecast) as AnnualNetReforecastQ1,
    NULL as AnnualNetReforecastQ2,
    NULL as AnnualNetReforecastQ3,
    
    ' + /*-- AnnualNetReforecast End --------------------------*/ + '
    
    NULL as AnnualEstGrossBudget,
	
	' + /*-- AnnualEstGrossReforecast --------------------------*/ + '
	
	(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' +STR(@ReportExpensePeriod,10,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstGrossReforecastQ1,
    NULL as AnnualEstGrossReforecastQ2,
    NULL as AnnualEstGrossReforecastQ3,
	
	' + /*-- AnnualEstGrossReforecast End --------------------------*/ + '
	
	NULL as AnnualEstNetBudget,
	
	' + /*-- AnnualEstNetReforecast --------------------------*/ + '
	
	(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' +STR(@ReportExpensePeriod,10,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstNetReforecastQ1,
    NULL as AnnualEstNetReforecastQ2,
    NULL as AnnualEstNetReforecastQ3
    
    ' + /*-- AnnualEstNetReforecast End --------------------------*/ + '
    
FROM
	ProfitabilityReforecast pr

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1

	INNER JOIN GlAccount ga on ga.GlAccountKey = pr.GlAccountKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid TranslationTypeName' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')
	
    INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
    INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON c.CalendarKey = pr.CalendarKey
    INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
    INNER JOIN Source s ON s.SourceKey = pr.SourceKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pr.ReimbursableKey	'
    
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pr.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey' ELSE '' END + 
	+ CASE WHEN EXISTS(SELECT * FROM @CategoryActivityGroups) THEN ' INNER JOIN #CategoryActivityGroupFilterTable cag ON cag.GlAccountCategoryKey = gac.GlAccountCategoryKey AND (cag.ActivityTypeKey IS NULL OR cag.ActivityTypeKey = pr.ActivityTypeKey)' ELSE '' END + '

WHERE  1 = 1  
	AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ1,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'

')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)

------------------------------------------------------------------------------------------------------------------------------
--Get Q2 reforecast information
SET @cmdString = (Select '
INSERT INTO #TotalComparison
SELECT 
	gac.AccountSubTypeName,
    gac.TranslationTypeName,
    gac.MajorCategoryName,
    gac.MinorCategoryName,
    c.CalendarPeriod,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN '''' ELSE ga.Code END,
	CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN '''' ELSE ga.Name END,
	
    NULL as MtdGrossActual,
    NULL as MtdGrossBudget,
    
    ' + /*-- MtdGrossReforecast --------------------------*/ + '
    
    NULL as MtdGrossReforecastQ1,
    (
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = '+STR(@ReportExpensePeriod,10,0)+') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecastQ2,
	NULL as MtdGrossReforecastQ3,
    
    ' + /*-- MtdGrossReforecast End --------------------------*/ + '
    
    NULL as MtdNetActual,
	NULL as MtdNetBudget,
	
	' + /*-- MtdNetReforecast --------------------------*/ + '
	
	NULL as MtdNetReforecastQ1,
	(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = '+STR(@ReportExpensePeriod,10,0)+') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as MtdNetReforecastQ2,
    NULL as MtdNetReforecastQ3,
    
    ' + /*-- MtdNetReforecast End --------------------------*/ + '
    
    NULL as YtdGrossActual,    
    NULL as YtdGrossBudget,
	
	' + /*-- YtdGrossReforecast --------------------------*/ + '
	
	NULL as YtdGrossReforecastQ1,
	(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecastQ2,
	NULL as YtdGrossReforecastQ3,
	
	' + /*-- YtdGrossReforecast End --------------------------*/ + '
	
	NULL as YtdNetActual,
	NULL as YtdNetBudget,
	
	' + /*-- YtdNetReforecast --------------------------*/ + '
	
	NULL as YtdNetReforecastQ1,
	(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as YtdNetReforecastQ2,
    NULL as YtdNetReforecastQ3,   
   	
   	' + /*-- YtdNetReforecast End --------------------------*/ + '
   	
   	NULL as AnnualGrossBudget,' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '
    
    ' + /*-- AnnualGrossReforecast --------------------------*/ + '
    
    NULL as AnnualGrossReforecastQ1,
    (er.Rate * pr.LocalReforecast) as AnnualGrossReforecastQ2,
     NULL as AnnualGrossReforecastQ3,
	
	' + /*-- AnnualGrossReforecast End --------------------------*/ + '
	
	NULL as AnnualNetBudget,' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '    
    ' + /*-- AnnualNetReforecast --------------------------*/ + '
    
    NULL as AnnualNetReforecastQ1,
    (er.Rate * r.MultiplicationFactor * pr.LocalReforecast) as AnnualNetReforecastQ2,
    NULL as AnnualNetReforecastQ3,
    
    ' + /*-- AnnualNetReforecast End --------------------------*/ + '
    
    NULL as AnnualEstGrossBudget,
	
	' + /*-- AnnualEstGrossReforecast --------------------------*/ + '
	
	NULL as AnnualEstGrossReforecastQ1,
	(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' +STR(@ReportExpensePeriod,10,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstGrossReforecastQ2,
    NULL as AnnualEstGrossReforecastQ3,
	
	' + /*-- AnnualEstGrossReforecast End --------------------------*/ + '
	
	NULL as AnnualEstNetBudget,
	
	' + /*-- AnnualEstNetReforecast --------------------------*/ + '
	
	NULL as AnnualEstNetReforecastQ1,
	(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' +STR(@ReportExpensePeriod,10,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstNetReforecastQ2,
    NULL as AnnualEstNetReforecastQ3
    
    ' + /*-- AnnualEstNetReforecast End --------------------------*/ + '
    
FROM
	ProfitabilityReforecast pr

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1

	INNER JOIN GlAccount ga on ga.GlAccountKey = pr.GlAccountKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid TranslationTypeName' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')
	
    INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
    INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON c.CalendarKey = pr.CalendarKey
    INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
    INNER JOIN Source s ON s.SourceKey = pr.SourceKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pr.ReimbursableKey	'
    
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pr.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey' ELSE '' END + 
	+ CASE WHEN EXISTS(SELECT * FROM @CategoryActivityGroups) THEN ' INNER JOIN #CategoryActivityGroupFilterTable cag ON cag.GlAccountCategoryKey = gac.GlAccountCategoryKey AND (cag.ActivityTypeKey IS NULL OR cag.ActivityTypeKey = pr.ActivityTypeKey)' ELSE '' END + '

WHERE  1 = 1  
	AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ2,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'

')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)



------------------------------------------------------------------------------------------------------------------------------
--Get Q2 reforecast information
SET @cmdString = (Select '
INSERT INTO #TotalComparison
SELECT 
	gac.AccountSubTypeName,
    gac.TranslationTypeName,
    gac.MajorCategoryName,
    gac.MinorCategoryName,
    c.CalendarPeriod,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN '''' ELSE ga.Code END,
	CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN '''' ELSE ga.Name END,
	
    NULL as MtdGrossActual,
    NULL as MtdGrossBudget,
    
    ' + /*-- MtdGrossReforecast --------------------------*/ + '
    
    NULL as MtdGrossReforecastQ1,
    NULL as MtdGrossReforecastQ2,
    (
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = '+STR(@ReportExpensePeriod,10,0)+') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecastQ3,
    
    ' + /*-- MtdGrossReforecast End --------------------------*/ + '
    
    NULL as MtdNetActual,
	NULL as MtdNetBudget,
	
	' + /*-- MtdNetReforecast --------------------------*/ + '
	
	NULL as MtdNetReforecastQ1,
	NULL as MtdNetReforecastQ2,
	(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = '+STR(@ReportExpensePeriod,10,0)+') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as MtdNetReforecastQ3,
    
    ' + /*-- MtdNetReforecast End --------------------------*/ + '
    
    NULL as YtdGrossActual,    
    NULL as YtdGrossBudget,
	
	' + /*-- YtdGrossReforecast --------------------------*/ + '
	
	NULL as YtdGrossReforecastQ1,
	NULL as YtdGrossReforecastQ2,
	(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecastQ3,
	
	' + /*-- YtdGrossReforecast End --------------------------*/ + '
	
	NULL as YtdNetActual,
	NULL as YtdNetBudget,
	
	' + /*-- YtdNetReforecast --------------------------*/ + '
	
	NULL as YtdNetReforecastQ1,
	NULL as YtdNetReforecastQ2,
	(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= '+STR(@ReportExpensePeriod,10,0)+') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as YtdNetReforecastQ3,  
   	
   	' + /*-- YtdNetReforecast End --------------------------*/ + '
   	
   	NULL as AnnualGrossBudget,' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '
    
    ' + /*-- AnnualGrossReforecast --------------------------*/ + '
    
    NULL as AnnualGrossReforecastQ1,
    NULL as AnnualGrossReforecastQ2,
    (er.Rate * pr.LocalReforecast) as AnnualGrossReforecastQ3,
    
	' + /*-- AnnualGrossReforecast End --------------------------*/ + '
	
	NULL as AnnualNetBudget,' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '    
    ' + /*-- AnnualNetReforecast --------------------------*/ + '
    
    NULL as AnnualNetReforecastQ1,
    NULL as AnnualNetReforecastQ2,
    (er.Rate * r.MultiplicationFactor * pr.LocalReforecast) as AnnualNetReforecastQ3,
    
    ' + /*-- AnnualNetReforecast End --------------------------*/ + '
    
    NULL as AnnualEstGrossBudget,
	
	' + /*-- AnnualEstGrossReforecast --------------------------*/ + '
	
	NULL as AnnualEstGrossReforecastQ1,
	NULL as AnnualEstGrossReforecastQ2,
	(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' +STR(@ReportExpensePeriod,10,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstGrossReforecastQ3,
	
	' + /*-- AnnualEstGrossReforecast End --------------------------*/ + '
	
	NULL as AnnualEstNetBudget,
	
	' + /*-- AnnualEstNetReforecast --------------------------*/ + '
	
	NULL as AnnualEstNetReforecastQ1,
	NULL as AnnualEstNetReforecastQ2,
	(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' +STR(@ReportExpensePeriod,10,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstNetReforecastQ3
    
    ' + /*-- AnnualEstNetReforecast End --------------------------*/ + '
    
FROM
	ProfitabilityReforecast pr

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1

	INNER JOIN GlAccount ga on ga.GlAccountKey = pr.GlAccountKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid TranslationTypeName' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')
	
    INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
    INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON c.CalendarKey = pr.CalendarKey
    INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
    INNER JOIN Source s ON s.SourceKey = pr.SourceKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pr.ReimbursableKey	'
    
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pr.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey' ELSE '' END + 
	+ CASE WHEN EXISTS(SELECT * FROM @CategoryActivityGroups) THEN ' INNER JOIN #CategoryActivityGroupFilterTable cag ON cag.GlAccountCategoryKey = gac.GlAccountCategoryKey AND (cag.ActivityTypeKey IS NULL OR cag.ActivityTypeKey = pr.ActivityTypeKey)' ELSE '' END + '

WHERE  1 = 1  
	AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ3,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'

')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)



------------------------------------------------------------------------------------------------------------------
-- Return results
SELECT
	AccountSubTypeName AS ExpenseType,
	TranslationTypeName AS AccountCategoryMappingName,
    MajorCategoryName AS MajorAccountCategoryName,
	MajorCategoryName AS MajorAccountCategoryFilterName,
    MinorCategoryName AS MinorAccountCategoryName,
    CalendarPeriod AS ExpensePeriod,
    EntryDate,
    [User],
    [Description],
    AdditionalDescription,
	SourceName AS SourceName,
	PropertyFundCode,
    OriginatingRegionCode,	
    GlAccountCode,
    GlAccountName,
    
	--Month to date
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(MtdGrossActual,0) ELSE ISNULL(MtdNetActual,0) END) AS MtdActual,
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(MtdGrossBudget,0) ELSE ISNULL(MtdNetBudget,0) END) AS MtdOriginalBudget,
	
	-------------------------------
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ1 
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ1
		END,0) 
	END) 
	AS MtdReforecastQ1,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ2
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ2
		END,0) 
	END) 
	AS MtdReforecastQ2,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ3
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ3
		END,0) 
	END) 
	AS MtdReforecastQ3,		
	-------------------------------
	
	-------------------------------
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ1
		END, 0) - ISNULL(MtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ1
		END, 0) - ISNULL(MtdNetActual, 0) 
	END) 
	AS MtdVarianceQ1,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ2
		END, 0) - ISNULL(MtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ2
		END, 0) - ISNULL(MtdNetActual, 0) 
	END) 
	AS MtdVarianceQ2,	
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ3
		END, 0) - ISNULL(MtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ3
		END, 0) - ISNULL(MtdNetActual, 0) 
	END) 
	AS MtdVarianceQ3,	
	-------------------------------
	
	-- Year to date
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(YtdGrossActual,0) ELSE ISNULL(YtdNetActual,0) END) AS YtdActual,	
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(YtdGrossBudget,0) ELSE ISNULL(YtdNetBudget,0) END) AS YtdOriginalBudget,
	
	-------------------------------
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ1
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ1
		END,0) 
	END) 
	AS YtdReforecastQ1,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ2
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ2
		END,0) 
	END) 
	AS YtdReforecastQ2,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ3
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ3
		END,0) 
	END) 
	AS YtdReforecastQ3,		
	-------------------------------

	-------------------------------
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ1
		END, 0) - ISNULL(YtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ1 
		END, 0) - ISNULL(YtdNetActual, 0) 
	END) 
	AS YtdVarianceQ1,
	---
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ2
		END, 0) - ISNULL(YtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ2
		END, 0) - ISNULL(YtdNetActual, 0) 
	END) 
	AS YtdVarianceQ2,	
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ3 
		END, 0) - ISNULL(YtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ3 
		END, 0) - ISNULL(YtdNetActual, 0) 
	END) 
	AS YtdVarianceQ3,	
	-------------------------------
	
	--Annual
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(AnnualGrossBudget,0) ELSE ISNULL(AnnualNetBudget,0) END) AS AnnualOriginalBudget,
	
	-------------------------------
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualGrossBudget 
		ELSE 
			AnnualGrossReforecastQ1
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualNetBudget 
		ELSE 
			AnnualNetReforecastQ1
		END,0) 
	END) 
	AS AnnualReforecastQ1,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualGrossBudget 
		ELSE 
			AnnualGrossReforecastQ2
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualNetBudget 
		ELSE 
			AnnualNetReforecastQ2
		END,0) 
	END) 
	AS AnnualReforecastQ2,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualGrossBudget 
		ELSE 
			AnnualGrossReforecastQ3
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualNetBudget 
		ELSE 
			AnnualNetReforecastQ3
		END,0) 
	END) 
	AS AnnualReforecastQ3,
	-------------------------------
	
	--Annual Estimated
	-------------------------------
	SUM(CASE WHEN (@IsGross = 1) THEN
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN
			AnnualEstGrossBudget
		ELSE
			AnnualEstGrossReforecastQ1
		END,0)
	ELSE
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN
			AnnualEstNetBudget
		ELSE
			AnnualEstNetReforecastQ1
		END,0)
	END)
	AS AnnualEstimatedActualQ1,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN
			AnnualEstGrossBudget
		ELSE
			AnnualEstGrossReforecastQ2
		END,0)
	ELSE
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN
			AnnualEstNetBudget
		ELSE
			AnnualEstNetReforecastQ2
		END,0)
	END)
	AS AnnualEstimatedActualQ2,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN
			AnnualEstGrossBudget
		ELSE
			AnnualEstGrossReforecastQ3
		END,0)
	ELSE
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN
			AnnualEstNetBudget
		ELSE
			AnnualEstNetReforecastQ3
		END,0)
	END)
	AS AnnualEstimatedActualQ3,		
	-------------------------------
	
	-------------------------------
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(AnnualGrossBudget,0) - ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN
												AnnualEstGrossBudget
											ELSE
												AnnualEstGrossReforecastQ1
											END,0)
		ELSE
			ISNULL(AnnualNetBudget,0) - ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN
											AnnualEstNetBudget
										ELSE
											AnnualEstNetReforecastQ1
										END,0)
		END)
	AS AnnualEstimatedVarianceQ1,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(AnnualGrossBudget,0) - ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN
												AnnualEstGrossBudget
											ELSE
												AnnualEstGrossReforecastQ2
											END,0)
		ELSE
			ISNULL(AnnualNetBudget,0) - ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN
											AnnualEstNetBudget
										ELSE
											AnnualEstNetReforecastQ2
										END,0)
		END)
	AS AnnualEstimatedVarianceQ2,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(AnnualGrossBudget,0) - ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN
												AnnualEstGrossBudget
											ELSE
												AnnualEstGrossReforecastQ3
											END,0)
		ELSE
			ISNULL(AnnualNetBudget,0) - ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN
											AnnualEstNetBudget
										ELSE
											AnnualEstNetReforecastQ3
										END,0)
		END)
	AS AnnualEstimatedVarianceQ3		
	-------------------------------
INTO
	#Output
FROM
	#TotalComparison
GROUP BY
	AccountSubTypeName,
	TranslationTypeName,
    MajorCategoryName,
    MinorCategoryName,
    CalendarPeriod,
    EntryDate,
    [User],
    [Description],
    AdditionalDescription,
    SourceName,
    PropertyFundCode,
    OriginatingRegionCode,
	GlAccountCode,
    GlAccountName


--Output
SELECT
	ExpenseType,
	AccountCategoryMappingName,
    MajorAccountCategoryName,
	MajorAccountCategoryFilterName,
    MinorAccountCategoryName,
    ExpensePeriod,
    EntryDate,
    [User],
    [Description],
    AdditionalDescription,
	SourceName,
	PropertyFundCode,
    OriginatingRegionCode,
	GlAccountCode,
	GlAccountName,

	--Month to date
	MtdActual,
	MtdOriginalBudget,
	
	--MtdReforecastQ1,
	--MtdReforecastQ2,
	MtdReforecastQ3,
	
	--MtdVarianceQ1,
	--MtdVarianceQ2,
	MtdVarianceQ3,
	
	-- Year to date
	YtdActual,	
	YtdOriginalBudget,
	
	--YtdReforecastQ1,
	--YtdReforecastQ2,
	YtdReforecastQ3,
	
	--YtdVarianceQ1,
	--YtdVarianceQ2,
	YtdVarianceQ3,
	
	--Annual
	AnnualOriginalBudget,
	
	AnnualReforecastQ1,
	AnnualReforecastQ2,
	AnnualReforecastQ3,
	
	
	--Annual Estimated
	--AnnualEstimatedActualQ1,
	--AnnualEstimatedActualQ2,
	AnnualEstimatedActualQ3,
	
	--AnnualEstimatedVarianceQ1,
	--AnnualEstimatedVarianceQ2,
	AnnualEstimatedVarianceQ3
	
FROM
	#Output
WHERE
	--Month to date
	MtdActual <> 0.00 OR
	MtdOriginalBudget <> 0.00 OR
	
	--MtdReforecastQ1 <> 0.00 OR
	--MtdReforecastQ2 <> 0.00 OR
	MtdReforecastQ3 <> 0.00 OR
	
	--MtdVarianceQ1 <> 0.00 OR
	--MtdVarianceQ2 <> 0.00 OR
	MtdVarianceQ3 <> 0.00 OR
	
	-- Year to date
	YtdActual <> 0.00 OR
	YtdOriginalBudget <> 0.00 OR
	
	--YtdReforecastQ1 <> 0.00 OR
	--YtdReforecastQ2 <> 0.00 OR
	YtdReforecastQ3 <> 0.00 OR
	
	--YtdVarianceQ1 <> 0.00 OR
	--YtdVarianceQ2 <> 0.00 OR
	YtdVarianceQ3 <> 0.00 OR
	
	--Annual
	AnnualOriginalBudget <> 0.00 OR
	
	AnnualReforecastQ1 <> 0.00 OR
	AnnualReforecastQ2 <> 0.00 OR
	AnnualReforecastQ3 <> 0.00 OR
	
	--Annual Estimated
	--AnnualEstimatedActualQ1 <> 0.00 OR
	--AnnualEstimatedActualQ2 <> 0.00 OR
	AnnualEstimatedActualQ3 <> 0.00 OR
	
	--AnnualEstimatedVarianceQ1 <> 0.00 OR
	--AnnualEstimatedVarianceQ2 <> 0.00 OR
	AnnualEstimatedVarianceQ3 <> 0.00

IF 	OBJECT_ID('tempdb..#Output') IS NOT NULL
    DROP TABLE #Output

IF 	OBJECT_ID('tempdb..#EntityFilterTable') IS NOT NULL
	DROP TABLE #EntityFilterTable
	
IF 	OBJECT_ID('tempdb..#FunctionalDepartmentFilterTable') IS NOT NULL	
	DROP TABLE #FunctionalDepartmentFilterTable
	
IF 	OBJECT_ID('tempdb..#ActivityTypeFilterTable') IS NOT NULL
	DROP TABLE #ActivityTypeFilterTable
	
IF 	OBJECT_ID('tempdb..#AllocationRegionFilterTable') IS NOT NULL
	DROP TABLE #AllocationRegionFilterTable
	
IF 	OBJECT_ID('tempdb..#AllocationSubRegionFilterTable') IS NOT NULL
	DROP TABLE #AllocationSubRegionFilterTable
	
IF 	OBJECT_ID('tempdb..#MajorAccountCategoryFilterTable') IS NOT NULL
	DROP TABLE #MajorAccountCategoryFilterTable
	
IF 	OBJECT_ID('tempdb..#MinorAccountCategoryFilterTable') IS NOT NULL
	DROP TABLE #MinorAccountCategoryFilterTable
	
IF 	OBJECT_ID('tempdb..#OriginatingRegionFilterTable') IS NOT NULL
	DROP TABLE #OriginatingRegionFilterTable
	
IF 	OBJECT_ID('tempdb..#OriginatingSubRegionFilterTable') IS NOT NULL
	DROP TABLE #OriginatingSubRegionFilterTable
	
IF 	OBJECT_ID('tempdb..#CategoryActivityGroupFilterTable') IS NOT NULL
	DROP TABLE #CategoryActivityGroupFilterTable


GO

/****** Object:  StoredProcedure [dbo].[stp_R_ExpenseCzarTotalComparisonDetail]    Script Date: 12/08/2010 12:01:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[stp_R_ExpenseCzarTotalComparisonDetail]
	@ReportExpensePeriod INT = NULL,
	@ReforecastQuaterName VARCHAR(10) = NULL, --'Q1' or 'Q2' or 'Q3'
	@PreviousReforecastQuaterName VARCHAR(10) = 'Q1', -- or 'Q2' or 'Q3'
	@DestinationCurrency VARCHAR(3) = NULL,
	@TranslationTypeName VARCHAR(50) = 'Global',
	@IsGross bit = 1,
	@FunctionalDepartmentList TEXT = NULL,
	@ActivityTypeList TEXT = NULL,
	@EntityList TEXT = NULL,
	@MajorAccountCategoryList TEXT = NULL,
	@MinorAccountCategoryList TEXT = NULL,
	@AllocationRegionList TEXT = NULL,
	@AllocationSubRegionList TEXT = NULL,
	@OriginatingRegionList TEXT = NULL,
	@OriginatingSubRegionList TEXT = NULL,
	@CategoryActivityGroups dbo.CategoryActivityGroup READONLY,
	@OverheadCode Varchar(10)='UNALLOC'
AS

/*
DECLARE @ReportExpensePeriod   INT,
	@AccountCategoryList   VARCHAR(8000),
	@DestinationCurrency   VARCHAR(3),
	@TranslationTypeName   VARCHAR(50),
	@FunctionalDepartmentList VARCHAR(8000),
	@AllocationRegionList VARCHAR(8000),
	@EntityList VARCHAR(8000)
	
	
	SET @ReportExpensePeriod = 201011
	SET @AccountCategoryList = 'IT Costs & Telecommunications'
	SET @DestinationCurrency ='USD'
	SET @TranslationTypeName = 'Global'
	SET @FunctionalDepartmentList = 'Information Technologies'
	SET @AllocationRegionList = NULL
	SET @EntityList = NULL
	
EXEC stp_R_ExpenseCzarTotalComparisonDetail
	@ReportExpensePeriod = 201011,
	@TranslationTypeName = 'Global',
	@DestinationCurrency = 'USD',

	@FunctionalDepartmentList = 'Information Technologies',
	@AllocationRegionList = 'CHICAGO',
	@EntityList = 'Aldgate|Centrium (St Cathrine House/Pegasus)'
*/

DECLARE
	@_ReportExpensePeriod INT = @ReportExpensePeriod,
	@_ReforecastQuaterName VARCHAR(10) = @ReforecastQuaterName,
	@_PreviousReforecastQuaterName VARCHAR(10) = @PreviousReforecastQuaterName,
	@_DestinationCurrency VARCHAR(3) = @DestinationCurrency,
	@_TranslationTypeName VARCHAR(50) = @TranslationTypeName,
	@_IsGross bit = @IsGross,
	@_FunctionalDepartmentList VARCHAR(8000) = @FunctionalDepartmentList,
	@_ActivityTypeList VARCHAR(8000) = @ActivityTypeList,
	@_EntityList VARCHAR(8000) = @EntityList,
	@_MajorAccountCategoryList VARCHAR(8000) = @MajorAccountCategoryList,
	@_MinorAccountCategoryList VARCHAR(8000) = @MinorAccountCategoryList,
	@_AllocationRegionList VARCHAR(8000) = @AllocationRegionList,
	@_AllocationSubRegionList VARCHAR(8000) = @AllocationSubRegionList,
	@_OriginatingRegionList VARCHAR(8000) = @OriginatingRegionList,
	@_OriginatingSubRegionList VARCHAR(8000) = @OriginatingSubRegionList

IF LEN(@_FunctionalDepartmentList) > 7998 OR
	LEN(@_ActivityTypeList) > 7998 OR
	LEN(@_EntityList) > 7998 OR
	LEN(@_MajorAccountCategoryList) > 7998 OR
	LEN(@_MinorAccountCategoryList) > 7998 OR
	LEN(@_AllocationRegionList) > 7998 OR
	LEN(@_AllocationSubRegionList) > 7998 OR
	LEN(@_OriginatingRegionList) > 7998 OR
	LEN(@_OriginatingSubRegionList) > 7998
BEGIN
	RAISERROR('Filter List parameter is too big',9,1)
END

--------------------------------------------------------------------------
/*	COMMON Block to setup the Report Filter Variable defaults		*/
--------------------------------------------------------------------------

IF @ReportExpensePeriod IS NULL
	SET @ReportExpensePeriod = CAST(CAST(YEAR(GETDATE()) AS VARCHAR(4)) + CAST(MONTH(GETDATE()) AS VARCHAR(2))AS INT)

IF @DestinationCurrency IS NULL
	SET @DestinationCurrency = 'USD'

IF 	@TranslationTypeName IS NULL
	SET @TranslationTypeName = 'Global'

	DECLARE @CalendarYear AS INT
	SET @CalendarYear = CAST(SUBSTRING(CAST(@ReportExpensePeriod AS VARCHAR(10)), 1, 4) AS INT)		
	
-- let latest reforecast (it will be zero if there is no data for the reforecast)
IF @ReforecastQuaterName IS NULL OR @ReforecastQuaterName NOT IN ('Q0', 'Q1', 'Q2', 'Q3')
	SET @ReforecastQuaterName = (SELECT TOP 1
									ReforecastQuarterName 
								 FROM
									dbo.Reforecast 
								 WHERE
									ReforecastEffectivePeriod <= @ReportExpensePeriod AND 
									ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4)
								 ORDER BY
									ReforecastEffectivePeriod DESC)

-- Compute Reforecast Effective Periods

DECLARE @ReforecastEffectivePeriodQ1 INT
DECLARE @ReforecastEffectivePeriodQ2 INT
DECLARE @ReforecastEffectivePeriodQ3 INT

SET @ReforecastEffectivePeriodQ1 = (SELECT TOP 1
										ReforecastEffectivePeriod 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										ReforecastQuarterName = 'Q1'
									ORDER BY
										ReforecastEffectivePeriod)								

SET @ReforecastEffectivePeriodQ2 = (SELECT TOP 1
										ReforecastEffectivePeriod 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										ReforecastQuarterName = 'Q2'
									ORDER BY
										ReforecastEffectivePeriod)								

SET @ReforecastEffectivePeriodQ3 = (SELECT TOP 1
										ReforecastEffectivePeriod 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										ReforecastQuarterName = 'Q3'
									ORDER BY
										ReforecastEffectivePeriod)

-- Retrieve Reforecast Quarter Name

DECLARE @ReforecastQuarterNameQ1 CHAR(2)
DECLARE @ReforecastQuarterNameQ2 CHAR(2)
DECLARE @ReforecastQuarterNameQ3 CHAR(2)

IF (@ReforecastEffectivePeriodQ1 IS NOT NULL)
BEGIN
	SET @ReforecastQuarterNameQ1 = (SELECT TOP 1
										ReforecastQuarterName 
									FROM
										dbo.Reforecast 
									WHERE
										ReforecastEffectivePeriod = @ReforecastEffectivePeriodQ1)
END
ELSE
BEGIN
	PRINT ('@ReforecastEffectivePeriodQ1 is NULL - cannot determine Q1 reforecast quarter name.')
END


IF (@ReforecastEffectivePeriodQ2 IS NOT NULL)
BEGIN
	SET @ReforecastQuarterNameQ2 = (SELECT TOP 1
											ReforecastQuarterName 
										FROM
											dbo.Reforecast 
										WHERE
											ReforecastEffectivePeriod = @ReforecastEffectivePeriodQ2)
END
ELSE
BEGIN
	PRINT ('@ReforecastEffectivePeriodQ2 is NULL - cannot determine Q2 reforecast quarter name.')
END


IF (@ReforecastEffectivePeriodQ3 IS NOT NULL)
BEGIN
	SET @ReforecastQuarterNameQ3 = (SELECT TOP 1
											ReforecastQuarterName 
										FROM
											dbo.Reforecast 
										WHERE
											ReforecastEffectivePeriod = @ReforecastEffectivePeriodQ3)
END
ELSE
BEGIN
	PRINT ('@ReforecastEffectivePeriodQ3 is NULL - cannot determine Q3 reforecast quarter name.')
END
	
--------------------------------------------------------------------------
/*	COMMON Block to setup the Report Filter Tables		*/
--------------------------------------------------------------------------
	
CREATE TABLE #EntityFilterTable (PropertyFundKey Int NOT NULL)
CREATE TABLE #FunctionalDepartmentFilterTable (FunctionalDepartmentKey Int NOT NULL)
CREATE TABLE #ActivityTypeFilterTable (ActivityTypeKey Int NOT NULL)
CREATE TABLE #AllocationRegionFilterTable (AllocationRegionKey Int NOT NULL)
CREATE TABLE #AllocationSubRegionFilterTable	(AllocationRegionKey Int NOT NULL)
CREATE TABLE #MajorAccountCategoryFilterTable (GlAccountCategoryKey Int NOT NULL)	
CREATE TABLE #MinorAccountCategoryFilterTable (GlAccountCategoryKey Int NOT NULL)	
CREATE TABLE #OriginatingRegionFilterTable (OriginatingRegionKey Int NOT NULL)
CREATE TABLE #OriginatingSubRegionFilterTable (OriginatingRegionKey Int NOT NULL)	
CREATE TABLE #CategoryActivityGroupFilterTable (GlAccountCategoryKey Int NOT NULL, ActivityTypeKey Int NULL)	

CREATE UNIQUE CLUSTERED INDEX IX_CL ON #EntityFilterTable (PropertyFundKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #FunctionalDepartmentFilterTable (FunctionalDepartmentKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #ActivityTypeFilterTable (ActivityTypeKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #AllocationRegionFilterTable (AllocationRegionKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #AllocationSubRegionFilterTable (AllocationRegionKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #MajorAccountCategoryFilterTable (GlAccountCategoryKey)	
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #MinorAccountCategoryFilterTable (GlAccountCategoryKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OriginatingRegionFilterTable (OriginatingRegionKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OriginatingSubRegionFilterTable (OriginatingRegionKey)
CREATE UNIQUE CLUSTERED INDEX IX_CL ON #CategoryActivityGroupFilterTable (GlAccountCategoryKey, ActivityTypeKey)
	
IF (@EntityList IS NOT NULL)
	BEGIN
	Insert Into #EntityFilterTable
	Select pf.PropertyFundKey
	From dbo.Split(@_EntityList) t1
		INNER JOIN PropertyFund pf ON pf.PropertyFundName = t1.item
	
	END
	
IF (@FunctionalDepartmentList IS NOT NULL)
	BEGIN
	Insert Into #FunctionalDepartmentFilterTable
	Select fd.FunctionalDepartmentKey 
	From dbo.Split(@_FunctionalDepartmentList) t1
		INNER JOIN FunctionalDepartment fd ON fd.FunctionalDepartmentName = t1.item
	END

IF 	(@ActivityTypeList IS NOT NULL)
	BEGIN
    INSERT INTO #ActivityTypeFilterTable
    SELECT at.ActivityTypeKey 
    FROM dbo.Split(@_ActivityTypeList) t1
		INNER JOIN ActivityType at ON at.ActivityTypeName = t1.item
	END
	
IF (@AllocationRegionList IS NOT NULL)
	BEGIN
	Insert Into #AllocationRegionFilterTable
	Select ar.AllocationRegionKey 
	From dbo.Split(@_AllocationRegionList) t1
		INNER JOIN AllocationRegion ar ON ar.RegionName = t1.item
	END

IF (@AllocationSubRegionList IS NOT NULL)
	BEGIN
	Insert Into #AllocationSubRegionFilterTable
	Select ar.AllocationRegionKey
	From dbo.Split(@_AllocationSubRegionList) t1
		INNER JOIN AllocationRegion ar ON ar.SubRegionName = t1.item
	END

IF (@MajorAccountCategoryList IS NOT NULL)
	BEGIN
	Insert Into #MajorAccountCategoryFilterTable
	Select gl.GlAccountCategoryKey 
	From dbo.Split(@_MajorAccountCategoryList) t1
		INNER JOIN GlAccountCategory gl ON gl.MajorCategoryName = t1.item
	END
	
IF 	(@MinorAccountCategoryList IS NOT NULL)
	BEGIN
    INSERT INTO #MinorAccountCategoryFilterTable
    SELECT gl.GlAccountCategoryKey 
    FROM dbo.Split(@MinorAccountCategoryList) t1
		INNER JOIN GlAccountCategory gl ON gl.MinorCategoryName = t1.item
	END	

IF (@OriginatingRegionList IS NOT NULL)
	BEGIN
	Insert Into #OriginatingRegionFilterTable
	Select orr.OriginatingRegionKey 
	From dbo.Split(@_OriginatingRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.RegionName = t1.item
	END

IF (@OriginatingSubRegionList IS NOT NULL)
	BEGIN
	INSERT INTO #OriginatingSubRegionFilterTable
	SELECT orr.OriginatingRegionKey  
	From dbo.Split(@OriginatingSubRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.SubRegionName = t1.item
	END		
	
IF EXISTS(SELECT * FROM @CategoryActivityGroups)
	BEGIN
	INSERT INTO #CategoryActivityGroupFilterTable
	SELECT gl.GlAccountCategoryKey, at.ActivityTypeKey 
	FROM @CategoryActivityGroups cag
		CROSS APPLY dbo.Split(cag.MinorAccountCategoryList) t1
		OUTER APPLY dbo.Split(cag.ActivityTypeList) t2
		INNER JOIN GlAccountCategory gl ON gl.MinorCategoryName = t1.item 
		LEFT OUTER JOIN ActivityType at ON at.ActivityTypeName = t2.item
	END
--------------------------------------------------------------------------
/*	COMMON END															*/
--------------------------------------------------------------------------

IF 	OBJECT_ID('tempdb..#ExpenseCzarTotalComparisonDetail') IS NOT NULL
    DROP TABLE #ExpenseCzarTotalComparisonDetail

CREATE TABLE #ExpenseCzarTotalComparisonDetail
(	
	GlAccountCategoryKey	INT,
    FunctionalDepartmentKey	INT,
    AllocationRegionKey		INT,
    PropertyFundKey			INT,
	SourceName				VARCHAR(50),
	EntryDate				VARCHAR(10),
	[User]					NVARCHAR(20),
	[Description]			NVARCHAR(60),
	AdditionalDescription	NVARCHAR(4000),
	PropertyFundCode		VARCHAR(6) DEFAULT(''), --Varchar, for this helps to keep reports size smaller
	OriginatingRegionCode	VARCHAR(15) DEFAULT(''), --Varchar, for this helps to keep reports size smaller
	GlAccountKey			INT NULL,
	CalendarPeriod			Varchar(6) DEFAULT(''),

	--Month to date	
	MtdGrossActual			MONEY,
	MtdGrossBudget			MONEY,
	MtdGrossReforecastQ1	MONEY,
	MtdGrossReforecastQ2	MONEY,
	MtdGrossReforecastQ3	MONEY,
	MtdNetActual			MONEY,
	MtdNetBudget			MONEY,
	MtdNetReforecastQ1		MONEY,
	MtdNetReforecastQ2		MONEY,
	MtdNetReforecastQ3		MONEY,
	
	--Year to date
	YtdGrossActual			MONEY,	
	YtdGrossBudget			MONEY, 
	YtdGrossReforecastQ1	MONEY,
	YtdGrossReforecastQ2	MONEY,
	YtdGrossReforecastQ3	MONEY,
	YtdNetActual			MONEY, 
	YtdNetBudget			MONEY, 
	YtdNetReforecastQ1		MONEY,
	YtdNetReforecastQ2		MONEY,
	YtdNetReforecastQ3		MONEY,

	--Annual	
	AnnualGrossBudget		MONEY,
	AnnualGrossReforecastQ1	MONEY,
	AnnualGrossReforecastQ2	MONEY,
	AnnualGrossReforecastQ3	MONEY,

	AnnualNetBudget			MONEY,
	AnnualNetReforecastQ1	MONEY,
	AnnualNetReforecastQ2	MONEY,
	AnnualNetReforecastQ3	MONEY,


	--Annual estimated
	AnnualEstGrossBudget	MONEY,
	AnnualEstGrossReforecastQ1 MONEY,
	AnnualEstGrossReforecastQ2 MONEY,
	AnnualEstGrossReforecastQ3 MONEY,
	
	AnnualEstNetBudget		MONEY,
	AnnualEstNetReforecastQ1 MONEY,
	AnnualEstNetReforecastQ2 MONEY,
	AnnualEstNetReforecastQ3 MONEY
)

DECLARE @cmdString VARCHAR(8000)

--Get actual information
SET @cmdString = (SELECT '
	
INSERT INTO #ExpenseCzarTotalComparisonDetail
SELECT 
	gac.GlAccountCategoryKey,
    pa.FunctionalDepartmentKey,
    pa.AllocationRegionKey,
    pa.PropertyFundKey,
    s.SourceName,
    CONVERT(varchar(10),ISNULL(pa.EntryDate,''''), 101) as EntryDate,
    ISNULL(pa.[User], '''') [User],
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.Description ELSE '''' END as Description,
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.AdditionalDescription ELSE '''' END as AdditionalDescription,
    ISNULL(pa.PropertyFundCode, '''') PropertyFundCode,
    ISNULL(pa.OriginatingRegionCode, '''') OriginatingRegionCode,
    pa.GlAccountKey,
    c.CalendarPeriod,
    
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as MtdGrossActual,
	NULL as MtdGrossBudget,
	
	' + /*--  --------------------------*/ + '
	
	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdGrossReforecastQ1,
	
	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdGrossReforecastQ2,

	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdGrossReforecastQ3,	
	
	' + /*--  --------------------------*/ + '
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as MtdNetActual,
	NULL as MtdNetBudget,
	
	' + /*--  --------------------------*/ + '
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdNetReforecastQ1,

	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdNetReforecastQ2,

	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdNetReforecastQ3,

	' + /*--  --------------------------*/ + '
	
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as YtdGrossActual,
	NULL as YtdGrossBudget,
	
	' + /*--  --------------------------*/ + '
	
	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdGrossReforecastQ1,

	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdGrossReforecastQ2,

	SUM(
		er.Rate * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdGrossReforecastQ3,

	')
	
	DECLARE @cmdString2 VARCHAR(8000)
	SET @cmdString2 = (SELECT '

	' + /*--  --------------------------*/ + '
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as YtdNetActual,
	NULL as YtdNetBudget,
	
	' + /*--  --------------------------*/ + '
	
	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdNetReforecastQ1,

	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdNetReforecastQ2,

	SUM(
		er.Rate * r.MultiplicationFactor * 
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdNetReforecastQ3,
	
	' + /*--  --------------------------*/ + '
	
	NULL as AnnualGrossBudget,
	
	' + /*--  --------------------------*/ + '
	
	SUM(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ1,

	SUM(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ2,

	SUM(
		er.Rate *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ3,

	' + /*--  --------------------------*/ + '

	NULL as AnnualNetBudget,
	
	' + /*--  --------------------------*/ + '
	
    SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualNetReforecastQ1,

    SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualNetReforecastQ2,

    SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualNetReforecastQ3,

	' + /*--  --------------------------*/ + '
		
	SUM(
        er.Rate *
        CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pa.LocalActual
        ELSE 
			0
        END
	) as AnnualEstGrossBudget,
	
	' + /*--  --------------------------*/ + '
	
	')
	
	DECLARE @cmdString3 VARCHAR(8000)
	SET @cmdString3 = (SELECT '
	
	SUM(
            er.Rate *
            CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstGrossReforecastQ1,

	SUM(
            er.Rate *
            CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstGrossReforecastQ2,

	SUM(
            er.Rate *
            CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstGrossReforecastQ3,

	' + /*--  --------------------------*/ + '

    SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pa.LocalActual
        ELSE 
			0
        END
    ) as AnnualEstNetBudget,
    
    ' + /*--  --------------------------*/ + '
    
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstNetReforecastQ1,
	
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstNetReforecastQ2,
	
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003, 201006, 201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualEstNetReforecastQ3	
	
	' + /*--  --------------------------*/ + '
	
FROM
	ProfitabilityActual pa

	INNER JOIN Overhead oh ON oh.OverheadKey = pa.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1

		INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
				WHEN @TranslationTypeName = 'EU Corporate' THEN 'pa.EUCorporateGlAccountCategoryKey' 
				WHEN @TranslationTypeName = 'US Property' THEN 'pa.USPropertyGlAccountCategoryKey' 
				WHEN @TranslationTypeName = 'US Fund' THEN 'pa.USFundGlAccountCategoryKey' 
				WHEN @TranslationTypeName = 'EU Property' THEN 'pa.EUPropertyGlAccountCategoryKey' 
				WHEN @TranslationTypeName = 'US Corporate' THEN 'pa.USCorporateGlAccountCategoryKey' 
				WHEN @TranslationTypeName = 'Development' THEN 'pa.DevelopmentGlAccountCategoryKey' 
				WHEN @TranslationTypeName = 'EU Fund' THEN 'pa.EUFundGlAccountCategoryKey' 
				WHEN @TranslationTypeName = 'Global' THEN 'pa.GlobalGlAccountCategoryKey' 
				ELSE 'break:not valid TranslationTypeName' END + '
				AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')
				
	    INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pa.LocalCurrencyKey AND er.CalendarKey = pa.CalendarKey
	    INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
	    INNER JOIN Calendar c ON  c.CalendarKey = pa.CalendarKey
	    INNER JOIN Source s ON s.SourceKey = pa.SourceKey
	    INNER JOIN Reimbursable r ON  r.ReimbursableKey = pa.ReimbursableKey '
	    
    + CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pa.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pa.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pa.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pa.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pa.PropertyFundKey' ELSE '' END + 
	+ CASE WHEN EXISTS(SELECT * FROM @CategoryActivityGroups) THEN ' INNER JOIN #CategoryActivityGroupFilterTable cag ON cag.GlAccountCategoryKey = gac.GlAccountCategoryKey AND (cag.ActivityTypeKey IS NULL OR cag.ActivityTypeKey = pa.ActivityTypeKey)' ELSE '' END + '
			
WHERE  1 = 1
    AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select t1.FunctionalDepartmentKey From #FunctionalDepartmentFilterTable t1)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select t1.ActivityTypeKey From #ActivityTypeFilterTable t1)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select t1.PropertyFundKey From #EntityFilterTable t1)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select t1.AllocationRegionKey From #AllocationRegionFilterTable t1)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select t1.AllocationRegionKey From #AllocationSubRegionFilterTable t1)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select t1.GlAccountCategoryKey From #MajorAccountCategoryFilterTable t1)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select t1.GlAccountCategoryKey From #MinorAccountCategoryFilterTable t1)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OriginatingRegionFilterTable t1)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OriginatingSubRegionFilterTable t1)' END +
'
GROUP BY
	gac.GlAccountCategoryKey,
    pa.FunctionalDepartmentKey,
    pa.AllocationRegionKey,
    pa.PropertyFundKey,
    s.SourceName,
	CONVERT(varchar(10),ISNULL(pa.EntryDate,''''), 101),
	pa.[User],
	CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.Description ELSE '''' END,
	CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.AdditionalDescription ELSE '''' END,
	ISNULL(pa.PropertyFundCode, ''''),
	ISNULL(pa.OriginatingRegionCode, ''''),
	pa.GlAccountKey,
	c.CalendarPeriod

')

IF (LEN(@cmdString) > 7995 OR LEN(@cmdString2) > 7995 OR LEN(@cmdString3) > 7995)
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LTRIM(RTRIM(LEN(@cmdString)))) + ' + ' + STR(LTRIM(RTRIM(LEN(@cmdString2)))) + ' + ' + STR(LTRIM(RTRIM(LEN(@cmdString3)))))

PRINT @cmdString
PRINT @cmdString2
PRINT @cmdString3

EXEC (@cmdString + @cmdString2 + @cmdString3)

-- Get budget information
SET @cmdString = (Select '	

INSERT INTO #ExpenseCzarTotalComparisonDetail
SELECT 
	gac.GlAccountCategoryKey,
	pb.FunctionalDepartmentKey,
	pb.AllocationRegionKey,
	pb.PropertyFundKey,
	s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pb.GlAccountKey END,
	'''' as CalendarPeriod,
    
   NULL as MtdGrossActual,
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as MtdGrossBudget,	
	NULL as MtdGrossReforecastQ1,
	NULL as MtdGrossReforecastQ2,
	NULL as MtdGrossReforecastQ3,
	
	NULL as MtdNetActual,
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pb.LocalBudget
        ELSE 
			0
        END
    ) as MtdNetBudget,    
	NULL as MtdNetReforecastQ1,
	NULL as MtdNetReforecastQ2,
	NULL as MtdNetReforecastQ3,
	
	NULL as YtdGrossActual,	
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as YtdGrossBudget, 
	NULL as YtdGrossReforecastQ1,
	NULL as YtdGrossReforecastQ2,
	NULL as YtdGrossReforecastQ3,
	
	NULL as YtdNetActual, 
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pb.LocalBudget
        ELSE 
			0
        END
    ) as YtdNetBudget, 
	NULL as YtdNetReforecastQ1,
	NULL as YtdNetReforecastQ2,
	NULL as YtdNetReforecastQ3,
	
	SUM(er.Rate * pb.LocalBudget) as AnnualGrossBudget,
	NULL as AnnualGrossReforecastQ1,
	NULL as AnnualGrossReforecastQ2,
	NULL as AnnualGrossReforecastQ3,

	SUM(er.Rate * r.MultiplicationFactor * pb.LocalBudget) as AnnualNetBudget,
	NULL as AnnualNetReforecastQ1,
	NULL as AnnualNetReforecastQ2,
	NULL as AnnualNetReforecastQ3,

	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as AnnualEstGrossBudget,
	NULL as AnnualEstGrossReforecastQ1,
	NULL as AnnualEstGrossReforecastQ2,
	NULL as AnnualEstGrossReforecastQ3,

	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pb.LocalBudget
        ELSE 
			0
        END
    ) as AnnualEstNetBudget,
	NULL as AnnualEstNetReforecastQ1,
	NULL as AnnualEstNetReforecastQ2,
	NULL as AnnualEstNetReforecastQ3
	
FROM
	ProfitabilityBudget pb

	INNER JOIN Overhead oh ON oh.OverheadKey = pb.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
		
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
		WHEN @TranslationTypeName = 'EU Corporate' THEN 'pb.EUCorporateGlAccountCategoryKey' 
		WHEN @TranslationTypeName = 'US Property' THEN 'pb.USPropertyGlAccountCategoryKey' 
		WHEN @TranslationTypeName = 'US Fund' THEN 'pb.USFundGlAccountCategoryKey' 
		WHEN @TranslationTypeName = 'EU Property' THEN 'pb.EUPropertyGlAccountCategoryKey' 
		WHEN @TranslationTypeName = 'US Corporate' THEN 'pb.USCorporateGlAccountCategoryKey' 
		WHEN @TranslationTypeName = 'Development' THEN 'pb.DevelopmentGlAccountCategoryKey' 
		WHEN @TranslationTypeName = 'EU Fund' THEN 'pb.EUFundGlAccountCategoryKey' 
		WHEN @TranslationTypeName = 'Global' THEN 'pb.GlobalGlAccountCategoryKey' 
		ELSE 'break:not valid TranslationTypeName' END + '
		AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')	

    INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pb.LocalCurrencyKey AND er.CalendarKey = pb.CalendarKey
    INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON  c.CalendarKey = pb.CalendarKey
    INNER JOIN Source s ON s.SourceKey = pb.SourceKey
    INNER JOIN Reimbursable r ON  r.ReimbursableKey = pb.ReimbursableKey '
	    
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pb.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pb.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pb.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pb.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pb.PropertyFundKey' ELSE '' END + 
	+ CASE WHEN EXISTS(SELECT * FROM @CategoryActivityGroups) THEN ' INNER JOIN #CategoryActivityGroupFilterTable cag ON cag.GlAccountCategoryKey = gac.GlAccountCategoryKey AND (cag.ActivityTypeKey IS NULL OR cag.ActivityTypeKey = pb.ActivityTypeKey)' ELSE '' END + '

WHERE  1 = 1 
    AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'
GROUP BY
	gac.GlAccountCategoryKey,
    pb.FunctionalDepartmentKey,
    pb.AllocationRegionKey,
    pb.PropertyFundKey,
    s.SourceName,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pb.GlAccountKey END
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)

----------------------------------------------------------------------------------------------------
-- Get Q1 reforecast information
SET @cmdString = (Select '	

INSERT INTO #ExpenseCzarTotalComparisonDetail
SELECT 
	gac.GlAccountCategoryKey,
    pr.FunctionalDepartmentKey,
    pr.AllocationRegionKey,
    pr.PropertyFundKey,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END,
	'''' as CalendarPeriod,
    
	NULL as MtdGrossActual,
	NULL as MtdGrossBudget,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecastQ1,
	NULL as MtdGrossReforecastQ2,
	NULL as MtdGrossReforecastQ3,
	
	NULL as MtdNetActual,
	NULL as MtdNetBudget,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as MtdNetReforecastQ1,
	NULL as MtdNetReforecastQ2,
	NULL as MtdNetReforecastQ3,
	
	NULL as YtdGrossActual,	
	NULL as YtdGrossBudget, 
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecastQ1,
	NULL as YtdGrossReforecastQ2,
	NULL as YtdGrossReforecastQ3,
	
	NULL as YtdNetActual, 
	NULL as YtdNetBudget, 
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as YtdNetReforecastQ1,
    NULL as YtdNetReforecastQ2,
    NULL as YtdNetReforecastQ3,
	
	NULL as AnnualGrossBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    'SUM(er.Rate * pr.LocalReforecast) as AnnualGrossReforecastQ1,
    NULL as AnnualGrossReforecastQ2,
    NULL as AnnualGrossReforecastQ3,

	NULL as AnnualNetBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    'SUM (er.Rate * r.MultiplicationFactor * pr.LocalReforecast)as AnnualNetReforecastQ1,
    NULL as AnnualNetReforecastQ2,
    NULL as AnnualNetReforecastQ3,

	NULL as AnnualEstGrossBudget,
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstGrossReforecastQ1,
	NULL as AnnualEstGrossReforecastQ2,
	NULL as AnnualEstGrossReforecastQ3,

	NULL as AnnualEstNetBudget,
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstNetReforecastQ1,
    NULL as AnnualEstNetReforecastQ2,
    NULL as AnnualEstNetReforecastQ3

FROM
	ProfitabilityReforecast pr

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
		
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid TranslationTypeName' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')	

    INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
    INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON  c.CalendarKey = pr.CalendarKey
    INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
    INNER JOIN Source s ON s.SourceKey = pr.SourceKey
    INNER JOIN Reimbursable r ON  r.ReimbursableKey = pr.ReimbursableKey '
	    
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pr.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey' ELSE '' END + 
	+ CASE WHEN EXISTS(SELECT * FROM @CategoryActivityGroups) THEN ' INNER JOIN #CategoryActivityGroupFilterTable cag ON cag.GlAccountCategoryKey = gac.GlAccountCategoryKey AND (cag.ActivityTypeKey IS NULL OR cag.ActivityTypeKey = pr.ActivityTypeKey)' ELSE '' END + '

WHERE  1 = 1 
	AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ1,10,0) + '
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'
GROUP BY
	gac.GlAccountCategoryKey,
    pr.FunctionalDepartmentKey,
    pr.AllocationRegionKey,
    pr.PropertyFundKey,
    s.SourceName,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END

')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)


----------------------------------------------------------------------------------------------------
-- Get Q2 reforecast information
SET @cmdString = (Select '	

INSERT INTO #ExpenseCzarTotalComparisonDetail
SELECT 
	gac.GlAccountCategoryKey,
    pr.FunctionalDepartmentKey,
    pr.AllocationRegionKey,
    pr.PropertyFundKey,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END,
	'''' as CalendarPeriod,
    
	NULL as MtdGrossActual,
	NULL as MtdGrossBudget,
	NULL as MtdGrossReforecastQ1,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecastQ2,
	NULL as MtdGrossReforecastQ3,
	
	NULL as MtdNetActual,
	NULL as MtdNetBudget,
	NULL as MtdNetReforecastQ1,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as MtdNetReforecastQ2,
	NULL as MtdNetReforecastQ3,
	
	NULL as YtdGrossActual,	
	NULL as YtdGrossBudget,
	NULL as YtdGrossReforecastQ1,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecastQ2,
	NULL as YtdGrossReforecastQ3,
	
	NULL as YtdNetActual, 
	NULL as YtdNetBudget,
	NULL as YtdNetReforecastQ1,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as YtdNetReforecastQ2,
    NULL as YtdNetReforecastQ3,
	
	NULL as AnnualGrossBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '
    NULL as AnnualGrossReforecastQ1,
    SUM(er.Rate * pr.LocalReforecast) as AnnualGrossReforecastQ2,    
    NULL as AnnualGrossReforecastQ3,

	NULL as AnnualNetBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '
    NULL as AnnualNetReforecastQ1,
    SUM (er.Rate * r.MultiplicationFactor * pr.LocalReforecast)as AnnualNetReforecastQ2,
    NULL as AnnualNetReforecastQ3,

	NULL as AnnualEstGrossBudget,
	NULL as AnnualEstGrossReforecastQ1,
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstGrossReforecastQ2,
	NULL as AnnualEstGrossReforecastQ3,

	NULL as AnnualEstNetBudget,
	NULL as AnnualEstNetReforecastQ1,
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstNetReforecastQ2,
    NULL as AnnualEstNetReforecastQ3

FROM
	ProfitabilityReforecast pr

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
		
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid TranslationTypeName' END + '
			AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')	

    INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
    INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON  c.CalendarKey = pr.CalendarKey
    INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
    INNER JOIN Source s ON s.SourceKey = pr.SourceKey
    INNER JOIN Reimbursable r ON  r.ReimbursableKey = pr.ReimbursableKey '
	    
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pr.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey' ELSE '' END + 
	+ CASE WHEN EXISTS(SELECT * FROM @CategoryActivityGroups) THEN ' INNER JOIN #CategoryActivityGroupFilterTable cag ON cag.GlAccountCategoryKey = gac.GlAccountCategoryKey AND (cag.ActivityTypeKey IS NULL OR cag.ActivityTypeKey = pr.ActivityTypeKey)' ELSE '' END + '

WHERE  1 = 1 
	AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ2,10,0) + '
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'
GROUP BY
	gac.GlAccountCategoryKey,
    pr.FunctionalDepartmentKey,
    pr.AllocationRegionKey,
    pr.PropertyFundKey,
    s.SourceName,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END 
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)


----------------------------------------------------------------------------------------------------
-- Get Q3 reforecast information
SET @cmdString = (Select '	

INSERT INTO #ExpenseCzarTotalComparisonDetail
SELECT 
	gac.GlAccountCategoryKey,
    pr.FunctionalDepartmentKey,
    pr.AllocationRegionKey,
    pr.PropertyFundKey,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END,
    '''' as CalendarPeriod,
    
	NULL as MtdGrossActual,
	NULL as MtdGrossBudget,
	NULL as MtdGrossReforecastQ1,
	NULL as MtdGrossReforecastQ2,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecastQ3,
	
	NULL as MtdNetActual,
	NULL as MtdNetBudget,
	NULL as MtdNetReforecastQ1,
	NULL as MtdNetReforecastQ2,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as MtdNetReforecastQ3,
	
	NULL as YtdGrossActual,	
	NULL as YtdGrossBudget,
	NULL as YtdGrossReforecastQ1,
	NULL as YtdGrossReforecastQ2,
	SUM(
		er.Rate * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecastQ3,
	
	NULL as YtdNetActual, 
	NULL as YtdNetBudget,
	NULL as YtdNetReforecastQ1,
	NULL as YtdNetReforecastQ2,
    SUM(
        er.Rate * r.MultiplicationFactor * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as YtdNetReforecastQ3,
	
	NULL as AnnualGrossBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '
    NULL as AnnualGrossReforecastQ1,
    NULL as AnnualGrossReforecastQ2,
    SUM(er.Rate * pr.LocalReforecast) as AnnualGrossReforecastQ3,

	NULL as AnnualNetBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '
    NULL as AnnualNetReforecastQ1,
    NULL as AnnualNetReforecastQ2,
    SUM (er.Rate * r.MultiplicationFactor * pr.LocalReforecast)as AnnualNetReforecastQ3,

	NULL as AnnualEstGrossBudget,
	NULL as AnnualEstGrossReforecastQ1,
	NULL as AnnualEstGrossReforecastQ2,
	SUM(
		er.Rate *
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstGrossReforecastQ3,

	NULL as AnnualEstNetBudget,
	NULL as AnnualEstNetReforecastQ1,
	NULL as AnnualEstNetReforecastQ2,
	SUM(
        er.Rate * r.MultiplicationFactor *
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'
				 OR (
						LEFT(pr.ReferenceCode,3) = ''BC:''
						AND ' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' IN (201003, 201006, 201009)
					)
				 ) THEN
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstNetReforecastQ3

FROM
	ProfitabilityReforecast pr

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
		
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
		WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
		WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
		WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
		WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
		WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
		WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
		WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
		WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
		ELSE 'break:not valid TranslationTypeName' END + '
		AND gac.FeeOrExpense IN (''EXPENSE'',''UNKNOWN'')	

    INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
    INNER JOIN Currency dc ON  er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON  c.CalendarKey = pr.CalendarKey
    INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
    INNER JOIN Source s ON s.SourceKey = pr.SourceKey
    INNER JOIN Reimbursable r ON  r.ReimbursableKey = pr.ReimbursableKey '
	    
	+ CASE WHEN @AllocationRegionList IS NOT NULL OR @AllocationSubRegionList IS NOT NULL THEN ' INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey ' ELSE '' END +
    + CASE WHEN @OriginatingRegionList IS NOT NULL OR @OriginatingSubRegionList IS NOT NULL THEN ' INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey ' ELSE '' END +
    + CASE WHEN @FunctionalDepartmentList IS NOT NULL THEN ' INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey ' ELSE '' END +
    + CASE WHEN @ActivityTypeList IS NOT NULL THEN ' INNER JOIN ActivityType a ON  a.ActivityTypeKey = pr.ActivityTypeKey' ELSE '' END +
	+ CASE WHEN @EntityList IS NOT NULL THEN ' INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey' ELSE '' END + 
	+ CASE WHEN EXISTS(SELECT * FROM @CategoryActivityGroups) THEN ' INNER JOIN #CategoryActivityGroupFilterTable cag ON cag.GlAccountCategoryKey = gac.GlAccountCategoryKey AND (cag.ActivityTypeKey IS NULL OR cag.ActivityTypeKey = pr.ActivityTypeKey)' ELSE '' END + '

WHERE  1 = 1 
	AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ3,10,0) + '
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'
GROUP BY
	gac.GlAccountCategoryKey,
    pr.FunctionalDepartmentKey,
    pr.AllocationRegionKey,
    pr.PropertyFundKey,
    s.SourceName,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN NULL ELSE pr.GlAccountKey END 
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT @cmdString
EXEC (@cmdString)

------------------------------------------------------------------------------------------------------------------------------------

CREATE CLUSTERED INDEX IX ON #ExpenseCzarTotalComparisonDetail(
	PropertyFundKey,
	AllocationRegionKey,
	FunctionalDepartmentKey,
	GlAccountCategoryKey
)

SELECT 
	gac.AccountSubTypeName AS ExpenseType,
	gac.MajorCategoryName AS MajorExpenseCategoryName,
    gac.MinorCategoryName AS MinorExpenseCategoryName,    
    fd.FunctionalDepartmentName AS FunctionalDepartmentName,
    fd.FunctionalDepartmentName AS FunctionalDepartmentFilterName,
    ar.SubRegionName AS AllocationSubRegionName,
    ar.SubRegionName AS AllocationSubRegionFilterName,
    pf.PropertyFundName AS EntityName,
    res.CalendarPeriod AS ActualsExpensePeriod,
    res.EntryDate,
    res.[User],
    res.[Description],
    res.AdditionalDescription,
    res.SourceName AS SourceName,
    res.PropertyFundCode,
    res.OriginatingRegionCode,
    ISNULL(ga.Code, '') GlAccountCode,
    ISNULL(ga.Name, '') GlAccountName,    

	--Month to date    
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(MtdGrossActual,0) ELSE ISNULL(MtdNetActual,0) END) AS MtdActual,
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(MtdGrossBudget,0) ELSE ISNULL(MtdNetBudget,0) END) AS MtdOriginalBudget,
	
	-------------------------------
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ1 
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ1
		END,0) 
	END) 
	AS MtdReforecastQ1,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ2
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ2
		END,0) 
	END) 
	AS MtdReforecastQ2,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ3
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ3
		END,0) 
	END) 
	AS MtdReforecastQ3,
	-------------------------------
	
	-------------------------------
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ1
		END, 0) - ISNULL(MtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ1
		END, 0) - ISNULL(MtdNetActual, 0) 
	END) 
	AS MtdVarianceQ1,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ2
		END, 0) - ISNULL(MtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ2
		END, 0) - ISNULL(MtdNetActual, 0) 
	END) 
	AS MtdVarianceQ2,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecastQ3
		END, 0) - ISNULL(MtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecastQ3
		END, 0) - ISNULL(MtdNetActual, 0) 
	END) 
	AS MtdVarianceQ3,
	-------------------------------
	
	--Year to date
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(YtdGrossActual,0) ELSE ISNULL(YtdNetActual,0) END) AS YtdActual,	
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(YtdGrossBudget,0) ELSE ISNULL(YtdNetBudget,0) END) AS YtdOriginalBudget,
	
	-------------------------------
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ1
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ1
		END,0) 
	END) 
	AS YtdReforecastQ1,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ2
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ2
		END,0) 
	END) 
	AS YtdReforecastQ2,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecastQ3
		END,0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecastQ3
		END,0) 
	END) 
	AS YtdReforecastQ3,
	-------------------------------
	
	-------------------------------
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget
		ELSE 
			YtdGrossReforecastQ1
		END, 0) - ISNULL(YtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget
		ELSE 
			YtdNetReforecastQ1
		END, 0) - ISNULL(YtdNetActual, 0) 
	END) 
	AS YtdVarianceQ1,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget
		ELSE 
			YtdGrossReforecastQ2
		END, 0) - ISNULL(YtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget
		ELSE 
			YtdNetReforecastQ2
		END, 0) - ISNULL(YtdNetActual, 0) 
	END) 
	AS YtdVarianceQ2,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget
		ELSE 
			YtdGrossReforecastQ3
		END, 0) - ISNULL(YtdGrossActual, 0) 
	ELSE 
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget
		ELSE 
			YtdNetReforecastQ3
		END, 0) - ISNULL(YtdNetActual, 0) 
	END) 
	AS YtdVarianceQ3,	
	-------------------------------
	
	--Annual
	SUM(CASE WHEN (@IsGross = 1) THEN ISNULL(AnnualGrossBudget,0) ELSE ISNULL(AnnualNetBudget,0) END) AS AnnualOriginalBudget,	

	-------------------------------
	SUM(CASE WHEN (@IsGross = 1) THEN
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN
			AnnualGrossBudget
		ELSE
			AnnualGrossReforecastQ1
		END,0)
	ELSE
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN
			AnnualNetBudget
		ELSE
			AnnualNetReforecastQ1
		END,0)
	END)
	AS AnnualReforecastQ1,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN
			AnnualGrossBudget
		ELSE
			AnnualGrossReforecastQ2
		END,0)
	ELSE
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN
			AnnualNetBudget
		ELSE
			AnnualNetReforecastQ2
		END,0)
	END)
	AS AnnualReforecastQ2,
	--
	SUM(CASE WHEN (@IsGross = 1) THEN
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN
			AnnualGrossBudget
		ELSE
			AnnualGrossReforecastQ3
		END,0)
	ELSE
		ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN
			AnnualNetBudget
		ELSE
			AnnualNetReforecastQ3
		END,0)
	END)
	AS AnnualReforecastQ3
	-------------------------------
INTO
	#Output	
FROM
	#ExpenseCzarTotalComparisonDetail res
	INNER JOIN PropertyFund pf ON pf.PropertyFundKey = res.PropertyFundKey
	INNER JOIN AllocationRegion ar ON ar.AllocationRegionKey = res.AllocationRegionKey
	INNER JOIN FunctionalDepartment fd ON fd.FunctionalDepartmentKey = res.FunctionalDepartmentKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = res.GlAccountCategoryKey 
	LEFT OUTER JOIN GlAccount ga ON ga.GlAccountKey = res.GlAccountKey 
GROUP BY
	gac.AccountSubTypeName,
	gac.MajorCategoryName,
    gac.MinorCategoryName,
    fd.FunctionalDepartmentName,
    ar.SubRegionName,
    pf.PropertyFundName,
    res.CalendarPeriod,
    res.EntryDate,
    res.[User],
    res.[Description],
    res.AdditionalDescription,
    res.SourceName,
    res.PropertyFundCode,
    res.OriginatingRegionCode,
    ISNULL(ga.Code, ''),
    ISNULL(ga.Name, '')
	
--Output
SELECT
	ExpenseType,
	MajorExpenseCategoryName,
    MinorExpenseCategoryName,
    FunctionalDepartmentName,
    FunctionalDepartmentFilterName,
    AllocationSubRegionName,
    AllocationSubRegionFilterName,
    EntityName,
    ActualsExpensePeriod,
    EntryDate,
    [User],
    [Description],
    AdditionalDescription,
    SourceName,
    PropertyFundCode,
    OriginatingRegionCode,
    GlAccountCode,
    GlAccountName,    
    
	--Month to date    
	MtdActual,
	MtdOriginalBudget,
	--MtdReforecastQ1,
	--MtdReforecastQ2,
	MtdReforecastQ3,
	--MtdVarianceQ1,
	--MtdVarianceQ2,
	MtdVarianceQ3,
	
	--Year to date
	YtdActual,	
	YtdOriginalBudget,
	--YtdReforecastQ1,
	--YtdReforecastQ2,
	YtdReforecastQ3,
	--YtdVarianceQ1,
	--YtdVarianceQ2,
	YtdVarianceQ3,
	
	--Annual
	AnnualOriginalBudget,	
	AnnualReforecastQ1,
	AnnualReforecastQ2,
	AnnualReforecastQ3
FROM
	#Output
WHERE
	--Month to date    
	MtdActual <> 0.00 OR
	MtdOriginalBudget <> 0.00 OR
	--MtdReforecastQ1 <> 0.00 OR
	--MtdReforecastQ2 <> 0.00 OR
	MtdReforecastQ3 <> 0.00 OR
	--MtdVarianceQ1 <> 0.00 OR
	--MtdVarianceQ2 <> 0.00 OR
	MtdVarianceQ3 <> 0.00 OR
	
	--Year to date
	YtdActual <> 0.00 OR
	YtdOriginalBudget <> 0.00 OR
	--YtdReforecastQ1 <> 0.00 OR
	--YtdReforecastQ2 <> 0.00 OR
	YtdReforecastQ3 <> 0.00 OR
	--YtdVarianceQ1 <> 0.00 OR
	--YtdVarianceQ2 <> 0.00 OR
	YtdVarianceQ3 <> 0.00 OR
	
	--Annual
	AnnualOriginalBudget <> 0.00 OR
	AnnualReforecastQ1 <> 0.00 OR
	AnnualReforecastQ2 <> 0.00 OR
	AnnualReforecastQ3 <> 0.00

IF 	OBJECT_ID('tempdb..#ExpenseCzarTotalComparisonDetail') IS NOT NULL
    DROP TABLE #ExpenseCzarTotalComparisonDetail

IF 	OBJECT_ID('tempdb..#Output') IS NOT NULL
    DROP TABLE #Output

IF 	OBJECT_ID('tempdb..#EntityFilterTable') IS NOT NULL
	DROP TABLE #EntityFilterTable
	
IF 	OBJECT_ID('tempdb..#FunctionalDepartmentFilterTable') IS NOT NULL
	DROP TABLE #FunctionalDepartmentFilterTable
	
IF 	OBJECT_ID('tempdb..#ActivityTypeFilterTable') IS NOT NULL
	DROP TABLE #ActivityTypeFilterTable
	
IF 	OBJECT_ID('tempdb..#AllocationRegionFilterTable') IS NOT NULL
	DROP TABLE #AllocationRegionFilterTable
	
IF 	OBJECT_ID('tempdb..#AllocationSubRegionFilterTable') IS NOT NULL
	DROP TABLE #AllocationSubRegionFilterTable
	
IF 	OBJECT_ID('tempdb..#MajorAccountCategoryFilterTable') IS NOT NULL
	DROP TABLE #MajorAccountCategoryFilterTable
	
IF 	OBJECT_ID('tempdb..#MinorAccountCategoryFilterTable') IS NOT NULL
	DROP TABLE #MinorAccountCategoryFilterTable
	
IF 	OBJECT_ID('tempdb..#OriginatingRegionFilterTable') IS NOT NULL
	DROP TABLE #OriginatingRegionFilterTable
	
IF 	OBJECT_ID('tempdb..#OriginatingSubRegionFilterTable') IS NOT NULL
	DROP TABLE #OriginatingSubRegionFilterTable
	
IF 	OBJECT_ID('tempdb..#CategoryActivityGroupFilterTable') IS NOT NULL
	DROP TABLE #CategoryActivityGroupFilterTable


GO

/****** Object:  StoredProcedure [dbo].[stp_R_MissingExchangeRates]    Script Date: 12/08/2010 12:01:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[stp_R_MissingExchangeRates]
 
AS 
DECLARE @CurrencyCount Int

Select	DISTINCT
		'Actual' DataSource,
		Ca.CalendarDate,
		Scu.CurrencyCode LocalCurrencyCode,
		0 NumberOfCurrencies,
		0 NumberOfDestinationCurrencies
From
		ProfitabilityActual Pa
			INNER JOIN Calendar Ca ON Ca.CalendarKey = Pa.CalendarKey
			INNER JOIN Currency Scu ON Scu.CurrencyKey = Pa.LocalCurrencyKey
			LEFT OUTER JOIN ExchangeRate Ex ON pa.LocalCurrencyKey = Ex.SourceCurrencyKey
								AND pa.CalendarKey = Ex.CalendarKey
Where Ex.SourceCurrencyKey IS NULL
UNION ALL
Select	'Budget',
		Ca.CalendarDate,
		Scu.CurrencyCode LocalCurrencyCode,
		0 NumberOfCurrencies,
		0 NumberOfDestinationCurrencies
From
		ProfitabilityBudget Pb
			INNER JOIN Calendar Ca ON Ca.CalendarKey = Pb.CalendarKey
			INNER JOIN Currency Scu ON Scu.CurrencyKey = Pb.LocalCurrencyKey
			LEFT OUTER JOIN ExchangeRate Ex ON pb.LocalCurrencyKey = Ex.SourceCurrencyKey
								AND pb.CalendarKey = Ex.CalendarKey
Where Ex.SourceCurrencyKey IS NULL
Order By 1,2,3


GO

/****** Object:  StoredProcedure [dbo].[stp_R_Profitability]    Script Date: 12/08/2010 12:01:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER OFF
GO




CREATE PROCEDURE [dbo].[stp_R_Profitability]
	@ReportExpensePeriod INT = NULL,
	@ReforecastQuaterName VARCHAR(10) = NULL, --'Q1' or 'Q2' or 'Q3'
	@PreviousReforecastQuaterName VARCHAR(10) = 'Q1', --or 'Q2' or 'Q3'
	@DestinationCurrency VARCHAR(3) = NULL,
	@TranslationTypeName VARCHAR(50) = 'Global',
	@IsGross bit = 1,-- Dummy code required by common parameter code in DL
	@FunctionalDepartmentList TEXT = NULL,
	@ActivityTypeList TEXT = NULL,
	@EntityList TEXT = NULL,
	@MajorAccountCategoryList TEXT = NULL,
	@MinorAccountCategoryList TEXT = NULL,
	@AllocationRegionList TEXT = NULL,
	@AllocationSubRegionList TEXT = NULL,
	@OriginatingRegionList TEXT = NULL,
	@OriginatingSubRegionList TEXT = NULL,
	@OverheadCode Varchar(10)='ALLOC'
AS

/*
DECLARE @ReportExpensePeriod  AS INT,
        @DestinationCurrency  AS VARCHAR(3),
        @TranslationTypeName        VARCHAR(50),
        @ActivityType         VARCHAR(50),
        @Entity               VARCHAR(100),
        @@AllocationSubRegion     VARCHAR(50)
				
		
SET @ReportExpensePeriod = 201011
SET @DestinationCurrency = 'USD'
SET @TranslationTypeName = 'Global'
SET @ActivityType = NULL
SET @Entity = NULL
SET @AllocationSubRegion = NULL

EXEC stp_R_Profitability
	@ReportExpensePeriod = 201011,
	@TranslationTypeName = 'Global',
	@DestinationCurrency = 'USD',

	@FunctionalDepartmentList = 'Information Technologies',
	@AllocationRegionList = 'CHICAGO',
	@EntityList = 'Aldgate|Centrium (St Cathrine House/Pegasus)'
*/

DECLARE

	@_ReportExpensePeriod INT = @ReportExpensePeriod,
	@_ReforecastQuaterName VARCHAR(10) = @ReforecastQuaterName,
	@_PreviousReforecastQuaterName VARCHAR(10) = @PreviousReforecastQuaterName,
	@_DestinationCurrency VARCHAR(3) = @DestinationCurrency,
	@_TranslationTypeName VARCHAR(50) = @TranslationTypeName,
	@_FunctionalDepartmentList VARCHAR(8000) = @FunctionalDepartmentList,
	@_ActivityTypeList VARCHAR(8000) = @ActivityTypeList,
	@_EntityList VARCHAR(8000) = @EntityList,
	@_MajorAccountCategoryList VARCHAR(8000) = @MajorAccountCategoryList,
	@_MinorAccountCategoryList VARCHAR(8000) = @MinorAccountCategoryList,
	@_AllocationRegionList VARCHAR(8000) = @AllocationRegionList,
	@_AllocationSubRegionList VARCHAR(8000) = @AllocationSubRegionList,
	@_OriginatingRegionList VARCHAR(8000) = @OriginatingRegionList,
	@_OriginatingSubRegionList VARCHAR(8000) = @OriginatingSubRegionList	

IF LEN(@_FunctionalDepartmentList) > 7998 OR
	LEN(@_ActivityTypeList) > 7998 OR
	LEN(@_EntityList) > 7998 OR
	LEN(@_MajorAccountCategoryList) > 7998 OR
	LEN(@_MinorAccountCategoryList) > 7998 OR
	LEN(@_AllocationRegionList) > 7998 OR
	LEN(@_AllocationSubRegionList) > 7998 OR
	LEN(@_OriginatingRegionList) > 7998 OR
	LEN(@_OriginatingSubRegionList) > 7998
BEGIN
	RAISERROR('Filter List parameter is too big',9,1)
END
	
--------------------------------------------------------------------------
/*	COMMON Block to setup the Report Filter Variable defaults		*/
--------------------------------------------------------------------------

IF @ReportExpensePeriod IS NULL
	SET @ReportExpensePeriod = CAST(CAST(YEAR(GETDATE()) AS VARCHAR(4)) + REPLACE(STR(MONTH(GETDATE()),2 ),' ','0')AS INT)

IF @DestinationCurrency IS NULL
	SET @DestinationCurrency = 'USD'

IF 	@TranslationTypeName IS NULL
	SET @TranslationTypeName = 'Global'

DECLARE @CalendarYear AS INT
SET @CalendarYear = CAST(SUBSTRING(CAST(@ReportExpensePeriod AS VARCHAR(10)), 1, 4) AS INT)				

-- let latest reforecast (it will be zero if there is no data for the reforecast)
IF @ReforecastQuaterName IS NULL
	SET @ReforecastQuaterName = (SELECT TOP 1 ReforecastQuarterName 
									FROM dbo.Reforecast 
									WHERE ReforecastEffectivePeriod <= @ReportExpensePeriod AND 
										  ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4)
									ORDER BY ReforecastEffectivePeriod DESC)

DECLARE @ReforecastEffectivePeriod INT
SET @ReforecastEffectivePeriod = (SELECT TOP 1 ReforecastEffectivePeriod 
									FROM dbo.Reforecast 
									WHERE ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										  ReforecastQuarterName = @ReforecastQuaterName
									ORDER BY ReforecastEffectivePeriod)
									
-- set Q1 reforecast									
IF @PreviousReforecastQuaterName IS NULL
		SET @PreviousReforecastQuaterName = (SELECT TOP 1 ReforecastQuarterName 
									FROM dbo.Reforecast 
									WHERE ReforecastEffectivePeriod <= @ReportExpensePeriod AND 
										  ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4)
									ORDER BY ReforecastEffectivePeriod DESC)
									
DECLARE @PreviousReforecastEffectivePeriod INT																
SET @PreviousReforecastEffectivePeriod = (SELECT TOP 1 ReforecastEffectivePeriod  
									FROM dbo.Reforecast 
									WHERE ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										  ReforecastQuarterName = @PreviousReforecastQuaterName
									ORDER BY ReforecastEffectivePeriod)									

--------------------------------------------------------------------------
/*	COMMON Block to setup the Report Filter Tables		*/
--------------------------------------------------------------------------
	
	CREATE TABLE	#EntityFilterTable	(PropertyFundKey Int NOT NULL)
	CREATE TABLE	#FunctionalDepartmentFilterTable	(FunctionalDepartmentKey Int NOT NULL)
	CREATE TABLE	#ActivityTypeFilterTable(ActivityTypeKey Int NOT NULL)
	CREATE TABLE	#AllocationRegionFilterTable	(AllocationRegionKey Int NOT NULL)
	CREATE TABLE	#AllocationSubRegionFilterTable	(AllocationRegionKey Int NOT NULL)
	CREATE TABLE	#MajorAccountCategoryFilterTable(GlAccountCategoryKey Int NOT NULL)	
	CREATE TABLE	#MinorAccountCategoryFilterTable(GlAccountCategoryKey Int NOT NULL)	
	CREATE TABLE	#OriginatingRegionFilterTable	(OriginatingRegionKey Int NOT NULL)
	CREATE TABLE	#OriginatingSubRegionFilterTable	(OriginatingRegionKey Int NOT NULL)	
		
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #EntityFilterTable	(PropertyFundKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #FunctionalDepartmentFilterTable	(FunctionalDepartmentKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #ActivityTypeFilterTable(ActivityTypeKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #AllocationRegionFilterTable	(AllocationRegionKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #AllocationSubRegionFilterTable	(AllocationRegionKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #MajorAccountCategoryFilterTable(GlAccountCategoryKey)	
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #MinorAccountCategoryFilterTable(GlAccountCategoryKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OriginatingRegionFilterTable	(OriginatingRegionKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OriginatingSubRegionFilterTable	(OriginatingRegionKey)
	
IF (@EntityList IS NOT NULL)
	BEGIN
	Insert Into #EntityFilterTable
	Select pf.PropertyFundKey
	From dbo.Split(@_EntityList) t1
		INNER JOIN PropertyFund pf ON pf.PropertyFundName = t1.item
	
	END
	
IF (@FunctionalDepartmentList IS NOT NULL)
	BEGIN
	Insert Into #FunctionalDepartmentFilterTable
	Select fd.FunctionalDepartmentKey 
	From dbo.Split(@_FunctionalDepartmentList) t1
		INNER JOIN FunctionalDepartment fd ON fd.FunctionalDepartmentName = t1.item
	END

IF 	(@ActivityTypeList IS NOT NULL)
	BEGIN
    INSERT INTO #ActivityTypeFilterTable
    SELECT at.ActivityTypeKey 
    FROM dbo.Split(@_ActivityTypeList) t1
		INNER JOIN ActivityType at ON at.ActivityTypeName = t1.item
	END
	
IF (@AllocationRegionList IS NOT NULL)
	BEGIN
	Insert Into #AllocationRegionFilterTable
	Select ar.AllocationRegionKey 
	From dbo.Split(@_AllocationRegionList) t1
		INNER JOIN AllocationRegion ar ON ar.RegionName = t1.item
	END

IF (@AllocationSubRegionList IS NOT NULL)
	BEGIN
	Insert Into #AllocationSubRegionFilterTable
	Select ar.AllocationRegionKey
	From dbo.Split(@_AllocationSubRegionList) t1
		INNER JOIN AllocationRegion ar ON ar.SubRegionName = t1.item
	END

IF (@MajorAccountCategoryList IS NOT NULL)
	BEGIN
	Insert Into #MajorAccountCategoryFilterTable
	Select gl.GlAccountCategoryKey 
	From dbo.Split(@_MajorAccountCategoryList) t1
		INNER JOIN GlAccountCategory gl ON gl.MajorCategoryName = t1.item
	END
	
IF 	(@MinorAccountCategoryList IS NOT NULL)
	BEGIN
    INSERT INTO #MinorAccountCategoryFilterTable
    SELECT gl.GlAccountCategoryKey 
    FROM dbo.Split(@MinorAccountCategoryList) t1
		INNER JOIN GlAccountCategory gl ON gl.MinorCategoryName = t1.item
	END	

IF (@OriginatingRegionList IS NOT NULL)
	BEGIN
	Insert Into #OriginatingRegionFilterTable
	Select orr.OriginatingRegionKey 
	From dbo.Split(@_OriginatingRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.RegionName = t1.item
	END

IF (@OriginatingSubRegionList IS NOT NULL)
	BEGIN
	Insert Into #OriginatingSubRegionFilterTable
	Select orr.OriginatingRegionKey  
	From dbo.Split(@OriginatingSubRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.SubRegionName = t1.item
	END		
--------------------------------------------------------------------------
/*	COMMON END															*/
--------------------------------------------------------------------------

IF 	OBJECT_ID('tempdb..#ProfitabilityReport') IS NOT NULL
    DROP TABLE #ProfitabilityReport

CREATE TABLE #ProfitabilityReport
(	
	AccountSubTypeName          VARCHAR(50),
	FeeOrExpense				VARCHAR(50),
	MajorCategoryName			VARCHAR(100),
	MinorCategoryName			VARCHAR(100),
	ActivityTypeName			VARCHAR(50),
	PropertyFundName			VARCHAR(100),
	AllocationSubRegionName		VARCHAR(50),
	SourceName					VarChar(50),
	EntryDate					VARCHAR(10),
	[User]						NVARCHAR(20),
	[Description]				NVARCHAR(60),
	AdditionalDescription		NVARCHAR(4000),
	PropertyFundCode			Varchar(6) DEFAULT(''), --Varchar, for this helps to keep reports size smaller
	OriginatingRegionCode		Varchar(15) DEFAULT(''), --Varchar, for this helps to keep reports size smaller
	GlAccountCode				VARCHAR(50),
	GlAccountName				VARCHAR(150),
	CalendarPeriod				Varchar(6) DEFAULT(''),
	
	--Month to date	
	MtdGrossActual				MONEY,
	MtdGrossBudget				MONEY,
	MtdGrossReforecast			MONEY,
	MtdNetActual				MONEY,
	MtdNetBudget				MONEY,
	MtdNetReforecast			MONEY,
	
	--Year to date
	YtdGrossActual				MONEY,	
	YtdGrossBudget				MONEY, 
	YtdGrossReforecast			MONEY, 
	YtdNetActual				MONEY, 
	YtdNetBudget				MONEY, 
	YtdNetReforecast			MONEY, 

	--Annual	
	AnnualGrossBudget			MONEY,
	AnnualGrossReforecast		MONEY,
	AnnualGrossReforecastQ1		MONEY,
	AnnualNetBudget				MONEY,
	AnnualNetReforecast			MONEY,
	AnnualNetReforecastQ1		MONEY,

	--Annual estimated
	AnnualEstGrossBudget		MONEY,
	AnnualEstGrossReforecast	MONEY,
	AnnualEstNetBudget			MONEY,
	AnnualEstNetReforecast		MONEY
)

DECLARE @cmdString Varchar(8000)

--Get actual information
SET @cmdString = (Select '

INSERT INTO #ProfitabilityReport
SELECT 	
	gac.AccountSubTypeName,
	gac.FeeOrExpense,
    gac.MajorCategoryName,
    gac.MinorCategoryName,
    a.ActivityTypeName,
    pf.PropertyFundName,
    ar.SubRegionName AS AllocationSubRegionName,
    s.SourceName,
    CONVERT(varchar(10),ISNULL(pa.EntryDate,''''), 101) as EntryDate,
    ISNULL(pa.[User], '''') [User],
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.Description ELSE '''' END as Description,
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.AdditionalDescription ELSE '''' END as AdditionalDescription,
    ISNULL(pa.PropertyFundCode, '''') PropertyFundCode,
    ISNULL(pa.OriginatingRegionCode, '''') OriginatingRegionCode,
    ga.Code,
    ga.Name,
    c.CalendarPeriod,
	
    -- Expenses must be displayed as negative an Income is saved in MRI as negative
	(
		er.Rate * -1 *
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as MtdGrossActual,
	NULL as MtdGrossBudget,
	(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriod,6,0) + ' NOT IN (201003,201006)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as MtdGrossReforecast,
	
	(
		er.Rate * r.MultiplicationFactor * -1 *
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as MtdNetActual,
	NULL as MtdNetBudget,
	(
		er.Rate * r.MultiplicationFactor * -1 *
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriod,6,0) + ' NOT IN (201003,201006)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as MtdNetReforecast,
	
	(
		er.Rate * -1 *
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as YtdGrossActual,
	NULL as YtdGrossBudget,
	(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriod,6,0) + ' NOT IN (201003,201006)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as YtdGrossReforecast,
	
	(
		er.Rate * r.MultiplicationFactor * -1 *
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as YtdNetActual,
	NULL as YtdNetBudget,
	(
		er.Rate * r.MultiplicationFactor * -1 *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriod,6,0) + ' NOT IN (201003,201006)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as YtdNetReforecast,
	
	NULL as AnnualGrossBudget,
	(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriod,6,0) + ' NOT IN (201003,201006)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as AnnualGrossReforecast,
	(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@PreviousReforecastEffectivePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriod,6,0) + ' NOT IN (201003,201006)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ1,
	

	NULL as AnnualNetBudget,
    (
        er.Rate * r.MultiplicationFactor * -1 *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriod,6,0) + ' NOT IN (201003,201006)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as AnnualNetReforecast,
    (
        er.Rate * r.MultiplicationFactor * -1 *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@PreviousReforecastEffectivePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriod,6,0) + ' NOT IN (201003,201006)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as AnnualNetReforecastQ1,
	
	(
        er.Rate * -1 *
        CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pa.LocalActual
        ELSE 
			0
        END
	) as AnnualEstGrossBudget,
	(
            er.Rate * -1 *
            CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriod,6,0) + ' NOT IN (201003,201006)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as AnnualEstGrossReforecast,

    (
        er.Rate * r.MultiplicationFactor * -1 *
        CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pa.LocalActual
        ELSE 
			0
        END
    ) as AnnualEstNetBudget,
	(
        er.Rate * r.MultiplicationFactor * -1 *
        CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriod,6,0) + ' NOT IN (201003,201006)
				 )
			THEN
				  pa.LocalActual 
		ELSE 
			0 
		END
	) as AnnualEstNetReforecast
FROM
	ProfitabilityActual pa

	INNER JOIN Overhead oh ON oh.OverheadKey = pa.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1

	INNER JOIN GlAccount ga on ga.GlAccountKey = pa.GlAccountKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pa.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pa.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pa.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pa.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pa.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pa.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pa.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pa.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
		
    INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pa.LocalCurrencyKey AND er.CalendarKey = pa.CalendarKey
    INNER JOIN Currency dc ON  dc.CurrencyKey = er.DestinationCurrencyKey
    INNER JOIN Reimbursable r ON  r.ReimbursableKey = pa.ReimbursableKey
    INNER JOIN Calendar c ON  c.CalendarKey = pa.CalendarKey
    INNER JOIN Source s ON s.SourceKey = pa.SourceKey

    INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pa.AllocationRegionKey
    INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pa.OriginatingRegionKey
    INNER JOIN ActivityType a ON  a.ActivityTypeKey = pa.ActivityTypeKey
    INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pa.PropertyFundKey
    INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pa.FunctionalDepartmentKey

WHERE  1 = 1
    AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select t1.FunctionalDepartmentKey From #FunctionalDepartmentFilterTable t1)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select t1.ActivityTypeKey From #ActivityTypeFilterTable t1)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select t1.PropertyFundKey From #EntityFilterTable t1)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select t1.AllocationRegionKey From #AllocationRegionFilterTable t1)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select t1.AllocationRegionKey From #AllocationSubRegionFilterTable t1)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select t1.GlAccountCategoryKey From #MajorAccountCategoryFilterTable t1)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select t1.GlAccountCategoryKey From #MinorAccountCategoryFilterTable t1)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OriginatingRegionFilterTable t1)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OriginatingSubRegionFilterTable t1)' END +
'
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT (@cmdString)
EXEC (@cmdString)

--Get budget information
SET @cmdString = (Select '

INSERT INTO #ProfitabilityReport
SELECT 
	gac.AccountSubTypeName,
	gac.FeeOrExpense,
    gac.MajorCategoryName,
    gac.MinorCategoryName,
    a.ActivityTypeName,
    pf.PropertyFundName,
    ar.SubRegionName AS AllocationSubRegionName,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN '''' ELSE ga.Code END,
	CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN '''' ELSE ga.Name END,
	'''' as CalendarPeriod,
	
    --Expenses must be displayed as negative
    NULL as MtdGrossActual,
	(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) *
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as MtdGrossBudget,
	NULL as MtdGrossReforecast,
	
	NULL as MtdNetActual,
	(
        er.Rate * r.MultiplicationFactor * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
											 1
										    ELSE
											 -1 
										    END) * 
        CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pb.LocalBudget
        ELSE 
			0
        END
    ) as MtdNetBudget,
	NULL as MtdNetReforecast,
	
	NULL as YtdGrossActual,	
	(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) * 
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as YtdGrossBudget, 
	NULL as YtdGrossReforecast, 
	
	NULL as YtdNetActual, 
	(
        er.Rate * r.MultiplicationFactor * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
											 1
										    ELSE
											 -1 
										    END) * 
        CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pb.LocalBudget
        ELSE 
			0
        END
    ) as YtdNetBudget, 
	NULL as YtdNetReforecast, 
	
	(er.Rate * pb.LocalBudget * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
									1
								  ELSE
									-1 
								  END)) as AnnualGrossBudget,
	NULL as AnnualGrossReforecast,
	NULL as AnnualGrossReforecastQ1,

	(er.Rate * r.MultiplicationFactor * pb.LocalBudget * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
																1
															 ELSE
																-1 
															 END)) as AnnualNetBudget,
	NULL as AnnualNetReforecast,
	NULL as AnnualNetReforecastQ1,


	(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) * 
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as AnnualEstGrossBudget,
	NULL as AnnualEstGrossReforecast,

	(
        er.Rate * r.MultiplicationFactor * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
											 1
										    ELSE
											 -1 
										    END) * 
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pb.LocalBudget
        ELSE 
			0
        END
    ) as AnnualEstNetBudget,
	NULL as AnnualEstNetReforecast
	
FROM
	ProfitabilityBudget pb

	INNER JOIN Overhead oh ON oh.OverheadKey = pb.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
	
	INNER JOIN GlAccount ga on ga.GlAccountKey = pb.GlAccountKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pb.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pb.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pb.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pb.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pb.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pb.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pb.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pb.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			
    INNER JOIN ExchangeRate er ON er.SourceCurrencyKey = pb.LocalCurrencyKey AND er.CalendarKey = pb.CalendarKey
    INNER JOIN Currency dc ON er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON  c.CalendarKey = pb.CalendarKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pb.ReimbursableKey
    INNER JOIN Source s ON s.SourceKey = pb.SourceKey

    INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pb.AllocationRegionKey
    INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pb.OriginatingRegionKey
    INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pb.PropertyFundKey
    INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pb.FunctionalDepartmentKey
    INNER JOIN ActivityType a ON a.ActivityTypeKey = pb.ActivityTypeKey

WHERE  1 = 1
    AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT (@cmdString)
EXEC (@cmdString)

--Get reforecast information
SET @cmdString = (SELECT '

INSERT INTO #ProfitabilityReport
SELECT 
	gac.AccountSubTypeName,
	gac.FeeOrExpense,
    gac.MajorCategoryName,
    gac.MinorCategoryName,
    a.ActivityTypeName,
    pf.PropertyFundName,
    ar.SubRegionName AS AllocationSubRegionName,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN '''' ELSE ga.Code END,
	CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN '''' ELSE ga.Name END,
    '''' as CalendarPeriod,
    
    --Expenses must be displayed as negative
	NULL as MtdGrossActual,
	NULL as MtdGrossBudget,
	(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecast,
	
	NULL as MtdNetActual,
	NULL as MtdNetBudget,
    (
        er.Rate * r.MultiplicationFactor * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
											 1
										    ELSE
											 -1 
										    END) * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as MtdNetReforecast,
	
	NULL as YtdGrossActual,	
	NULL as YtdGrossBudget, 
	(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecast, 
	
	NULL as YtdNetActual, 
	NULL as YtdNetBudget, 
    (
        er.Rate * r.MultiplicationFactor * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
											 1
										    ELSE
											 -1 
										    END) * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as YtdNetReforecast, 
	
	NULL as AnnualGrossBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '(er.Rate * pr.LocalReforecast * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
										  1
									    ELSE
										 -1 
									    END)) as AnnualGrossReforecast,
	NULL as AnnualGrossReforecastQ1,								    

	NULL as AnnualNetBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '(er.Rate * r.MultiplicationFactor * pr.LocalReforecast * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
																	1
																  ELSE
																	-1 
																  END))as AnnualNetReforecast,
	NULL as AnnualNetReforecastQ1,															  

	NULL as AnnualEstGrossBudget,
	(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) *
		CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			' OR (
					LEFT(pr.ReferenceCode,3) = ''BC:'' 
					AND ' + STR(@ReforecastEffectivePeriod,6,0) + ' IN (201003,201006))
				)
		THEN 
			pr.LocalReforecast
		ELSE
			0
		END
	) as AnnualEstGrossReforecast,

	NULL as AnnualEstNetBudget,
	(
        er.Rate * r.MultiplicationFactor * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
											 1
										    ELSE
											 -1 
										    END) *
        CASE WHEN (c.CalendarPeriod > ' + STR(@ReportExpensePeriod,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Don't use the category mapping here like for actual exclude because we want unknowns to come through*/
			'  OR (
					LEFT(pr.ReferenceCode,3) = ''BC:'' 
					AND ' + STR(@ReforecastEffectivePeriod,6,0) + ' IN (201003,201006))
				)
		THEN 
			pr.LocalReforecast
        ELSE 
			0
        END
    ) as AnnualEstNetReforecast
FROM
	ProfitabilityReforecast pr

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
	
	INNER JOIN GlAccount ga on ga.GlAccountKey = pr.GlAccountKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			
    INNER JOIN ExchangeRate er ON er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
    INNER JOIN Currency dc ON er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON  c.CalendarKey = pr.CalendarKey
    INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pr.ReimbursableKey
    INNER JOIN Source s ON s.SourceKey = pr.SourceKey

    INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey
    INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey
    INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey
    INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey
    INNER JOIN ActivityType a ON a.ActivityTypeKey = pr.ActivityTypeKey

WHERE  1 = 1
    AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriod,10,0) + '
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT (@cmdString)
EXEC (@cmdString)

--Get reforecastQ1 information
SET @cmdString = (SELECT '

INSERT INTO #ProfitabilityReport
SELECT 
	gac.AccountSubTypeName,
	gac.FeeOrExpense,
    gac.MajorCategoryName,
    gac.MinorCategoryName,
    a.ActivityTypeName,
    pf.PropertyFundName,
    ar.SubRegionName AS AllocationSubRegionName,
    s.SourceName,
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,    
    CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN '''' ELSE ga.Code END,
	CASE WHEN gac.MajorCategoryName = ''Salaries/Taxes/Benefits'' THEN '''' ELSE ga.Name END,
    '''' as CalendarPeriod,
    
    --Expenses must be displayed as negative
	NULL as MtdGrossActual,
	NULL as MtdGrossBudget,
	NULL as MtdGrossReforecast,
	
	NULL as MtdNetActual,
	NULL as MtdNetBudget,
    NULL as MtdNetReforecast,
	
	NULL as YtdGrossActual,	
	NULL as YtdGrossBudget, 
	NULL as YtdGrossReforecast, 
	
	NULL as YtdNetActual, 
	NULL as YtdNetBudget, 
    NULL as YtdNetReforecast, 
	
	NULL as AnnualGrossBudget, 
	NULL as AnnualGrossReforecast,
	(er.Rate * pr.LocalReforecast * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
										  1
									    ELSE
										 -1 
									    END)) as AnnualGrossReforecastQ1,

	NULL as AnnualNetBudget, 
	NULL as AnnualNetReforecast,
	(er.Rate * r.MultiplicationFactor * pr.LocalReforecast * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
																	1
																  ELSE
																	-1 
																  END)) as AnnualNetReforecastQ1,

	NULL as AnnualEstGrossBudget,
	NULL as AnnualEstGrossReforecast,

	NULL as AnnualEstNetBudget,
	NULL as AnnualEstNetReforecast
FROM
	ProfitabilityReforecast pr

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
	
	INNER JOIN GlAccount ga on ga.GlAccountKey = pr.GlAccountKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			
    INNER JOIN ExchangeRate er ON er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
    INNER JOIN Currency dc ON er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON  c.CalendarKey = pr.CalendarKey
    INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pr.ReimbursableKey
    INNER JOIN Source s ON s.SourceKey = pr.SourceKey

    INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey
    INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey
    INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey
    INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey
    INNER JOIN ActivityType a ON a.ActivityTypeKey = pr.ActivityTypeKey

WHERE  1 = 1
    AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND ref.ReforecastEffectivePeriod = ' + STR(@PreviousReforecastEffectivePeriod,10,0) + '
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
'
')

IF (LEN(@cmdString)) > 7995
BEGIN
	RAISERROR('The dynamic sql statement is greater than 7995 characters in length, which is the maximum. Cowardly aborting ...',9,1)
END

PRINT ('Total dynamic sql statement size: ' + STR(LEN(@cmdString)) + '')

PRINT (@cmdString)
EXEC (@cmdString)

SELECT 
	AccountSubTypeName AS ExpenseType, 
	FeeOrExpense AS FeeOrExpense,
    MajorCategoryName AS MajorExpenseCategoryName,
    MinorCategoryName AS MinorExpenseCategoryName,
    ActivityTypeName AS ActivityType,
	PropertyFundName AS EntityName,
	AllocationSubRegionName AS AllocationSubRegionName,
	CalendarPeriod AS ActualsExpensePeriod,
    EntryDate,
    [User],
    [Description],
    AdditionalDescription,
	SourceName AS SourceName,
	PropertyFundCode,
    OriginatingRegionCode,
	GlAccountCode,
    GlAccountName,

	--Gross
	--Month to date    
	SUM(ISNULL(MtdGrossActual,0)) AS MtdGrossActual,
	SUM(ISNULL(MtdGrossBudget,0)) AS MtdGrossOriginalBudget,
	
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecast 
		END,0)) 
	AS MtdGrossReforecast,
	
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdGrossBudget 
		ELSE 
			MtdGrossReforecast 
		END, 0) - ISNULL(MtdGrossActual, 0)) 
	AS MtdGrossVariance,
	
	--Year to date
	SUM(ISNULL(YtdGrossActual,0)) AS YtdGrossActual,	
	SUM(ISNULL(YtdGrossBudget,0)) AS YtdGrossOriginalBudget,
	
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecast 
		END,0))
	AS YtdGrossReforecast,
	
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdGrossBudget 
		ELSE 
			YtdGrossReforecast 
		END, 0) - ISNULL(YtdGrossActual, 0))
	AS YtdGrossVariance,
	
	--Annual
	SUM(ISNULL(AnnualGrossBudget,0)) AS AnnualGrossOriginalBudget,	
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualGrossBudget 
		ELSE 
			AnnualGrossReforecast 
		END,0)) 
	AS AnnualGrossReforecast,
	
	SUM (ISNULL(CASE WHEN @PreviousReforecastQuaterName = 'Q1' THEN 
			AnnualGrossReforecastQ1 		
		END,0)) 
	AS AnnualGrossReforecastQ1,
	
	--Annual Estimated
	--SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
	--		AnnualEstGrossBudget 
	--	ELSE 
	--		AnnualEstGrossReforecast 
	--	END,0)) 
	--AS AnnualGrossEstimatedActual,	
	
	--SUM(ISNULL(AnnualGrossBudget,0) - ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
	--											AnnualEstGrossBudget 
	--										ELSE 
	--											AnnualEstGrossReforecast 
	--										END,0))
	--AS AnnualGrossEstimatedVariance,
	
	--Net
	--Month to date    
	SUM(ISNULL(MtdNetActual,0)) AS MtdNetActual,
	SUM(ISNULL(MtdNetBudget,0)) AS MtdNetOriginalBudget,
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecast 
		END,0)) AS MtdNetReforecast,
		
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			MtdNetBudget 
		ELSE 
			MtdNetReforecast 
		END, 0) - ISNULL(MtdNetActual, 0))
	AS MtdNetVariance,
	
	--Year to date
	SUM(ISNULL(YtdNetActual,0)) AS YtdNetActual,	
	SUM(ISNULL(YtdNetBudget,0)) AS YtdNetOriginalBudget,
	
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecast 
		END,0))
	AS YtdNetReforecast,
	
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			YtdNetBudget 
		ELSE 
			YtdNetReforecast 
		END, 0) - ISNULL(YtdNetActual, 0)) 
	AS YtdNetVariance,
	
	--Annual
	SUM(ISNULL(AnnualNetBudget,0)) AS AnnualNetOriginalBudget,	
	SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
			AnnualNetBudget 
		ELSE 
			AnnualNetReforecast 
		END,0))
	AS AnnualNetReforecast,
	SUM (ISNULL(CASE WHEN @PreviousReforecastQuaterName = 'Q1' THEN 
			AnnualNetReforecastQ1 		
		END,0)) 
	AS AnnualNetReforecastQ1
	
	--Annual Estimated
	--SUM(ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
	--		AnnualEstNetBudget 
	--	ELSE 
	--		AnnualEstNetReforecast 
	--	END,0))
	--AS AnnualNetEstimatedActual,
	
	--SUM(ISNULL(AnnualNetBudget,0) - ISNULL(CASE WHEN @ReforecastQuaterName = 'Q0' THEN 
	--										AnnualEstNetBudget 
	--									ELSE 
	--										AnnualEstNetReforecast 
	--									END,0)) 
	--AS AnnualNetEstimatedVariance 
INTO
	#Output
FROM
	#ProfitabilityReport
GROUP BY
    AccountSubTypeName,
    FeeOrExpense,
    MajorCategoryName,
    MinorCategoryName,
    ActivityTypeName,
    PropertyFundName,
    AllocationSubRegionName,
    CalendarPeriod,
    EntryDate,
    [User],
    [Description],
    AdditionalDescription,
    SourceName,
    PropertyFundCode,
    OriginatingRegionCode,
	GlAccountCode,
    GlAccountName
    
ORDER BY
	CASE WHEN FeeOrExpense = 'INCOME' THEN 1 WHEN FeeOrExpense = 'EXPENSE' THEN 2 ELSE 3 END

--Output
SELECT
	ExpenseType, 
	FeeOrExpense,
    MajorExpenseCategoryName,
    MinorExpenseCategoryName,
    ActivityType,
	EntityName,
	AllocationSubRegionName,
	ActualsExpensePeriod,
    EntryDate,
    [User],
    [Description],
    AdditionalDescription,
	SourceName AS SourceName,
	PropertyFundCode,
    OriginatingRegionCode,
	GlAccountCode,
	GlAccountName,
	
	--Gross
	--Month to date    
	MtdGrossActual,
	MtdGrossOriginalBudget,
	
	MtdGrossReforecast,
	MtdGrossVariance,
	
	--Year to date
	YtdGrossActual,	
	YtdGrossOriginalBudget,
	
	YtdGrossReforecast,
	YtdGrossVariance,
	
	--Annual
	AnnualGrossOriginalBudget,	
	AnnualGrossReforecast,
	AnnualGrossReforecastQ1,
	
	--Annual Estimated
	--AnnualGrossEstimatedActual,	
	--AnnualGrossEstimatedVariance,
	
	--Net
	--Month to date    
	MtdNetActual,
	MtdNetOriginalBudget,
	MtdNetReforecast,
	MtdNetVariance,
	
	--Year to date
	YtdNetActual,	
	YtdNetOriginalBudget,
	YtdNetReforecast,
	YtdNetVariance,
	--Annual
	AnnualNetOriginalBudget,	
	AnnualNetReforecast,
	AnnualNetReforecastQ1
	
	--Annual Estimated
	--AnnualNetEstimatedActual 
	--AnnualNetEstimatedVariance 
FROM
	#Output
WHERE
	--Gross
	--Month to date    
	MtdGrossActual <> 0.00 OR
	MtdGrossOriginalBudget <> 0.00 OR
	MtdGrossReforecast <> 0.00 OR
	MtdGrossVariance <> 0.00 OR
	
	--Year to date
	YtdGrossActual <> 0.00 OR
	YtdGrossOriginalBudget <> 0.00 OR
	YtdGrossReforecast <> 0.00 OR
	YtdGrossVariance <> 0.00 OR
	
	--Annual
	AnnualGrossOriginalBudget <> 0.00 OR
	AnnualGrossReforecast <> 0.00 OR
	AnnualGrossReforecastQ1 <> 0.00 OR
	
	--Annual Estimated
	--AnnualGrossEstimatedActual <> 0.00 OR
	--AnnualGrossEstimatedVariance <> 0.00 OR
	
	--Net
	--Month to date    
	MtdNetActual <> 0.00 OR
	MtdNetOriginalBudget <> 0.00 OR
	MtdNetReforecast <> 0.00 OR
	MtdNetVariance <> 0.00 OR
	
	--Year to date
	YtdNetActual <> 0.00 OR
	YtdNetOriginalBudget <> 0.00 OR
	YtdNetReforecast <> 0.00 OR
	YtdNetVariance <> 0.00 OR
	--Annual
	AnnualNetOriginalBudget <> 0.00 OR
	AnnualNetReforecast <> 0.00 OR
	AnnualNetReforecastQ1 <> 0.00 --OR
	
	--Annual Estimated
	--AnnualNetEstimatedActual <> 0.00 OR
	--AnnualNetEstimatedVariance <> 0.00 

	
	--Annual Estimated
	--AnnualNetEstimatedActual <> 0.00 OR
	--AnnualNetEstimatedVariance <> 0.00 

IF 	OBJECT_ID('tempdb..#ProfitabilityReport') IS NOT NULL
    DROP TABLE #ProfitabilityReport

IF 	OBJECT_ID('tempdb..#Output') IS NOT NULL
    DROP TABLE #Output


GO

/****** Object:  StoredProcedure [dbo].[stp_R_ProfitabilityDetailV2]    Script Date: 12/08/2010 12:01:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER OFF
GO




CREATE PROCEDURE [dbo].[stp_R_ProfitabilityDetailV2]
	@ReportExpensePeriod INT = NULL,
	@DestinationCurrency VARCHAR(3) = NULL,
	@TranslationTypeName VARCHAR(50) = NULL,

	@FunctionalDepartmentList TEXT = NULL,
	@ActivityTypeList TEXT = NULL,
	@EntityList TEXT = NULL,
	@MajorAccountCategoryList TEXT = NULL,
	@MinorAccountCategoryList TEXT = NULL,
	@AllocationRegionList TEXT = NULL,
	@AllocationSubRegionList TEXT = NULL,
	@OriginatingRegionList TEXT = NULL,
	@OriginatingSubRegionList TEXT = NULL,
	@DisplayOverheadBy Varchar(12),
	
	--Customized Filter Logic Specific to this Report
	@IncludeFeeAdjustments TinyInt = NULL,
	@OverheadOriginatingSubRegionList TEXT = NULL 
	
	
AS

IF ISNULL(@DisplayOverheadBy,'') NOT IN ('Allocated','Unallocated')
	BEGIN
	RAISERROR ('@DisplayOverheadBy have invalid value (Must be one of:Allocated,Unallocated)',18,1)
	RETURN
	END
	
DECLARE

	@_ReportExpensePeriod INT = @ReportExpensePeriod,
	@_DestinationCurrency VARCHAR(3) = @DestinationCurrency,
	@_TranslationTypeName VARCHAR(50) = @TranslationTypeName,
	@_FunctionalDepartmentList VARCHAR(8000) = @FunctionalDepartmentList,
	@_ActivityTypeList VARCHAR(8000) = @ActivityTypeList,
	@_EntityList VARCHAR(8000) = @EntityList,
	@_MajorAccountCategoryList VARCHAR(8000) = @MajorAccountCategoryList,
	@_MinorAccountCategoryList VARCHAR(8000) = @MinorAccountCategoryList,
	@_AllocationRegionList VARCHAR(8000) = @AllocationRegionList,
	@_AllocationSubRegionList VARCHAR(8000) = @AllocationSubRegionList,
	@_OriginatingRegionList VARCHAR(8000) = @OriginatingRegionList,
	@_OriginatingSubRegionList VARCHAR(8000) = @OriginatingSubRegionList,
	@_OverheadOriginatingSubRegionList VARCHAR(8000) = @OverheadOriginatingSubRegionList	
			
--------------------------------------------------------------------------
/*	COMMON Block to setup the Report Filter Variable defaults		*/
--------------------------------------------------------------------------

IF @ReportExpensePeriod IS NULL
	SET @ReportExpensePeriod = CAST(CAST(YEAR(GETDATE()) AS VARCHAR(4)) + REPLACE(STR(MONTH(GETDATE()),2 ),' ','0')AS INT)

IF @DestinationCurrency IS NULL
	SET @DestinationCurrency = 'USD'

IF 	@TranslationTypeName IS NULL
	SET @TranslationTypeName = 'Global'

DECLARE @CalendarYear AS INT
SET @CalendarYear = CAST(SUBSTRING(CAST(@ReportExpensePeriod AS VARCHAR(10)), 1, 4) AS INT)				

DECLARE @ReforecastEffectivePeriodQ1 INT
SET @ReforecastEffectivePeriodQ1 = (SELECT TOP 1 ReforecastEffectivePeriod 
									FROM dbo.Reforecast 
									WHERE ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										  ReforecastQuarterName = 'Q1'
									ORDER BY ReforecastEffectivePeriod)								

DECLARE @ReforecastEffectivePeriodQ2 INT
SET @ReforecastEffectivePeriodQ2 = (SELECT TOP 1 ReforecastEffectivePeriod 
									FROM dbo.Reforecast 
									WHERE ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										  ReforecastQuarterName = 'Q2'
									ORDER BY ReforecastEffectivePeriod)								

DECLARE @ReforecastEffectivePeriodQ3 INT
SET @ReforecastEffectivePeriodQ3 = (SELECT TOP 1 ReforecastEffectivePeriod 
									FROM dbo.Reforecast 
									WHERE ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										  ReforecastQuarterName = 'Q3'
									ORDER BY ReforecastEffectivePeriod)								

--------------------------------------------------------------------------
/*	COMMON Block to setup the Report Filter Tables		*/
--------------------------------------------------------------------------
	
	CREATE TABLE	#EntityFilterTable	(PropertyFundKey Int NOT NULL)
	CREATE TABLE	#FunctionalDepartmentFilterTable	(FunctionalDepartmentKey Int NOT NULL)
	CREATE TABLE	#ActivityTypeFilterTable(ActivityTypeKey Int NOT NULL)
	CREATE TABLE	#AllocationRegionFilterTable	(AllocationRegionKey Int NOT NULL)
	CREATE TABLE	#AllocationSubRegionFilterTable	(AllocationRegionKey Int NOT NULL)
	CREATE TABLE	#MajorAccountCategoryFilterTable(GlAccountCategoryKey Int NOT NULL)	
	CREATE TABLE	#MinorAccountCategoryFilterTable(GlAccountCategoryKey Int NOT NULL)	
	CREATE TABLE	#OriginatingRegionFilterTable	(OriginatingRegionKey Int NOT NULL)
	CREATE TABLE	#OriginatingSubRegionFilterTable	(OriginatingRegionKey Int NOT NULL)	
	CREATE TABLE	#OverheadOriginatingSubRegionFilterTable	(OriginatingRegionKey Int NOT NULL)	
		
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #EntityFilterTable	(PropertyFundKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #FunctionalDepartmentFilterTable	(FunctionalDepartmentKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #ActivityTypeFilterTable(ActivityTypeKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #AllocationRegionFilterTable	(AllocationRegionKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #AllocationSubRegionFilterTable	(AllocationRegionKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #MajorAccountCategoryFilterTable(GlAccountCategoryKey)	
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #MinorAccountCategoryFilterTable(GlAccountCategoryKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OriginatingRegionFilterTable	(OriginatingRegionKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OriginatingSubRegionFilterTable	(OriginatingRegionKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OverheadOriginatingSubRegionFilterTable	(OriginatingRegionKey)
	
IF (@EntityList IS NOT NULL)
	BEGIN
	Insert Into #EntityFilterTable
	Select pf.PropertyFundKey
	From dbo.Split(@_EntityList) t1
		INNER JOIN PropertyFund pf ON pf.PropertyFundName = t1.item
	
	END
	
IF (@FunctionalDepartmentList IS NOT NULL)
	BEGIN
	Insert Into #FunctionalDepartmentFilterTable
	Select fd.FunctionalDepartmentKey 
	From dbo.Split(@_FunctionalDepartmentList) t1
		INNER JOIN FunctionalDepartment fd ON fd.FunctionalDepartmentName = t1.item
	END

IF 	(@ActivityTypeList IS NOT NULL)
	BEGIN
    INSERT INTO #ActivityTypeFilterTable
    SELECT at.ActivityTypeKey 
    FROM dbo.Split(@_ActivityTypeList) t1
		INNER JOIN ActivityType at ON at.ActivityTypeName = t1.item
	END
	
IF (@AllocationRegionList IS NOT NULL)
	BEGIN
	Insert Into #AllocationRegionFilterTable
	Select ar.AllocationRegionKey 
	From dbo.Split(@_AllocationRegionList) t1
		INNER JOIN AllocationRegion ar ON ar.RegionName = t1.item
	END

IF (@AllocationSubRegionList IS NOT NULL)
	BEGIN
	Insert Into #AllocationSubRegionFilterTable
	Select ar.AllocationRegionKey
	From dbo.Split(@_AllocationSubRegionList) t1
		INNER JOIN AllocationRegion ar ON ar.SubRegionName = t1.item
	END

IF (@MajorAccountCategoryList IS NOT NULL)
	BEGIN
	Insert Into #MajorAccountCategoryFilterTable
	Select gl.GlAccountCategoryKey 
	From dbo.Split(@_MajorAccountCategoryList) t1
		INNER JOIN GlAccountCategory gl ON gl.MajorCategoryName = t1.item
	END
	
IF 	(@MinorAccountCategoryList IS NOT NULL)
	BEGIN
    INSERT INTO #MinorAccountCategoryFilterTable
    SELECT gl.GlAccountCategoryKey 
    FROM dbo.Split(@MinorAccountCategoryList) t1
		INNER JOIN GlAccountCategory gl ON gl.MinorCategoryName = t1.item
	END	

IF (@OriginatingRegionList IS NOT NULL)
	BEGIN
	Insert Into #OriginatingRegionFilterTable
	Select orr.OriginatingRegionKey 
	From dbo.Split(@_OriginatingRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.RegionName = t1.item
	END

IF (@OriginatingSubRegionList IS NOT NULL)
	BEGIN
	Insert Into #OriginatingSubRegionFilterTable
	Select orr.OriginatingRegionKey  
	From dbo.Split(@OriginatingSubRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.SubRegionName = t1.item
	END
	
IF (@OverheadOriginatingSubRegionList IS NOT NULL)
	BEGIN
	Insert Into #OverheadOriginatingSubRegionFilterTable
	Select orr.OriginatingRegionKey  
	From dbo.Split(@OverheadOriginatingSubRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.SubRegionName = t1.item
	END	
--------------------------------------------------------------------------
/*	COMMON END															*/
--------------------------------------------------------------------------

IF 	OBJECT_ID('tempdb..#ProfitabilityReport') IS NOT NULL
    DROP TABLE #ProfitabilityReport

CREATE TABLE #ProfitabilityReport
(	
	GlAccountCategoryKey		Int,
    ActivityTypeKey				Int,
    PropertyFundKey				Int,
    AllocationRegionKey			Int,
    OriginatingRegionKey		Int,
    SourceKey					Int,
    GlAccountKey				Int,
	ReimbursableKey				Int,
	FeeAdjustmentKey			Int,
	FunctionalDepartmentKey		Int,
	OverheadKey					Int,
	CalendarPeriod				Varchar(6) DEFAULT(''),
	
	EntryDate					VARCHAR(10),
	[User]						NVARCHAR(20),
	[Description]				NVARCHAR(60),
	AdditionalDescription		NVARCHAR(4000),
	PropertyFundCode			Varchar(6) DEFAULT(''), --Varchar, for this helps to keep reports size smaller
	OriginatingRegionCode		Varchar(15) DEFAULT(''), --Varchar, for this helps to keep reports size smaller
	FunctionalDepartmentCode	Varchar(15) DEFAULT(''), --Varchar, for this helps to keep reports size smaller

	--Month to date	
	MtdActual				MONEY,
	MtdBudget				MONEY,
	MtdReforecastQ1		MONEY,
	MtdReforecastQ2		MONEY,
	MtdReforecastQ3		MONEY,
	
	--Year to date
	YtdActual				MONEY,	
	YtdBudget				MONEY, 
	YtdReforecastQ1		MONEY, 
	YtdReforecastQ2		MONEY, 
	YtdReforecastQ3		MONEY, 

	--Annual	
	AnnualBudget			MONEY,
	AnnualReforecastQ1		MONEY,
	AnnualReforecastQ2		MONEY,
	AnnualReforecastQ3		MONEY
)

DECLARE @cmdString Varchar(8000)
DECLARE @cmdString2 Varchar(8000)




--Get actual information
SET @cmdString = (Select '

INSERT INTO #ProfitabilityReport
SELECT 	
	pa.GlobalGlAccountCategoryKey,
    pa.ActivityTypeKey,
    pa.PropertyFundKey,
    pa.AllocationRegionKey,
    pa.OriginatingRegionKey,
    pa.SourceKey,
    pa.GlAccountKey,
	pa.ReimbursableKey,
	(Select FeeAdjustmentKey From FeeAdjustment Where FeeAdjustmentCode = ''NORMAL'') FeeAdjustmentKey,
	pa.FunctionalDepartmentKey,
	pa.OverheadKey,
	c.CalendarPeriod,
	
    CONVERT(varchar(10),ISNULL(pa.EntryDate,''''), 101) as EntryDate,
    ISNULL(pa.[User], '''') [User],
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.Description ELSE '''' END as Description,
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.AdditionalDescription ELSE '''' END as AdditionalDescription,
    ISNULL(pa.PropertyFundCode, '''') PropertyFundCode,
    ISNULL(pa.OriginatingRegionCode, '''') OriginatingRegionCode,
	ISNULL(pa.FunctionalDepartmentCode, '''') FunctionalDepartmentCode,
	
    -- Expenses must be displayed as negative an Income is saved in MRI as negative
	SUM(
		er.Rate * -1 *
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as MtdActual,
	NULL as MtdBudget,
	SUM(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/'
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003,201006,201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdReforecastQ1,
	SUM(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003,201006,201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdReforecastQ2,
	SUM(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003,201006,201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdReforecastQ3,
	
	SUM(
		er.Rate * -1 *
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as YtdActual,
	NULL as YtdBudget,
	SUM(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003,201006,201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdReforecastQ1,
	SUM(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003,201006,201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdReforecastQ2,
	SUM(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003,201006,201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdReforecastQ3,
	
	NULL as AnnualBudget,
	SUM(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003,201006,201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualReforecastQ1,
	SUM(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003,201006,201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualReforecastQ2,
	SUM(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003,201006,201009)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualReforecastQ3
FROM
	ProfitabilityActual pa

	INNER JOIN Overhead oh ON oh.OverheadKey = pa.OverheadKey

	INNER JOIN GlAccount ga on ga.GlAccountKey = pa.GlAccountKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pa.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pa.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pa.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pa.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pa.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pa.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pa.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pa.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
		
    INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pa.LocalCurrencyKey AND er.CalendarKey = pa.CalendarKey
    INNER JOIN Currency dc ON  dc.CurrencyKey = er.DestinationCurrencyKey
    INNER JOIN Reimbursable r ON  r.ReimbursableKey = pa.ReimbursableKey
    INNER JOIN Calendar c ON  c.CalendarKey = pa.CalendarKey
    INNER JOIN Source s ON s.SourceKey = pa.SourceKey

    INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pa.AllocationRegionKey
    INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pa.OriginatingRegionKey
    INNER JOIN ActivityType a ON  a.ActivityTypeKey = pa.ActivityTypeKey
    INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pa.PropertyFundKey
    INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pa.FunctionalDepartmentKey
')

SET @cmdString2 = (Select '
WHERE  1 = 1
    AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @DisplayOverheadBy = 'Unallocated' THEN 
			'
		AND (
				(
					gac.AccountSubTypeName	= ''Overhead''
				and	Oh.OverHeadCode			IN (''UNKNOWN'',''UNALLOC'')
				' +
				CASE WHEN @OverheadOriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OverheadOriginatingSubRegionFilterTable t1) ' END +
				'
				)
			OR	(
				gac.AccountSubTypeName		<> ''Overhead''
				'+
				+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable) ' END +
				+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable) ' END +
				'
				)
			)
			'

		ELSE --ALLOC
			'
		AND (
				(
					gac.AccountSubTypeName	<> ''Overhead''
				)
			OR	(
					gac.AccountSubTypeName	= ''Overhead''
				and	Oh.OverHeadCode			IN (''UNKNOWN'',''ALLOC'')
				)
			)
			'
		+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable) ' END +
		+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable) ' END

		END +
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select t1.FunctionalDepartmentKey From #FunctionalDepartmentFilterTable t1)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select t1.ActivityTypeKey From #ActivityTypeFilterTable t1)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select t1.PropertyFundKey From #EntityFilterTable t1)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select t1.GlAccountCategoryKey From #MajorAccountCategoryFilterTable t1)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select t1.GlAccountCategoryKey From #MinorAccountCategoryFilterTable t1)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OriginatingRegionFilterTable t1)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OriginatingSubRegionFilterTable t1)' END +
'
Group By
	pa.GlobalGlAccountCategoryKey,
    pa.ActivityTypeKey,
    pa.PropertyFundKey,
    pa.AllocationRegionKey,
    pa.OriginatingRegionKey,
    pa.SourceKey,
    pa.GlAccountKey,
	pa.ReimbursableKey,
	pa.FunctionalDepartmentKey,
	pa.OverheadKey,
	c.CalendarPeriod,
	
    CONVERT(varchar(10),ISNULL(pa.EntryDate,''''), 101),
    ISNULL(pa.[User], ''''),
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.Description ELSE '''' END,
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.AdditionalDescription ELSE '''' END,
    ISNULL(pa.PropertyFundCode, ''''),
    ISNULL(pa.OriginatingRegionCode, ''''),
	ISNULL(pa.FunctionalDepartmentCode, '''')
	
')
print @cmdString
print @cmdString2
IF LEN(@cmdString) > 7990
	RAISERROR ('Dynamic SQL to large',16,1)
IF LEN(@cmdString2) > 7990
	RAISERROR ('Dynamic SQL to large',16,1)

	
EXEC (@cmdString+@cmdString2)



--Get budget information
SET @cmdString = (Select '

INSERT INTO #ProfitabilityReport
SELECT 
	pb.GlobalGlAccountCategoryKey,
    pb.ActivityTypeKey,
    pb.PropertyFundKey,
    pb.AllocationRegionKey,
    pb.OriginatingRegionKey,
    pb.SourceKey,
    pb.GlAccountKey,
	pb.ReimbursableKey,
	pb.FeeAdjustmentKey,
	pb.FunctionalDepartmentKey,
	pb.OverheadKey,
	'''' as CalendarPeriod,
	
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
	'''' as FunctionalDepartmentCode,
	
    --Expenses must be displayed as negative
    NULL as MtdActual,
	SUM(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) *
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as MtdBudget,
	NULL as MtdReforecastQ1,
	NULL as MtdReforecastQ2,
	NULL as MtdReforecastQ3,
	
	NULL as YtdActual,	
	SUM(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) * 
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as YtdBudget, 
	NULL as YtdReforecastQ1, 
	NULL as YtdReforecastQ2, 
	NULL as YtdReforecastQ3, 
	
	SUM(er.Rate * pb.LocalBudget * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
									1
								  ELSE
									-1 
								  END)) as AnnualBudget,
	NULL as AnnualReforecastQ1,
	NULL as AnnualReforecastQ2,
	NULL as AnnualReforecastQ3
	
FROM
	ProfitabilityBudget pb --WITH (INDEX=IX_Clustered)

	INNER JOIN Overhead oh ON oh.OverheadKey = pb.OverheadKey
	
	INNER JOIN GlAccount ga on ga.GlAccountKey = pb.GlAccountKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pb.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pb.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pb.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pb.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pb.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pb.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pb.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pb.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			
    INNER JOIN ExchangeRate er ON er.SourceCurrencyKey = pb.LocalCurrencyKey AND er.CalendarKey = pb.CalendarKey
    INNER JOIN Currency dc ON er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON  c.CalendarKey = pb.CalendarKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pb.ReimbursableKey
    INNER JOIN Source s ON s.SourceKey = pb.SourceKey

    INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pb.AllocationRegionKey
    INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pb.OriginatingRegionKey
    INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pb.PropertyFundKey
    INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pb.FunctionalDepartmentKey
    INNER JOIN ActivityType a ON a.ActivityTypeKey = pb.ActivityTypeKey
    INNER JOIN FeeAdjustment Fa ON Fa.FeeAdjustmentKey = pb.FeeAdjustmentKey

WHERE  1 = 1
    AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */'
	
+ CASE WHEN @DisplayOverheadBy = 'Unallocated' THEN 
			'
		AND (
				(
					gac.AccountSubTypeName	= ''Overhead''
				and	Oh.OverHeadCode			IN (''UNKNOWN'',''UNALLOC'')
				' +
				CASE WHEN @OverheadOriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OverheadOriginatingSubRegionFilterTable t1) ' END +
				'
				)
			OR	(
				gac.AccountSubTypeName		<> ''Overhead''
				'+
				+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable) ' END +
				+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable) ' END +
				'
				)
			)
			'

		ELSE --ALLOC
			'
		AND (
				(
					gac.AccountSubTypeName	<> ''Overhead''
				)
			OR	(
					gac.AccountSubTypeName	= ''Overhead''
				and	Oh.OverHeadCode			IN (''UNKNOWN'',''ALLOC'')
				)
			)
			'
		+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable) ' END +
		+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable) ' END

		END +
	
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
+ CASE WHEN @IncludeFeeAdjustments = 1 THEN ' AND Fa.FeeAdjustmentCode IN (''NORMAL'',''FEEADJUST'')' ELSE ' AND Fa.FeeAdjustmentCode IN (''NORMAL'')' END +
'
Group By
	pb.GlobalGlAccountCategoryKey,
    pb.ActivityTypeKey,
    pb.PropertyFundKey,
    pb.AllocationRegionKey,
    pb.OriginatingRegionKey,
    pb.SourceKey,
    pb.GlAccountKey,
	pb.ReimbursableKey,
	pb.FeeAdjustmentKey,
	pb.FunctionalDepartmentKey,
	pb.OverheadKey

')
print @cmdString
IF LEN(@cmdString) > 7990
	RAISERROR ('Dynamic SQL to large',16,1)
	
EXEC (@cmdString)



--Get reforecast information
--Q1
SET @cmdString = (Select '

INSERT INTO #ProfitabilityReport
SELECT 
	pr.GlobalGlAccountCategoryKey,
    pr.ActivityTypeKey,
    pr.PropertyFundKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.SourceKey,
    pr.GlAccountKey,
	pr.ReimbursableKey,
	pr.FeeAdjustmentKey,
	pr.FunctionalDepartmentKey,
	pr.OverheadKey,
	'''' as CalendarPeriod,
	
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    '''' as FunctionalDepartmentCode,
    
    --Expenses must be displayed as negative
	NULL as MtdActual,
	NULL as MtdBudget,
	SUM(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdReforecastQ1,
	NULL as MtdReforecastQ2,
	NULL as MtdReforecastQ3,
	
	NULL as YtdActual,	
	NULL as YtdBudget, 
	SUM(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdReforecastQ1, 
	NULL as YtdReforecastQ2, 
	NULL as YtdReforecastQ3, 
	
	NULL as AnnualBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '
     SUM(er.Rate * pr.LocalReforecast * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
										  1
									    ELSE
										 -1 
									    END)) as AnnualReforecastQ1,								    
	 
     NULL as AnnualReforecastQ2,								    
     NULL as AnnualReforecastQ3

FROM
	ProfitabilityReforecast pr --WITH (INDEX=IX_Clustered)

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
	
	INNER JOIN GlAccount ga on ga.GlAccountKey = pr.GlAccountKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			
    INNER JOIN ExchangeRate er ON er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
    INNER JOIN Currency dc ON er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON  c.CalendarKey = pr.CalendarKey
    INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pr.ReimbursableKey
    INNER JOIN Source s ON s.SourceKey = pr.SourceKey

    INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey
    INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey
    INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey
    INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey
    INNER JOIN ActivityType a ON a.ActivityTypeKey = pr.ActivityTypeKey
    INNER JOIN FeeAdjustment Fa ON Fa.FeeAdjustmentKey = pr.FeeAdjustmentKey

WHERE  1 = 1
    AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ1,10,0) + '
'
+ CASE WHEN @DisplayOverheadBy = 'Unallocated' THEN 
			'
		AND (
				(
					gac.AccountSubTypeName	= ''Overhead''
				and	Oh.OverHeadCode			IN (''UNKNOWN'',''UNALLOC'')
				' +
				CASE WHEN @OverheadOriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OverheadOriginatingSubRegionFilterTable t1) ' END +
				'
				)
			OR	(
				gac.AccountSubTypeName		<> ''Overhead''
				'+
				+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable) ' END +
				+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable) ' END +
				'
				)
			)
			'

		ELSE --ALLOC
			'
		AND (
				(
					gac.AccountSubTypeName	<> ''Overhead''
				)
			OR	(
					gac.AccountSubTypeName	= ''Overhead''
				and	Oh.OverHeadCode			IN (''UNKNOWN'',''ALLOC'')
				)
			)
			'
		+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable) ' END +
		+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable) ' END

		END +
		
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
+ CASE WHEN @IncludeFeeAdjustments = 1 THEN ' AND Fa.FeeAdjustmentCode IN (''NORMAL'',''FEEADJUST'')' ELSE ' AND Fa.FeeAdjustmentCode IN (''NORMAL'')' END +
'
Group By
	pr.GlobalGlAccountCategoryKey,
    pr.ActivityTypeKey,
    pr.PropertyFundKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.SourceKey,
    pr.GlAccountKey,
	pr.ReimbursableKey,
	pr.FeeAdjustmentKey,
	pr.FunctionalDepartmentKey,
	pr.OverheadKey

')
print @cmdString
IF LEN(@cmdString) > 7990
	RAISERROR ('Dynamic SQL to large',16,1)

EXEC (@cmdString)


--Q2



--Get reforecast information
SET @cmdString = (Select '

INSERT INTO #ProfitabilityReport
SELECT 
	pr.GlobalGlAccountCategoryKey,
    pr.ActivityTypeKey,
    pr.PropertyFundKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.SourceKey,
    pr.GlAccountKey,
	pr.ReimbursableKey,
	pr.FeeAdjustmentKey,
	pr.FunctionalDepartmentKey,
	pr.OverheadKey,
	'''' as CalendarPeriod,
	
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    '''' as FunctionalDepartmentCode,
    
    --Expenses must be displayed as negative
	NULL as MtdActual,
	NULL as MtdBudget,
	NULL as MtdReforecastQ1,
	SUM(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdReforecastQ2,
	NULL as MtdReforecastQ3,
	
	NULL as YtdActual,	
	NULL as YtdBudget, 
	NULL as YtdReforecastQ1, 
	SUM(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdReforecastQ2, 
	NULL as YtdReforecastQ3, 
	
	NULL as AnnualBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '
     NULL as AnnualReforecastQ1,								    
	 
     SUM(er.Rate * pr.LocalReforecast * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
										  1
									    ELSE
										 -1 
									    END)) as AnnualReforecastQ2,								    
	 
     NULL as AnnualReforecastQ3

FROM
	ProfitabilityReforecast pr --WITH (INDEX=IX_Clustered)

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
	
	INNER JOIN GlAccount ga on ga.GlAccountKey = pr.GlAccountKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			
    INNER JOIN ExchangeRate er ON er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
    INNER JOIN Currency dc ON er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON  c.CalendarKey = pr.CalendarKey
    INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pr.ReimbursableKey
    INNER JOIN Source s ON s.SourceKey = pr.SourceKey

    INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey
    INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey
    INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey
    INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey
    INNER JOIN ActivityType a ON a.ActivityTypeKey = pr.ActivityTypeKey
    INNER JOIN FeeAdjustment Fa ON Fa.FeeAdjustmentKey = pr.FeeAdjustmentKey

WHERE  1 = 1
    AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ2,10,0) + '
'
+ CASE WHEN @DisplayOverheadBy = 'Unallocated' THEN 
			'
		AND (
				(
					gac.AccountSubTypeName	= ''Overhead''
				and	Oh.OverHeadCode			IN (''UNKNOWN'',''UNALLOC'')
				' +
				CASE WHEN @OverheadOriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OverheadOriginatingSubRegionFilterTable t1) ' END +
				'
				)
			OR	(
				gac.AccountSubTypeName		<> ''Overhead''
				'+
				+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable) ' END +
				+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable) ' END +
				'
				)
			)
			'

		ELSE --ALLOC
			'
		AND (
				(
					gac.AccountSubTypeName	<> ''Overhead''
				)
			OR	(
					gac.AccountSubTypeName	= ''Overhead''
				and	Oh.OverHeadCode			IN (''UNKNOWN'',''ALLOC'')
				)
			)
			'
		+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable) ' END +
		+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable) ' END

		END +
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
+ CASE WHEN @IncludeFeeAdjustments = 1 THEN ' AND Fa.FeeAdjustmentCode IN (''NORMAL'',''FEEADJUST'')' ELSE ' AND Fa.FeeAdjustmentCode IN (''NORMAL'')' END +
'
Group By
	pr.GlobalGlAccountCategoryKey,
    pr.ActivityTypeKey,
    pr.PropertyFundKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.SourceKey,
    pr.GlAccountKey,
	pr.ReimbursableKey,
	pr.FeeAdjustmentKey,
	pr.FunctionalDepartmentKey,
	pr.OverheadKey
')
print @cmdString
IF LEN(@cmdString) > 7990
	RAISERROR ('Dynamic SQL to large',16,1)

EXEC (@cmdString)

--Q3



--Get reforecast information
SET @cmdString = (Select '

INSERT INTO #ProfitabilityReport
SELECT 
	pr.GlobalGlAccountCategoryKey,
    pr.ActivityTypeKey,
    pr.PropertyFundKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.SourceKey,
    pr.GlAccountKey,
	pr.ReimbursableKey,
	pr.FeeAdjustmentKey,
	pr.FunctionalDepartmentKey,
	pr.OverheadKey,
	'''' as CalendarPeriod,
	
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    '''' as FunctionalDepartmentCode,
    
    --Expenses must be displayed as negative
	NULL as MtdActual,
	NULL as MtdBudget,
	NULL as MtdReforecastQ1,
	NULL as MtdReforecastQ2,
	SUM(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdReforecastQ3,
	
	NULL as YtdActual,	
	NULL as YtdBudget, 
	NULL as YtdReforecastQ1, 
	NULL as YtdReforecastQ2, 
	SUM(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdReforecastQ3, 
	
	NULL as AnnualBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '
     NULL as AnnualReforecastQ1,								    
	 NULL as AnnualReforecastQ2,								    
	 
     SUM(er.Rate * pr.LocalReforecast * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
										  1
									    ELSE
										 -1 
									    END)) as AnnualReforecastQ3

FROM
	ProfitabilityReforecast pr --WITH (INDEX=IX_Clustered)

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
	
	INNER JOIN GlAccount ga on ga.GlAccountKey = pr.GlAccountKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			
    INNER JOIN ExchangeRate er ON er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
    INNER JOIN Currency dc ON er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON  c.CalendarKey = pr.CalendarKey
    INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pr.ReimbursableKey
    INNER JOIN Source s ON s.SourceKey = pr.SourceKey

    INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey
    INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey
    INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey
    INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey
    INNER JOIN ActivityType a ON a.ActivityTypeKey = pr.ActivityTypeKey
    INNER JOIN FeeAdjustment Fa ON Fa.FeeAdjustmentKey = pr.FeeAdjustmentKey

WHERE  1 = 1
    AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ3,10,0) + '
'
+ CASE WHEN @DisplayOverheadBy = 'Unallocated' THEN 
			'
		AND (
				(
					gac.AccountSubTypeName	= ''Overhead''
				and	Oh.OverHeadCode			IN (''UNKNOWN'',''UNALLOC'')
				' +
				CASE WHEN @OverheadOriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OverheadOriginatingSubRegionFilterTable t1) ' END +
				'
				)
			OR	(
				gac.AccountSubTypeName		<> ''Overhead''
				'+
				+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable) ' END +
				+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable) ' END +
				'
				)
			)
			'

		ELSE --ALLOC
			'
		AND (
				(
					gac.AccountSubTypeName	<> ''Overhead''
				)
			OR	(
					gac.AccountSubTypeName	= ''Overhead''
				and	Oh.OverHeadCode			IN (''UNKNOWN'',''ALLOC'')
				)
			)
			'
		+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable) ' END +
		+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE ' AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable) ' END

		END +
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
+ CASE WHEN @IncludeFeeAdjustments = 1 THEN ' AND Fa.FeeAdjustmentCode IN (''NORMAL'',''FEEADJUST'')' ELSE ' AND Fa.FeeAdjustmentCode IN (''NORMAL'')' END +

'
Group By
	pr.GlobalGlAccountCategoryKey,
    pr.ActivityTypeKey,
    pr.PropertyFundKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.SourceKey,
    pr.GlAccountKey,
	pr.ReimbursableKey,
	pr.FeeAdjustmentKey,
	pr.FunctionalDepartmentKey,
	pr.OverheadKey
')
print @cmdString
IF LEN(@cmdString) > 7990
	RAISERROR ('Dynamic SQL to large',16,1)
	
EXEC (@cmdString)


SELECT 
	gac.AccountSubTypeName AS ExpenseType, 
	gac.FeeOrExpense AS FeeOrExpense,
    gac.MajorCategoryName AS MajorExpenseCategoryName,
    gac.MinorCategoryName AS MinorExpenseCategoryName,
    a.ActivityTypeName AS ActivityType,
	pf.PropertyFundName AS ReportingEntityName,
	ar.SubRegionName AS AllocationSubRegionName,
    orr.SubRegionName AS OriginatingSubRegionName,
	CASE WHEN (gac.MajorCategoryName = 'Salaries/Taxes/Benefits') THEN '' ELSE ga.Code END GlobalGlAccountCode,
    CASE WHEN (gac.MajorCategoryName = 'Salaries/Taxes/Benefits') THEN '' ELSE ga.Name END GlobalGlAccountName,    
	r.ReimbursableName,
	fa.FeeAdjustmentCode,
	s.SourceName,
	gac.GlAccountCategoryKey,
	
	res.CalendarPeriod AS ActualsExpensePeriod,
    res.EntryDate,
    res.[User],
    res.[Description],
    res.AdditionalDescription,
	res.PropertyFundCode,
	res.FunctionalDepartmentCode,
    res.OriginatingRegionCode,

	--Gross
	--Month to date    
	SUM(ISNULL(res.MtdActual,0)) AS MtdActual,
	SUM(ISNULL(res.MtdBudget,0)) AS MtdOriginalBudget,
	
	SUM(ISNULL(res.MtdReforecastQ1,0))AS MtdReforecastQ1,
	SUM(ISNULL(res.MtdReforecastQ2,0))AS MtdReforecastQ2,
	SUM(ISNULL(res.MtdReforecastQ3,0))AS MtdReforecastQ3,

	CASE WHEN gac.FeeOrExpense = 'EXPENSE' THEN SUM(ISNULL(MtdBudget,0)) - SUM(ISNULL(MtdActual,0)) ELSE SUM(ISNULL(res.MtdActual,0)) - SUM(ISNULL(MtdBudget,0)) END AS MtdVarianceQ0,
	CASE WHEN gac.FeeOrExpense = 'EXPENSE' THEN SUM(ISNULL(res.MtdReforecastQ1,0)) - SUM(ISNULL(MtdActual,0)) ELSE SUM(ISNULL(MtdActual,0)) - SUM(ISNULL(res.MtdReforecastQ1,0)) END AS MtdVarianceQ1,
	CASE WHEN gac.FeeOrExpense = 'EXPENSE' THEN SUM(ISNULL(res.MtdReforecastQ2,0)) - SUM(ISNULL(MtdActual,0)) ELSE SUM(ISNULL(MtdActual,0)) - SUM(ISNULL(res.MtdReforecastQ2,0)) END AS MtdVarianceQ2,
	CASE WHEN gac.FeeOrExpense = 'EXPENSE' THEN SUM(ISNULL(res.MtdReforecastQ3,0)) - SUM(ISNULL(MtdActual,0)) ELSE SUM(ISNULL(MtdActual,0)) - SUM(ISNULL(res.MtdReforecastQ3,0)) END AS MtdVarianceQ3,
	
	--Year to date
	SUM(ISNULL(res.YtdActual,0)) AS YtdActual,	
	SUM(ISNULL(res.YtdBudget,0)) AS YtdOriginalBudget,
	
	SUM(ISNULL(res.YtdReforecastQ1,0)) AS YtdReforecastQ1,
	SUM(ISNULL(res.YtdReforecastQ2,0)) YtdReforecastQ2,
	SUM(ISNULL(res.YtdReforecastQ3,0)) YtdReforecastQ3,
	

	CASE WHEN gac.FeeOrExpense = 'EXPENSE' THEN SUM(ISNULL(YtdBudget,0)) - SUM(ISNULL(YtdActual,0)) ELSE SUM(ISNULL(res.YtdActual,0)) - SUM(ISNULL(YtdBudget,0)) END AS YtdVarianceQ0,
	CASE WHEN gac.FeeOrExpense = 'EXPENSE' THEN SUM(ISNULL(res.YtdReforecastQ1,0)) - SUM(ISNULL(YtdActual,0)) ELSE SUM(ISNULL(YtdActual,0)) - SUM(ISNULL(res.YtdReforecastQ1,0)) END AS YtdVarianceQ1,
	CASE WHEN gac.FeeOrExpense = 'EXPENSE' THEN SUM(ISNULL(res.YtdReforecastQ2,0)) - SUM(ISNULL(YtdActual,0)) ELSE SUM(ISNULL(YtdActual,0)) - SUM(ISNULL(res.YtdReforecastQ2,0)) END AS YtdVarianceQ2,
	CASE WHEN gac.FeeOrExpense = 'EXPENSE' THEN SUM(ISNULL(res.YtdReforecastQ3,0)) - SUM(ISNULL(YtdActual,0)) ELSE SUM(ISNULL(YtdActual,0)) - SUM(ISNULL(res.YtdReforecastQ3,0)) END AS YtdVarianceQ3,
	
	--Annual
	SUM(ISNULL(res.AnnualBudget,0)) AS AnnualOriginalBudget,	
	SUM(ISNULL(res.AnnualReforecastQ1,0)) AS AnnualReforecastQ1,
	SUM(ISNULL(res.AnnualReforecastQ2,0)) AS AnnualReforecastQ2,
	SUM(ISNULL(res.AnnualReforecastQ3,0)) AS AnnualReforecastQ3

INTO
	[#Output]
FROM
	#ProfitabilityReport res
	
	INNER JOIN Overhead oh ON oh.OverheadKey = res.OverheadKey

	INNER JOIN GlAccount ga on ga.GlAccountKey = res.GlAccountKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = res.GlAccountCategoryKey
		
    INNER JOIN Reimbursable r ON  r.ReimbursableKey = res.ReimbursableKey
    INNER JOIN Source s ON s.SourceKey = res.SourceKey

    INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = res.AllocationRegionKey
    INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = res.OriginatingRegionKey
    INNER JOIN ActivityType a ON  a.ActivityTypeKey = res.ActivityTypeKey
    INNER JOIN PropertyFund pf ON pf.PropertyFundKey = res.PropertyFundKey
    INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = res.FunctionalDepartmentKey
    INNER JOIN FeeAdjustment fa ON  fa.FeeAdjustmentKey = res.FeeAdjustmentKey
	
GROUP BY
	gac.AccountSubTypeName, 
	gac.FeeOrExpense,
    gac.MajorCategoryName,
    gac.MinorCategoryName,
    a.ActivityTypeName,
	pf.PropertyFundName,
	ar.SubRegionName,
    orr.SubRegionName,
	CASE WHEN (gac.MajorCategoryName = 'Salaries/Taxes/Benefits') THEN '' ELSE ga.Code END,
    CASE WHEN (gac.MajorCategoryName = 'Salaries/Taxes/Benefits') THEN '' ELSE ga.Name END,
	r.ReimbursableName,
	fa.FeeAdjustmentCode,
	s.SourceName,
	gac.GlAccountCategoryKey,
	
	res.CalendarPeriod,
    res.EntryDate,
    res.[User],
    res.[Description],
    res.AdditionalDescription,
	res.PropertyFundCode,
	res.FunctionalDepartmentCode,
    res.OriginatingRegionCode


--Eliminate any rows, that all calcs product a 0 value, this is to reduce the report size
------------------------------------------------------------------------------------------------------------------------------------------
-- <<< NOTE !!!!!!! >>>
--Any changes to this resultset must be applied to the [stp_R_Profitability] for this stp is used in a insert into xxx exec xxx there
------------------------------------------------------------------------------------------------------------------------------------------
SELECT
	ExpenseType, 
	FeeOrExpense,
    MajorExpenseCategoryName,
    MinorExpenseCategoryName,
	GlobalGlAccountCode,
	GlobalGlAccountName,
    ActivityType,
	ReportingEntityName,
	PropertyFundCode,
	FunctionalDepartmentCode,
	AllocationSubRegionName,
	OriginatingSubRegionName,
	ActualsExpensePeriod,
    EntryDate,
    [User],
    [Description],
    AdditionalDescription,
	ReimbursableName,
	FeeAdjustmentCode,
	SourceName,
	GlAccountCategoryKey,
	
	--Gross
	--Month to date    
	MtdActual,
	MtdOriginalBudget,
	MtdReforecastQ1,
	MtdReforecastQ2,
	MtdReforecastQ3,

	MtdVarianceQ0,
	MtdVarianceQ1,
	MtdVarianceQ2,
	MtdVarianceQ3,
	
	--Year to date
	YtdActual,	
	YtdOriginalBudget,
	YtdReforecastQ1,
	YtdReforecastQ2,
	YtdReforecastQ3,

	YtdVarianceQ0,
	YtdVarianceQ1,
	YtdVarianceQ2,
	YtdVarianceQ3,
	
	--Annual
	AnnualOriginalBudget,	
	AnnualReforecastQ1,
	AnnualReforecastQ2,
	AnnualReforecastQ3

FROM
	[#Output]
--WHERE
	----Gross
	----Month to date    
	--MtdActual <> 0.00 OR
	--MtdOriginalBudget <> 0.00 OR
	--MtdReforecastQ1 <> 0.00 OR
	--MtdReforecastQ2 <> 0.00 OR
	--MtdReforecastQ3 <> 0.00 OR
	--MtdVarianceQ0 <> 0.00 OR
	--MtdVarianceQ1 <> 0.00 OR
	--MtdVarianceQ2 <> 0.00 OR
	--MtdVarianceQ3 <> 0.00 OR
	
	----Year to date
	--YtdActual <> 0.00 OR
	--YtdOriginalBudget <> 0.00 OR
	--YtdReforecastQ1 <> 0.00 OR
	--YtdReforecastQ2 <> 0.00 OR
	--YtdReforecastQ3 <> 0.00 OR
	--YtdVarianceQ0 <> 0.00 OR
	--YtdVarianceQ1 <> 0.00 OR
	--YtdVarianceQ2 <> 0.00 OR
	--YtdVarianceQ3 <> 0.00 OR
	
	----Annual
	--AnnualOriginalBudget <> 0.00 OR
	--AnnualReforecastQ1 <> 0.00 OR
	--AnnualReforecastQ2 <> 0.00 OR
	--AnnualReforecastQ3 <> 0.00
	

IF 	OBJECT_ID('tempdb..#ProfitabilityReport') IS NOT NULL
    DROP TABLE #ProfitabilityReport

IF 	OBJECT_ID('tempdb..#Output') IS NOT NULL
    DROP TABLE #Output



GO

/****** Object:  StoredProcedure [dbo].[stp_R_ProfitabilityDetailV3]    Script Date: 12/08/2010 12:01:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER OFF
GO




CREATE PROCEDURE [dbo].[stp_R_ProfitabilityDetailV3]
	@ReportExpensePeriod INT = NULL,
	@DestinationCurrency VARCHAR(3) = NULL,
	@TranslationTypeName VARCHAR(50) = NULL,

	@FunctionalDepartmentList TEXT = NULL,
	@ActivityTypeList TEXT = NULL,
	@EntityList TEXT = NULL,
	@MajorAccountCategoryList TEXT = NULL,
	@MinorAccountCategoryList TEXT = NULL,
	@AllocationRegionList TEXT = NULL,
	@AllocationSubRegionList TEXT = NULL,
	@OriginatingRegionList TEXT = NULL,
	@OriginatingSubRegionList TEXT = NULL,
	@OverheadCode Varchar(10)='ALLOC',
	
	--Customized Filter Logic Specific to this Report
	--@IncludeGrossNonPayrollExpenses TinyInt = NULL, --Not applicable to detail stp
	@IncludeFeeAdjustments TinyInt = NULL,
	--@DisplayFeeAdjustmentsBy Varchar(20) = NULL, --Not applicable to detail stp
	--@DisplayOverheadBy Varchar(20) = NULL, --Not applicable to detail stp
	@OverheadOriginatingSubRegionList TEXT = NULL 
	
	
AS



DECLARE

	@_ReportExpensePeriod INT = @ReportExpensePeriod,
	@_DestinationCurrency VARCHAR(3) = @DestinationCurrency,
	@_TranslationTypeName VARCHAR(50) = @TranslationTypeName,
	@_FunctionalDepartmentList VARCHAR(8000) = @FunctionalDepartmentList,
	@_ActivityTypeList VARCHAR(8000) = @ActivityTypeList,
	@_EntityList VARCHAR(8000) = @EntityList,
	@_MajorAccountCategoryList VARCHAR(8000) = @MajorAccountCategoryList,
	@_MinorAccountCategoryList VARCHAR(8000) = @MinorAccountCategoryList,
	@_AllocationRegionList VARCHAR(8000) = @AllocationRegionList,
	@_AllocationSubRegionList VARCHAR(8000) = @AllocationSubRegionList,
	@_OriginatingRegionList VARCHAR(8000) = @OriginatingRegionList,
	@_OriginatingSubRegionList VARCHAR(8000) = @OriginatingSubRegionList,
	@_OverheadOriginatingSubRegionList VARCHAR(8000) = @OverheadOriginatingSubRegionList	
			
--------------------------------------------------------------------------
/*	COMMON Block to setup the Report Filter Variable defaults		*/
--------------------------------------------------------------------------

IF @ReportExpensePeriod IS NULL
	SET @ReportExpensePeriod = CAST(CAST(YEAR(GETDATE()) AS VARCHAR(4)) + REPLACE(STR(MONTH(GETDATE()),2 ),' ','0')AS INT)

IF @DestinationCurrency IS NULL
	SET @DestinationCurrency = 'USD'

IF 	@TranslationTypeName IS NULL
	SET @TranslationTypeName = 'Global'

DECLARE @CalendarYear AS INT
SET @CalendarYear = CAST(SUBSTRING(CAST(@ReportExpensePeriod AS VARCHAR(10)), 1, 4) AS INT)				

DECLARE @ReforecastEffectivePeriodQ1 INT
SET @ReforecastEffectivePeriodQ1 = (SELECT TOP 1 ReforecastEffectivePeriod 
									FROM dbo.Reforecast 
									WHERE ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										  ReforecastQuarterName = 'Q1'
									ORDER BY ReforecastEffectivePeriod)								

DECLARE @ReforecastEffectivePeriodQ2 INT
SET @ReforecastEffectivePeriodQ2 = (SELECT TOP 1 ReforecastEffectivePeriod 
									FROM dbo.Reforecast 
									WHERE ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										  ReforecastQuarterName = 'Q2'
									ORDER BY ReforecastEffectivePeriod)								

DECLARE @ReforecastEffectivePeriodQ3 INT
SET @ReforecastEffectivePeriodQ3 = (SELECT TOP 1 ReforecastEffectivePeriod 
									FROM dbo.Reforecast 
									WHERE ReforecastEffectiveYear = LEFT(CAST(@ReportExpensePeriod AS VARCHAR(6)),4) AND 
										  ReforecastQuarterName = 'Q3'
									ORDER BY ReforecastEffectivePeriod)								

--------------------------------------------------------------------------
/*	COMMON Block to setup the Report Filter Tables		*/
--------------------------------------------------------------------------
	
	CREATE TABLE	#EntityFilterTable	(PropertyFundKey Int NOT NULL)
	CREATE TABLE	#FunctionalDepartmentFilterTable	(FunctionalDepartmentKey Int NOT NULL)
	CREATE TABLE	#ActivityTypeFilterTable(ActivityTypeKey Int NOT NULL)
	CREATE TABLE	#AllocationRegionFilterTable	(AllocationRegionKey Int NOT NULL)
	CREATE TABLE	#AllocationSubRegionFilterTable	(AllocationRegionKey Int NOT NULL)
	CREATE TABLE	#MajorAccountCategoryFilterTable(GlAccountCategoryKey Int NOT NULL)	
	CREATE TABLE	#MinorAccountCategoryFilterTable(GlAccountCategoryKey Int NOT NULL)	
	CREATE TABLE	#OriginatingRegionFilterTable	(OriginatingRegionKey Int NOT NULL)
	CREATE TABLE	#OriginatingSubRegionFilterTable	(OriginatingRegionKey Int NOT NULL)	
	CREATE TABLE	#OverheadOriginatingSubRegionFilterTable	(OriginatingRegionKey Int NOT NULL)	
		
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #EntityFilterTable	(PropertyFundKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #FunctionalDepartmentFilterTable	(FunctionalDepartmentKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #ActivityTypeFilterTable(ActivityTypeKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #AllocationRegionFilterTable	(AllocationRegionKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #AllocationSubRegionFilterTable	(AllocationRegionKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #MajorAccountCategoryFilterTable(GlAccountCategoryKey)	
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #MinorAccountCategoryFilterTable(GlAccountCategoryKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OriginatingRegionFilterTable	(OriginatingRegionKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OriginatingSubRegionFilterTable	(OriginatingRegionKey)
	CREATE UNIQUE CLUSTERED INDEX IX_CL ON #OverheadOriginatingSubRegionFilterTable	(OriginatingRegionKey)
	
IF (@EntityList IS NOT NULL)
	BEGIN
	Insert Into #EntityFilterTable
	Select pf.PropertyFundKey
	From dbo.Split(@_EntityList) t1
		INNER JOIN PropertyFund pf ON pf.PropertyFundName = t1.item
	
	END
	
IF (@FunctionalDepartmentList IS NOT NULL)
	BEGIN
	Insert Into #FunctionalDepartmentFilterTable
	Select fd.FunctionalDepartmentKey 
	From dbo.Split(@_FunctionalDepartmentList) t1
		INNER JOIN FunctionalDepartment fd ON fd.FunctionalDepartmentName = t1.item
	END

IF 	(@ActivityTypeList IS NOT NULL)
	BEGIN
    INSERT INTO #ActivityTypeFilterTable
    SELECT at.ActivityTypeKey 
    FROM dbo.Split(@_ActivityTypeList) t1
		INNER JOIN ActivityType at ON at.ActivityTypeName = t1.item
	END
	
IF (@AllocationRegionList IS NOT NULL)
	BEGIN
	Insert Into #AllocationRegionFilterTable
	Select ar.AllocationRegionKey 
	From dbo.Split(@_AllocationRegionList) t1
		INNER JOIN AllocationRegion ar ON ar.RegionName = t1.item
	END

IF (@AllocationSubRegionList IS NOT NULL)
	BEGIN
	Insert Into #AllocationSubRegionFilterTable
	Select ar.AllocationRegionKey
	From dbo.Split(@_AllocationSubRegionList) t1
		INNER JOIN AllocationRegion ar ON ar.SubRegionName = t1.item
	END

IF (@MajorAccountCategoryList IS NOT NULL)
	BEGIN
	Insert Into #MajorAccountCategoryFilterTable
	Select gl.GlAccountCategoryKey 
	From dbo.Split(@_MajorAccountCategoryList) t1
		INNER JOIN GlAccountCategory gl ON gl.MajorCategoryName = t1.item
	END
	
IF 	(@MinorAccountCategoryList IS NOT NULL)
	BEGIN
    INSERT INTO #MinorAccountCategoryFilterTable
    SELECT gl.GlAccountCategoryKey 
    FROM dbo.Split(@MinorAccountCategoryList) t1
		INNER JOIN GlAccountCategory gl ON gl.MinorCategoryName = t1.item
	END	

IF (@OriginatingRegionList IS NOT NULL)
	BEGIN
	Insert Into #OriginatingRegionFilterTable
	Select orr.OriginatingRegionKey 
	From dbo.Split(@_OriginatingRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.RegionName = t1.item
	END

IF (@OriginatingSubRegionList IS NOT NULL)
	BEGIN
	Insert Into #OriginatingSubRegionFilterTable
	Select orr.OriginatingRegionKey  
	From dbo.Split(@OriginatingSubRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.SubRegionName = t1.item
	END
	
IF (@OverheadOriginatingSubRegionList IS NOT NULL)
	BEGIN
	Insert Into #OverheadOriginatingSubRegionFilterTable
	Select orr.OriginatingRegionKey  
	From dbo.Split(@OverheadOriginatingSubRegionList) t1
		INNER JOIN OriginatingRegion orr ON orr.SubRegionName = t1.item
	END	
--------------------------------------------------------------------------
/*	COMMON END															*/
--------------------------------------------------------------------------

IF 	OBJECT_ID('tempdb..#ProfitabilityReport') IS NOT NULL
    DROP TABLE #ProfitabilityReport

CREATE TABLE #ProfitabilityReport
(	
	GlAccountCategoryKey		Int,
    ActivityTypeKey				Int,
    PropertyFundKey				Int,
    AllocationRegionKey			Int,
    OriginatingRegionKey		Int,
    SourceKey					Int,
    GlAccountKey				Int,
	ReimbursableKey				Int,
	FeeAdjustmentKey			Int,
	FunctionalDepartmentKey		Int,
	OverheadKey					Int,
	
	EntryDate					VARCHAR(10),
	[User]						NVARCHAR(20),
	[Description]				NVARCHAR(60),
	AdditionalDescription		NVARCHAR(4000),
	PropertyFundCode			Varchar(6) DEFAULT(''), --Varchar, for this helps to keep reports size smaller
	OriginatingRegionCode		Varchar(15) DEFAULT(''), --Varchar, for this helps to keep reports size smaller
	FunctionalDepartmentCode	Varchar(15) DEFAULT(''), --Varchar, for this helps to keep reports size smaller

	--Month to date	
	MtdGrossActual				MONEY,
	MtdGrossBudget				MONEY,
	MtdGrossReforecastQ1		MONEY,
	MtdGrossReforecastQ2		MONEY,
	MtdGrossReforecastQ3		MONEY,
	
	--Year to date
	YtdGrossActual				MONEY,	
	YtdGrossBudget				MONEY, 
	YtdGrossReforecastQ1		MONEY, 
	YtdGrossReforecastQ2		MONEY, 
	YtdGrossReforecastQ3		MONEY, 

	--Annual	
	AnnualGrossBudget			MONEY,
	AnnualGrossReforecastQ1		MONEY,
	AnnualGrossReforecastQ2		MONEY,
	AnnualGrossReforecastQ3		MONEY
)

DECLARE @cmdString Varchar(8000)




--Get actual information
SET @cmdString = (Select '

INSERT INTO #ProfitabilityReport
SELECT 	
	pa.GlobalGlAccountCategoryKey,
    pa.ActivityTypeKey,
    pa.PropertyFundKey,
    pa.AllocationRegionKey,
    pa.OriginatingRegionKey,
    pa.SourceKey,
    pa.GlAccountKey,
	pa.ReimbursableKey,
	(Select FeeAdjustmentKey From FeeAdjustment Where FeeAdjustmentCode = ''NORMAL'') FeeAdjustmentKey,
	pa.FunctionalDepartmentKey,
	pa.OverheadKey,
	
    CONVERT(varchar(10),ISNULL(pa.EntryDate,''''), 101) as EntryDate,
    ISNULL(pa.[User], '''') [User],
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.Description ELSE '''' END as Description,
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.AdditionalDescription ELSE '''' END as AdditionalDescription,
    ISNULL(pa.PropertyFundCode, '''') PropertyFundCode,
    ISNULL(pa.OriginatingRegionCode, '''') OriginatingRegionCode,
	ISNULL(pa.FunctionalDepartmentCode, '''') FunctionalDepartmentCode,
	
    -- Expenses must be displayed as negative an Income is saved in MRI as negative
	SUM(
		er.Rate * -1 *
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as MtdGrossActual,
	NULL as MtdGrossBudget,
	SUM(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003,201006,201010)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdGrossReforecastQ1,
	SUM(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003,201006,201010)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdGrossReforecastQ2,
	SUM(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003,201006,201010)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as MtdGrossReforecastQ3,
	
	SUM(
		er.Rate * -1 *
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pa.LocalActual
		ELSE
			0
		END
	) as YtdGrossActual,
	NULL as YtdGrossBudget,
	SUM(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003,201006,201010)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdGrossReforecastQ1,
	SUM(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003,201006,201010)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdGrossReforecastQ2,
	SUM(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003,201006,201010)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as YtdGrossReforecastQ3,
	
	NULL as AnnualGrossBudget,
	SUM(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ1,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ1,6,0) + ' NOT IN (201003,201006,201010)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ1,
	SUM(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ2,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ2,6,0) + ' NOT IN (201003,201006,201010)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ2,
	SUM(
		er.Rate * -1 *
		CASE WHEN c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + '
			 AND c.CalendarPeriod < ' + STR(@ReforecastEffectivePeriodQ3,6,0) + 
			/*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
			/*Exclude actual... actuals here so we don't double count on the grinder actuals*/
			' 
			AND (
					gac.AccountSubTypeName <> ''Non-Payroll''
				 OR	' + STR(@ReforecastEffectivePeriodQ3,6,0) + ' NOT IN (201003,201006,201010)
				 )
			THEN
				'+--ie not payroll and is unalloc then ... dont use actual, use reforecast+
				'
				CASE WHEN gac.MajorCategoryName <> ''Salaries/Taxes/Benefits'' AND oh.OverheadCode = ''UNALLOC'' THEN 
					0
				ELSE
					pa.LocalActual
				END
		ELSE 
			0 
		END
	) as AnnualGrossReforecastQ3
	

FROM
	ProfitabilityActual pa

	INNER JOIN Overhead oh ON oh.OverheadKey = pa.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1

	INNER JOIN GlAccount ga on ga.GlAccountKey = pa.GlAccountKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pa.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pa.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pa.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pa.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pa.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pa.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pa.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pa.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
		
    INNER JOIN ExchangeRate er ON  er.SourceCurrencyKey = pa.LocalCurrencyKey AND er.CalendarKey = pa.CalendarKey
    INNER JOIN Currency dc ON  dc.CurrencyKey = er.DestinationCurrencyKey
    INNER JOIN Reimbursable r ON  r.ReimbursableKey = pa.ReimbursableKey
    INNER JOIN Calendar c ON  c.CalendarKey = pa.CalendarKey
    INNER JOIN Source s ON s.SourceKey = pa.SourceKey

    INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pa.AllocationRegionKey
    INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pa.OriginatingRegionKey
    INNER JOIN ActivityType a ON  a.ActivityTypeKey = pa.ActivityTypeKey
    INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pa.PropertyFundKey
    INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pa.FunctionalDepartmentKey

WHERE  1 = 1
    AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select t1.FunctionalDepartmentKey From #FunctionalDepartmentFilterTable t1)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select t1.ActivityTypeKey From #ActivityTypeFilterTable t1)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select t1.PropertyFundKey From #EntityFilterTable t1)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE '

 AND (
 (Oh.OverHeadCode = ''ALLOC'' AND orr.OriginatingRegionKey IN AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)) 
 OR 
 (Oh.OverHeadCode = ''UNALLOC'')
 ) 
 
 ' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE '
 
 AND (
 (Oh.OverHeadCode = ''ALLOC'' AND orr.OriginatingRegionKey IN AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)) 
 OR 
 (Oh.OverHeadCode = ''UNALLOC'')
 ) 
 ' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select t1.GlAccountCategoryKey From #MajorAccountCategoryFilterTable t1)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select t1.GlAccountCategoryKey From #MinorAccountCategoryFilterTable t1)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OriginatingRegionFilterTable t1)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OriginatingSubRegionFilterTable t1)' END +
+ CASE WHEN @OverheadOriginatingSubRegionList IS NULL THEN '' ELSE ' AND ((Oh.OverHeadCode = ''UNALLOC'' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OverheadOriginatingSubRegionFilterTable t1)) OR (Oh.OverHeadCode <> ''UNALLOC''))' END +
'
Group By
	pa.GlobalGlAccountCategoryKey,
    pa.ActivityTypeKey,
    pa.PropertyFundKey,
    pa.AllocationRegionKey,
    pa.OriginatingRegionKey,
    pa.SourceKey,
    pa.GlAccountKey,
	pa.ReimbursableKey,
	pa.FunctionalDepartmentKey,
	pa.OverheadKey,
	
    CONVERT(varchar(10),ISNULL(pa.EntryDate,''''), 101),
    ISNULL(pa.[User], ''''),
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.Description ELSE '''' END,
    CASE WHEN gac.AccountSubTypeName = ''Non-Payroll'' THEN pa.AdditionalDescription ELSE '''' END,
    ISNULL(pa.PropertyFundCode, ''''),
    ISNULL(pa.OriginatingRegionCode, ''''),
	ISNULL(pa.FunctionalDepartmentCode, '''')
	
')
print @cmdString
EXEC (@cmdString)



--Get budget information
SET @cmdString = (Select '

INSERT INTO #ProfitabilityReport
SELECT 
	pb.GlobalGlAccountCategoryKey,
    pb.ActivityTypeKey,
    pb.PropertyFundKey,
    pb.AllocationRegionKey,
    pb.OriginatingRegionKey,
    pb.SourceKey,
    pb.GlAccountKey,
	pb.ReimbursableKey,
	pb.FeeAdjustmentKey,
	pb.FunctionalDepartmentKey,
	pb.OverheadKey,
	
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
	'''' as FunctionalDepartmentCode,
	
    --Expenses must be displayed as negative
    NULL as MtdGrossActual,
	SUM(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) *
		CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as MtdGrossBudget,
	NULL as MtdGrossReforecastQ1,
	NULL as MtdGrossReforecastQ2,
	NULL as MtdGrossReforecastQ3,
	
	NULL as YtdGrossActual,	
	SUM(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) * 
		CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pb.LocalBudget
		ELSE
			0
		END
	) as YtdGrossBudget, 
	NULL as YtdGrossReforecastQ1, 
	NULL as YtdGrossReforecastQ2, 
	NULL as YtdGrossReforecastQ3, 
	
	SUM(er.Rate * pb.LocalBudget * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
									1
								  ELSE
									-1 
								  END)) as AnnualGrossBudget,
	NULL as AnnualGrossReforecastQ1,
	NULL as AnnualGrossReforecastQ2,
	NULL as AnnualGrossReforecastQ3
	
FROM
	ProfitabilityBudget pb WITH (INDEX=IX_Clustered)

	INNER JOIN Overhead oh ON oh.OverheadKey = pb.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
	
	INNER JOIN GlAccount ga on ga.GlAccountKey = pb.GlAccountKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pb.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pb.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pb.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pb.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pb.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pb.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pb.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pb.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			
    INNER JOIN ExchangeRate er ON er.SourceCurrencyKey = pb.LocalCurrencyKey AND er.CalendarKey = pb.CalendarKey
    INNER JOIN Currency dc ON er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON  c.CalendarKey = pb.CalendarKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pb.ReimbursableKey
    INNER JOIN Source s ON s.SourceKey = pb.SourceKey

    INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pb.AllocationRegionKey
    INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pb.OriginatingRegionKey
    INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pb.PropertyFundKey
    INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pb.FunctionalDepartmentKey
    INNER JOIN ActivityType a ON a.ActivityTypeKey = pb.ActivityTypeKey
    INNER JOIN FeeAdjustment Fa ON Fa.FeeAdjustmentKey = pb.FeeAdjustmentKey

WHERE  1 = 1
    AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE '

 AND (
 (Oh.OverHeadCode = ''ALLOC'' AND orr.OriginatingRegionKey IN AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)) 
 OR 
 (Oh.OverHeadCode = ''UNALLOC'')
 ) 
 
 ' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE '
 
 AND (
 (Oh.OverHeadCode = ''ALLOC'' AND orr.OriginatingRegionKey IN AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)) 
 OR 
 (Oh.OverHeadCode = ''UNALLOC'')
 ) 
 ' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
+ CASE WHEN @IncludeFeeAdjustments = 1 THEN ' AND Fa.FeeAdjustmentCode IN (''NORMAL'',''ADJUST'')' WHEN @IncludeFeeAdjustments = 0 THEN ' AND Fa.FeeAdjustmentCode IN (''NORMAL'')' ELSE '' END +
+ CASE WHEN @OverheadOriginatingSubRegionList IS NULL THEN '' ELSE ' AND ((Oh.OverHeadCode = ''UNALLOC'' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OverheadOriginatingSubRegionFilterTable t1)) OR (Oh.OverHeadCode <> ''UNALLOC''))' END +
'
Group By
	pb.GlobalGlAccountCategoryKey,
    pb.ActivityTypeKey,
    pb.PropertyFundKey,
    pb.AllocationRegionKey,
    pb.OriginatingRegionKey,
    pb.SourceKey,
    pb.GlAccountKey,
	pb.ReimbursableKey,
	pb.FeeAdjustmentKey,
	pb.FunctionalDepartmentKey,
	pb.OverheadKey

')
print @cmdString
EXEC (@cmdString)



--Get reforecast information
--Q1
SET @cmdString = (Select '

INSERT INTO #ProfitabilityReport
SELECT 
	pr.GlobalGlAccountCategoryKey,
    pr.ActivityTypeKey,
    pr.PropertyFundKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.SourceKey,
    pr.GlAccountKey,
	pr.ReimbursableKey,
	pr.FeeAdjustmentKey,
	pr.FunctionalDepartmentKey,
	pr.OverheadKey,
	
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    '''' as FunctionalDepartmentCode,
    
    --Expenses must be displayed as negative
	NULL as MtdGrossActual,
	NULL as MtdGrossBudget,
	SUM(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecastQ1,
	NULL as MtdGrossReforecastQ2,
	NULL as MtdGrossReforecastQ3,
	
	NULL as YtdGrossActual,	
	NULL as YtdGrossBudget, 
	SUM(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecastQ1, 
	NULL as YtdGrossReforecastQ2, 
	NULL as YtdGrossReforecastQ3, 
	
	NULL as AnnualGrossBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '
     SUM(er.Rate * pr.LocalReforecast * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
										  1
									    ELSE
										 -1 
									    END)) as AnnualGrossReforecastQ1,								    
	 
     NULL as AnnualGrossReforecastQ2,								    
     NULL as AnnualGrossReforecastQ3

FROM
	ProfitabilityReforecast pr WITH (INDEX=IX_Clustered)

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
	
	INNER JOIN GlAccount ga on ga.GlAccountKey = pr.GlAccountKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			
    INNER JOIN ExchangeRate er ON er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
    INNER JOIN Currency dc ON er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON  c.CalendarKey = pr.CalendarKey
    INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pr.ReimbursableKey
    INNER JOIN Source s ON s.SourceKey = pr.SourceKey

    INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey
    INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey
    INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey
    INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey
    INNER JOIN ActivityType a ON a.ActivityTypeKey = pr.ActivityTypeKey
    INNER JOIN FeeAdjustment Fa ON Fa.FeeAdjustmentKey = pr.FeeAdjustmentKey

WHERE  1 = 1
    AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ1,10,0) + '
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE '

 AND (
 (Oh.OverHeadCode = ''ALLOC'' AND orr.OriginatingRegionKey IN AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)) 
 OR 
 (Oh.OverHeadCode = ''UNALLOC'')
 ) 
 
 ' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE '
 
 AND (
 (Oh.OverHeadCode = ''ALLOC'' AND orr.OriginatingRegionKey IN AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)) 
 OR 
 (Oh.OverHeadCode = ''UNALLOC'')
 ) 
 ' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
+ CASE WHEN @IncludeFeeAdjustments = 1 THEN ' AND Fa.FeeAdjustmentCode IN (''NORMAL'',''ADJUST'')' WHEN @IncludeFeeAdjustments = 0 THEN ' AND Fa.FeeAdjustmentCode IN (''NORMAL'')' ELSE '' END +
+ CASE WHEN @OverheadOriginatingSubRegionList IS NULL THEN '' ELSE ' AND ((Oh.OverHeadCode = ''UNALLOC'' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OverheadOriginatingSubRegionFilterTable t1)) OR (Oh.OverHeadCode <> ''UNALLOC''))' END +
'
Group By
	pr.GlobalGlAccountCategoryKey,
    pr.ActivityTypeKey,
    pr.PropertyFundKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.SourceKey,
    pr.GlAccountKey,
	pr.ReimbursableKey,
	pr.FeeAdjustmentKey,
	pr.FunctionalDepartmentKey,
	pr.OverheadKey

')
print @cmdString
EXEC (@cmdString)


--Q2



--Get reforecast information
SET @cmdString = (Select '

INSERT INTO #ProfitabilityReport
SELECT 
	pr.GlobalGlAccountCategoryKey,
    pr.ActivityTypeKey,
    pr.PropertyFundKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.SourceKey,
    pr.GlAccountKey,
	pr.ReimbursableKey,
	pr.FeeAdjustmentKey,
	pr.FunctionalDepartmentKey,
	pr.OverheadKey,
	
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    '''' as FunctionalDepartmentCode,
    
    --Expenses must be displayed as negative
	NULL as MtdGrossActual,
	NULL as MtdGrossBudget,
	NULL as MtdGrossReforecastQ1,
	SUM(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecastQ2,
	NULL as MtdGrossReforecastQ3,
	
	NULL as YtdGrossActual,	
	NULL as YtdGrossBudget, 
	NULL as YtdGrossReforecastQ1, 
	SUM(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecastQ2, 
	NULL as YtdGrossReforecastQ3, 
	
	NULL as AnnualGrossBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '
     NULL as AnnualGrossReforecastQ1,								    
	 
     SUM(er.Rate * pr.LocalReforecast * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
										  1
									    ELSE
										 -1 
									    END)) as AnnualGrossReforecastQ2,								    
	 
     NULL as AnnualGrossReforecastQ3

FROM
	ProfitabilityReforecast pr WITH (INDEX=IX_Clustered)

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
	
	INNER JOIN GlAccount ga on ga.GlAccountKey = pr.GlAccountKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			
    INNER JOIN ExchangeRate er ON er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
    INNER JOIN Currency dc ON er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON  c.CalendarKey = pr.CalendarKey
    INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pr.ReimbursableKey
    INNER JOIN Source s ON s.SourceKey = pr.SourceKey

    INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey
    INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey
    INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey
    INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey
    INNER JOIN ActivityType a ON a.ActivityTypeKey = pr.ActivityTypeKey
    INNER JOIN FeeAdjustment Fa ON Fa.FeeAdjustmentKey = pr.FeeAdjustmentKey

WHERE  1 = 1
    AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ2,10,0) + '
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE '

 AND (
 (Oh.OverHeadCode = ''ALLOC'' AND orr.OriginatingRegionKey IN AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)) 
 OR 
 (Oh.OverHeadCode = ''UNALLOC'')
 ) 
 
 ' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE '
 
 AND (
 (Oh.OverHeadCode = ''ALLOC'' AND orr.OriginatingRegionKey IN AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)) 
 OR 
 (Oh.OverHeadCode = ''UNALLOC'')
 ) 
 ' END +
 + CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
+ CASE WHEN @IncludeFeeAdjustments = 1 THEN ' AND Fa.FeeAdjustmentCode IN (''NORMAL'',''ADJUST'')' WHEN @IncludeFeeAdjustments = 0 THEN ' AND Fa.FeeAdjustmentCode IN (''NORMAL'')' ELSE '' END +
+ CASE WHEN @OverheadOriginatingSubRegionList IS NULL THEN '' ELSE ' AND ((Oh.OverHeadCode = ''UNALLOC'' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OverheadOriginatingSubRegionFilterTable t1)) OR (Oh.OverHeadCode <> ''UNALLOC''))' END +
'
Group By
	pr.GlobalGlAccountCategoryKey,
    pr.ActivityTypeKey,
    pr.PropertyFundKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.SourceKey,
    pr.GlAccountKey,
	pr.ReimbursableKey,
	pr.FeeAdjustmentKey,
	pr.FunctionalDepartmentKey,
	pr.OverheadKey
')
print @cmdString
EXEC (@cmdString)

--Q3



--Get reforecast information
SET @cmdString = (Select '

INSERT INTO #ProfitabilityReport
SELECT 
	pr.GlobalGlAccountCategoryKey,
    pr.ActivityTypeKey,
    pr.PropertyFundKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.SourceKey,
    pr.GlAccountKey,
	pr.ReimbursableKey,
	pr.FeeAdjustmentKey,
	pr.FunctionalDepartmentKey,
	pr.OverheadKey,
	
    '''' as EntryDate,
    '''' as [User],
    '''' as Description,
    '''' as AdditionalDescription,
    '''' as PropertyFundCode,
    '''' as OriginatingRegionCode,
    '''' as FunctionalDepartmentCode,
    
    --Expenses must be displayed as negative
	NULL as MtdGrossActual,
	NULL as MtdGrossBudget,
	NULL as MtdGrossReforecastQ1,
	NULL as MtdGrossReforecastQ2,
	SUM(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod = ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as MtdGrossReforecastQ3,
	
	NULL as YtdGrossActual,	
	NULL as YtdGrossBudget, 
	NULL as YtdGrossReforecastQ1, 
	NULL as YtdGrossReforecastQ2, 
	SUM(
		er.Rate * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
					1
				   ELSE
					-1 
				   END) * ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
        'CASE WHEN (c.CalendarPeriod <= ' + STR(@ReportExpensePeriod,6,0) + ') THEN
			pr.LocalReforecast
		ELSE
			0
		END
	) as YtdGrossReforecastQ3, 
	
	NULL as AnnualGrossBudget, ' +
        /*Hack to pull non-payroll actuals from the grinder for Q1, 201003... yes 201003 Q1. (Ask MikeC)*/ 
        /*Remember that reforecast... actuals will get pulled here if it's available (i.e we import it)*/
    '
     NULL as AnnualGrossReforecastQ1,								    
	 NULL as AnnualGrossReforecastQ2,								    
	 
     SUM(er.Rate * pr.LocalReforecast * (CASE WHEN gac.FeeOrExpense = ''INCOME'' THEN
										  1
									    ELSE
										 -1 
									    END)) as AnnualGrossReforecastQ3

FROM
	ProfitabilityReforecast pr WITH (INDEX=IX_Clustered)

	INNER JOIN Overhead oh ON oh.OverheadKey = pr.OverheadKey
		AND OverHeadCode IN (''UNKNOWN'', ''' + @OverheadCode + ''') -- GC :: Change Control 1
	
	INNER JOIN GlAccount ga on ga.GlAccountKey = pr.GlAccountKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = ' + CASE 
			WHEN @TranslationTypeName = 'EU Corporate' THEN 'pr.EUCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Property' THEN 'pr.USPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Fund' THEN 'pr.USFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Property' THEN 'pr.EUPropertyGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'US Corporate' THEN 'pr.USCorporateGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Development' THEN 'pr.DevelopmentGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'EU Fund' THEN 'pr.EUFundGlAccountCategoryKey' 
			WHEN @TranslationTypeName = 'Global' THEN 'pr.GlobalGlAccountCategoryKey' 
			ELSE 'break:not valid hierarchyname' END + '
			
    INNER JOIN ExchangeRate er ON er.SourceCurrencyKey = pr.LocalCurrencyKey AND er.CalendarKey = pr.CalendarKey
    INNER JOIN Currency dc ON er.DestinationCurrencyKey = dc.CurrencyKey
    INNER JOIN Calendar c ON  c.CalendarKey = pr.CalendarKey
    INNER JOIN Reforecast ref ON ref.ReforecastKey = pr.ReforecastKey
    INNER JOIN Reimbursable r ON r.ReimbursableKey = pr.ReimbursableKey
    INNER JOIN Source s ON s.SourceKey = pr.SourceKey

    INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = pr.AllocationRegionKey
    INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pr.OriginatingRegionKey
    INNER JOIN PropertyFund pf ON pf.PropertyFundKey = pr.PropertyFundKey
    INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = pr.FunctionalDepartmentKey
    INNER JOIN ActivityType a ON a.ActivityTypeKey = pr.ActivityTypeKey
    INNER JOIN FeeAdjustment Fa ON Fa.FeeAdjustmentKey = pr.FeeAdjustmentKey

WHERE  1 = 1
    AND c.CalendarYear = ' + STR(@CalendarYear,10,0) + '
	AND dc.CurrencyCode = ''' + @DestinationCurrency + '''
	AND gac.MinorCategoryName <> ''Architects & Engineering'' /* IMS 51655 */
	AND ref.ReforecastEffectivePeriod = ' + STR(@ReforecastEffectivePeriodQ3,10,0) + '
'
+ CASE WHEN @FunctionalDepartmentList IS NULL THEN '' ELSE ' AND fd.FunctionalDepartmentKey IN (Select FunctionalDepartmentKey From #FunctionalDepartmentFilterTable)' END +
+ CASE WHEN @ActivityTypeList IS NULL THEN '' ELSE ' AND a.ActivityTypeKey IN (Select ActivityTypeKey From #ActivityTypeFilterTable)' END +
+ CASE WHEN @EntityList IS NULL THEN '' ELSE ' AND pf.PropertyFundKey IN (Select PropertyFundKey From #EntityFilterTable)' END +
+ CASE WHEN @AllocationRegionList IS NULL THEN '' ELSE '

 AND (
 (Oh.OverHeadCode = ''ALLOC'' AND orr.OriginatingRegionKey IN AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationRegionFilterTable)) 
 OR 
 (Oh.OverHeadCode = ''UNALLOC'')
 ) 
 
 ' END +
+ CASE WHEN @AllocationSubRegionList IS NULL THEN '' ELSE '
 
 AND (
 (Oh.OverHeadCode = ''ALLOC'' AND orr.OriginatingRegionKey IN AND ar.AllocationRegionKey IN (Select AllocationRegionKey From #AllocationSubRegionFilterTable)) 
 OR 
 (Oh.OverHeadCode = ''UNALLOC'')
 ) 
 ' END +
+ CASE WHEN @MajorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MajorAccountCategoryFilterTable)' END +
+ CASE WHEN @MinorAccountCategoryList IS NULL THEN '' ELSE ' AND gac.GlAccountCategoryKey IN (Select GlAccountCategoryKey From #MinorAccountCategoryFilterTable)' END +
+ CASE WHEN @OriginatingRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingRegionFilterTable)' END +
+ CASE WHEN @OriginatingSubRegionList IS NULL THEN '' ELSE ' AND orr.OriginatingRegionKey IN (Select OriginatingRegionKey From #OriginatingSubRegionFilterTable)' END +
+ CASE WHEN @IncludeFeeAdjustments = 1 THEN ' AND Fa.FeeAdjustmentCode IN (''NORMAL'',''ADJUST'')' WHEN @IncludeFeeAdjustments = 0 THEN ' AND Fa.FeeAdjustmentCode IN (''NORMAL'')' ELSE '' END +
+ CASE WHEN @OverheadOriginatingSubRegionList IS NULL THEN '' ELSE '


 AND (
 (Oh.OverHeadCode = ''UNALLOC'' AND orr.OriginatingRegionKey IN (Select t1.OriginatingRegionKey From #OverheadOriginatingSubRegionFilterTable t1)) 
 OR 
 (Oh.OverHeadCode = ''ALLOC'')
 )' END +
'
Group By
	pr.GlobalGlAccountCategoryKey,
    pr.ActivityTypeKey,
    pr.PropertyFundKey,
    pr.AllocationRegionKey,
    pr.OriginatingRegionKey,
    pr.SourceKey,
    pr.GlAccountKey,
	pr.ReimbursableKey,
	pr.FeeAdjustmentKey,
	pr.FunctionalDepartmentKey,
	pr.OverheadKey
')
print @cmdString
EXEC (@cmdString)


SELECT 
	gac.AccountSubTypeName AS ExpenseType, 
	gac.FeeOrExpense AS FeeOrExpense,
    gac.MajorCategoryName AS MajorExpenseCategoryName,
    gac.MinorCategoryName AS MinorExpenseCategoryName,
    a.ActivityTypeName AS ActivityType,
	pf.PropertyFundName AS ReportingEntityName,
	ar.SubRegionName AS AllocationSubRegionName,
    orr.SubRegionName AS OriginatingSubRegionName,
	CASE WHEN (gac.MajorCategoryName = 'Salaries/Taxes/Benefits') THEN '' ELSE ga.Code END GlobalGlAccountCode,
    CASE WHEN (gac.MajorCategoryName = 'Salaries/Taxes/Benefits') THEN '' ELSE ga.Name END GlobalGlAccountName,
	r.ReimbursableName,
	fa.FeeAdjustmentName,
	s.SourceName,
	
    res.EntryDate,
    res.[User],
    res.[Description],
    res.AdditionalDescription,
	res.PropertyFundCode,
	res.FunctionalDepartmentCode,
    res.OriginatingRegionCode,

	--Gross
	--Month to date    
	SUM(ISNULL(res.MtdGrossActual,0)) AS MtdGrossActual,
	SUM(ISNULL(res.MtdGrossBudget,0)) AS MtdGrossOriginalBudget,
	
	SUM(ISNULL(res.MtdGrossBudget,0)) AS MtdGrossBudget,
	SUM(ISNULL(res.MtdGrossReforecastQ1,0))AS MtdGrossReforecastQ1,
	SUM(ISNULL(res.MtdGrossReforecastQ2,0))AS MtdGrossReforecastQ2,
	SUM(ISNULL(res.MtdGrossReforecastQ3,0))AS MtdGrossReforecastQ3,

	SUM(ISNULL(res.MtdGrossBudget,0)) - SUM(ISNULL(MtdGrossActual,0))AS MtdGrossVarianceQ0,
	SUM(ISNULL(res.MtdGrossReforecastQ1,0)) - SUM(ISNULL(MtdGrossActual,0))AS MtdGrossVarianceQ1,
	SUM(ISNULL(res.MtdGrossReforecastQ2,0)) - SUM(ISNULL(MtdGrossActual,0)) AS MtdGrossVarianceQ2,
	SUM(ISNULL(res.MtdGrossReforecastQ3,0)) - SUM(ISNULL(MtdGrossActual,0)) AS MtdGrossVarianceQ3,
	
	--Year to date
	SUM(ISNULL(res.YtdGrossActual,0)) AS YtdGrossActual,	
	SUM(ISNULL(res.YtdGrossBudget,0)) AS YtdGrossOriginalBudget,
	
	SUM(ISNULL(res.YtdGrossReforecastQ1,0)) AS YtdGrossReforecastQ1,
	SUM(ISNULL(res.YtdGrossReforecastQ2,0)) YtdGrossReforecastQ2,
	SUM(ISNULL(res.YtdGrossReforecastQ3,0)) YtdGrossReforecastQ3,
	

	SUM(ISNULL(YtdGrossBudget,0)) - SUM(ISNULL(YtdGrossActual,0))AS YtdGrossVarianceQ0,
	SUM(ISNULL(YtdGrossReforecastQ1,0)) - SUM(ISNULL(YtdGrossActual,0))AS YtdGrossVarianceQ1,
	SUM(ISNULL(YtdGrossReforecastQ2,0)) - SUM(ISNULL(YtdGrossActual,0)) AS YtdGrossVarianceQ2,
	SUM(ISNULL(YtdGrossReforecastQ3,0)) - SUM(ISNULL(YtdGrossActual,0)) AS YtdGrossVarianceQ3,
	
	--Annual
	SUM(ISNULL(res.AnnualGrossBudget,0)) AS AnnualGrossOriginalBudget,	
	SUM(ISNULL(res.AnnualGrossReforecastQ1,0)) AS AnnualGrossReforecastQ1,
	SUM(ISNULL(res.AnnualGrossReforecastQ2,0)) AS AnnualGrossReforecastQ2,
	SUM(ISNULL(res.AnnualGrossReforecastQ3,0)) AS AnnualGrossReforecastQ3

INTO
	[#Output]
FROM
	#ProfitabilityReport res
	
	INNER JOIN Overhead oh ON oh.OverheadKey = res.OverheadKey

	INNER JOIN GlAccount ga on ga.GlAccountKey = res.GlAccountKey
	INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = res.GlAccountCategoryKey
		
    INNER JOIN Reimbursable r ON  r.ReimbursableKey = res.ReimbursableKey
    INNER JOIN Source s ON s.SourceKey = res.SourceKey

    INNER JOIN AllocationRegion ar ON  ar.AllocationRegionKey = res.AllocationRegionKey
    INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = res.OriginatingRegionKey
    INNER JOIN ActivityType a ON  a.ActivityTypeKey = res.ActivityTypeKey
    INNER JOIN PropertyFund pf ON pf.PropertyFundKey = res.PropertyFundKey
    INNER JOIN FunctionalDepartment fd ON  fd.FunctionalDepartmentKey = res.FunctionalDepartmentKey
    INNER JOIN FeeAdjustment fa ON  fa.FeeAdjustmentKey = res.FeeAdjustmentKey
	
GROUP BY
	gac.AccountSubTypeName, 
	gac.FeeOrExpense,
    gac.MajorCategoryName,
    gac.MinorCategoryName,
    a.ActivityTypeName,
	pf.PropertyFundName,
	ar.SubRegionName,
    orr.SubRegionName,
	CASE WHEN (gac.MajorCategoryName = 'Salaries/Taxes/Benefits') THEN '' ELSE ga.Code END,
    CASE WHEN (gac.MajorCategoryName = 'Salaries/Taxes/Benefits') THEN '' ELSE ga.Name END,
	r.ReimbursableName,
	fa.FeeAdjustmentName,
	s.SourceName,
	
    res.EntryDate,
    res.[User],
    res.[Description],
    res.AdditionalDescription,
	res.PropertyFundCode,
	res.FunctionalDepartmentCode,
    res.OriginatingRegionCode


--Eliminate any rows, that all calcs product a 0 value, this is to reduce the report size
------------------------------------------------------------------------------------------------------------------------------------------
-- <<< NOTE !!!!!!! >>>
--Any changes to this resultset must be applied to the [stp_R_Profitability] for this stp is used in a insert into xxx exec xxx there
------------------------------------------------------------------------------------------------------------------------------------------
SELECT
	ExpenseType, 
	FeeOrExpense,
    MajorExpenseCategoryName,
    MinorExpenseCategoryName,
	GlobalGlAccountCode,
	GlobalGlAccountName,
    ActivityType,
	ReportingEntityName,
	PropertyFundCode,
	FunctionalDepartmentCode,
	AllocationSubRegionName,
	OriginatingSubRegionName,
    EntryDate,
    [User],
    [Description],
    AdditionalDescription,
	ReimbursableName,
	FeeAdjustmentName,
	SourceName,

	--Gross
	--Month to date    
	MtdGrossActual,
	MtdGrossOriginalBudget,
	MtdGrossReforecastQ1,
	MtdGrossReforecastQ2,
	MtdGrossReforecastQ3,

	MtdGrossVarianceQ0,
	MtdGrossVarianceQ1,
	MtdGrossVarianceQ2,
	MtdGrossVarianceQ3,
	
	--Year to date
	YtdGrossActual,	
	YtdGrossOriginalBudget,
	YtdGrossReforecastQ1,
	YtdGrossReforecastQ2,
	YtdGrossReforecastQ3,

	YtdGrossVarianceQ0,
	YtdGrossVarianceQ1,
	YtdGrossVarianceQ2,
	YtdGrossVarianceQ3,
	
	--Annual
	AnnualGrossOriginalBudget,	
	AnnualGrossReforecastQ1,
	AnnualGrossReforecastQ2,
	AnnualGrossReforecastQ3

FROM
	[#Output]
WHERE
	--Gross
	--Month to date    
	MtdGrossActual <> 0.00 OR
	MtdGrossOriginalBudget <> 0.00 OR
	MtdGrossReforecastQ1 <> 0.00 OR
	MtdGrossReforecastQ2 <> 0.00 OR
	MtdGrossReforecastQ3 <> 0.00 OR
	MtdGrossVarianceQ0 <> 0.00 OR
	MtdGrossVarianceQ1 <> 0.00 OR
	MtdGrossVarianceQ2 <> 0.00 OR
	MtdGrossVarianceQ3 <> 0.00 OR
	
	--Year to date
	YtdGrossActual <> 0.00 OR
	YtdGrossOriginalBudget <> 0.00 OR
	YtdGrossReforecastQ1 <> 0.00 OR
	YtdGrossReforecastQ2 <> 0.00 OR
	YtdGrossReforecastQ3 <> 0.00 OR
	YtdGrossVarianceQ0 <> 0.00 OR
	YtdGrossVarianceQ1 <> 0.00 OR
	YtdGrossVarianceQ2 <> 0.00 OR
	YtdGrossVarianceQ3 <> 0.00 OR
	
	--Annual
	AnnualGrossOriginalBudget <> 0.00 OR
	AnnualGrossReforecastQ1 <> 0.00 OR
	AnnualGrossReforecastQ2 <> 0.00 OR
	AnnualGrossReforecastQ3 <> 0.00
	

IF 	OBJECT_ID('tempdb..#ProfitabilityReport') IS NOT NULL
    DROP TABLE #ProfitabilityReport

IF 	OBJECT_ID('tempdb..#Output') IS NOT NULL
    DROP TABLE #Output



GO

/****** Object:  StoredProcedure [dbo].[stp_R_ProfitabilityV2]    Script Date: 12/08/2010 12:01:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER OFF
GO




CREATE PROCEDURE [dbo].[stp_R_ProfitabilityV2]
	@ReportExpensePeriod INT = NULL,
	@ReforecastQuaterName VARCHAR(10) = NULL, --'Q1' or 'Q2' or 'Q3'
	@DestinationCurrency VARCHAR(3) = NULL,
	@TranslationTypeName VARCHAR(50) = 'Global',
	@IsGross Bit=NULL, --not used, just placeholder
	@FunctionalDepartmentList TEXT = NULL,
	@ActivityTypeList TEXT = NULL,
	@EntityList TEXT = NULL,
	@MajorAccountCategoryList TEXT = NULL,
	@MinorAccountCategoryList TEXT = NULL,
	@AllocationRegionList TEXT = NULL,
	@AllocationSubRegionList TEXT = NULL,
	@OriginatingRegionList TEXT = NULL,
	@OriginatingSubRegionList TEXT = NULL,
	@DisplayOverheadBy Varchar(12)='Allocated', --alloc / unalloc

	--Customized Filter Logic Specific to this Report
	@IncludeGrossNonPayrollExpenses TinyInt = NULL,
	@IncludeFeeAdjustments TinyInt = NULL,
	@DisplayFeeAdjustmentsBy Varchar(20) = NULL,
	@OverheadOriginatingSubRegionList TEXT = NULL 
	

AS


IF ISNULL(@DisplayOverheadBy,'') NOT IN ('Allocated','Unallocated')
	BEGIN
	RAISERROR ('@DisplayOverheadBy have invalid value (Must be one of:Allocated,Unallocated)',18,1)
	RETURN
	END

IF (@IncludeFeeAdjustments = 1 AND ISNULL(@DisplayFeeAdjustmentsBy,'') NOT IN ('AllocationRegion','ReportingEntity'))
	BEGIN
	RAISERROR ('@DisplayFeeAdjustmentsBy have invalid value (Must be one of:AllocationRegion,ReportingEntity)',18,1)
	RETURN
	END
	


CREATE TABLE #DetailResult(
	ExpenseType varchar(50) NULL,
	FeeOrExpense varchar(50) NULL,
	MajorExpenseCategoryName varchar(100) NULL,
	MinorExpenseCategoryName varchar(100) NULL,
	GlobalGlAccountCode varchar(50) NULL,
	GlobalGlAccountName varchar(150) NULL,
	ActivityType varchar(50) NULL,
	ReportingEntityName varchar(100) NULL,
	
	PropertyFundCode varchar(6) NULL,
	FunctionalDepartmentCode varchar(15) NULL,
	AllocationSubRegionName varchar(50) NULL,
	OriginatingSubRegionName varchar(50) NULL,

	ActualsExpensePeriod Varchar(6) NULL,
	EntryDate varchar(10) NULL,
	[User] nvarchar(20) NULL,
	Description nvarchar(60) NULL,
	AdditionalDescription nvarchar(4000) NULL,
	ReimbursableName varchar(50) NULL,
	FeeAdjustmentCode varchar(10) NULL,
	SourceName varchar(50) NULL,
	GlAccountCategoryKey int not null,
	
	MtdActual money NULL,
	MtdOriginalBudget money NULL,
	MtdReforecastQ1 money NULL,
	MtdReforecastQ2 money NULL,
	MtdReforecastQ3 money NULL,
	MtdVarianceQ0 money NULL,
	MtdVarianceQ1 money NULL,
	MtdVarianceQ2 money NULL,
	MtdVarianceQ3 money NULL,
	YtdActual money NULL,
	YtdOriginalBudget money NULL,
	YtdReforecastQ1 money NULL,
	YtdReforecastQ2 money NULL,
	YtdReforecastQ3 money NULL,
	YtdVarianceQ0 money NULL,
	YtdVarianceQ1 money NULL,
	YtdVarianceQ2 money NULL,
	YtdVarianceQ3 money NULL,
	AnnualOriginalBudget money NULL,
	AnnualReforecastQ1 money NULL,
	AnnualReforecastQ2 money NULL,
	AnnualReforecastQ3 money NULL
)

Insert Into #DetailResult
(	ExpenseType, 
	FeeOrExpense,
    MajorExpenseCategoryName,
    MinorExpenseCategoryName,
	GlobalGlAccountCode,
	GlobalGlAccountName,
    ActivityType,
	ReportingEntityName,
	PropertyFundCode,
	FunctionalDepartmentCode,
	AllocationSubRegionName,
	OriginatingSubRegionName,
	ActualsExpensePeriod,
    EntryDate,
    [User],
    [Description],
    AdditionalDescription,
	ReimbursableName,
	FeeAdjustmentCode,
	SourceName,
	GlAccountCategoryKey,

	--Gross
	--Month to date    
	MtdActual,
	MtdOriginalBudget,
	MtdReforecastQ1,
	MtdReforecastQ2,
	MtdReforecastQ3,

	MtdVarianceQ0,
	MtdVarianceQ1,
	MtdVarianceQ2,
	MtdVarianceQ3,
	
	--Year to date
	YtdActual,	
	YtdOriginalBudget,
	YtdReforecastQ1,
	YtdReforecastQ2,
	YtdReforecastQ3,

	YtdVarianceQ0,
	YtdVarianceQ1,
	YtdVarianceQ2,
	YtdVarianceQ3,
	
	--Annual
	AnnualOriginalBudget,	
	AnnualReforecastQ1,
	AnnualReforecastQ2,
	AnnualReforecastQ3)
	
exec [stp_R_ProfitabilityDetailV2]
	@ReportExpensePeriod = @ReportExpensePeriod,
	@DestinationCurrency = @DestinationCurrency,
	@TranslationTypeName = @TranslationTypeName,
	@FunctionalDepartmentList = @FunctionalDepartmentList,
	@ActivityTypeList = @ActivityTypeList,
	@EntityList = @EntityList,
	@MajorAccountCategoryList = @MajorAccountCategoryList,
	@MinorAccountCategoryList = @MinorAccountCategoryList,
	@AllocationRegionList = @AllocationRegionList,
	@AllocationSubRegionList = @AllocationSubRegionList,
	@OriginatingRegionList = @OriginatingRegionList,
	@OriginatingSubRegionList = @OriginatingSubRegionList,
	@DisplayOverheadBy = @DisplayOverheadBy,
	@OverheadOriginatingSubRegionList = @OverheadOriginatingSubRegionList,
	@IncludeFeeAdjustments = @IncludeFeeAdjustments


--select * Into DetailResult From #DetailResult

--select * Into #DetailResult From DetailResult


CREATE TABLE #Result (
	NumberOfSpacesToPad TinyInt NOT NULL,
	GroupDisplayCode Varchar(500) NOT NULL,
	GroupDisplayName Varchar(500) NOT NULL,
	DisplayOrderNumber Int NOT NULL,
	MtdActual money NOT NULL DEFAULT(0),
	MtdOriginalBudget money NOT NULL DEFAULT(0),
	MtdReforecastQ1 money NOT NULL DEFAULT(0),
	MtdReforecastQ2 money NOT NULL DEFAULT(0),
	MtdReforecastQ3 money NOT NULL DEFAULT(0),
	
	MtdVarianceQ0 money NOT NULL DEFAULT(0),
	MtdVarianceQ1 money NOT NULL DEFAULT(0),
	MtdVarianceQ2 money NOT NULL DEFAULT(0),
	MtdVarianceQ3 money NOT NULL DEFAULT(0),

	MtdVariancePercentageQ0 money NOT NULL DEFAULT(0),
	MtdVariancePercentageQ1 money NOT NULL DEFAULT(0),
	MtdVariancePercentageQ2 money NOT NULL DEFAULT(0),
	MtdVariancePercentageQ3 money NOT NULL DEFAULT(0),
	
	YtdActual money NOT NULL DEFAULT(0),
	YtdOriginalBudget money NOT NULL DEFAULT(0),
	YtdReforecastQ1 money NOT NULL DEFAULT(0),
	YtdReforecastQ2 money NOT NULL DEFAULT(0),
	YtdReforecastQ3 money NOT NULL DEFAULT(0),
	
	YtdVarianceQ0 money NOT NULL DEFAULT(0),
	YtdVarianceQ1 money NOT NULL DEFAULT(0),
	YtdVarianceQ2 money NOT NULL DEFAULT(0),
	YtdVarianceQ3 money NOT NULL DEFAULT(0),
	
	YtdVariancePercentageQ0 money NOT NULL DEFAULT(0),
	YtdVariancePercentageQ1 money NOT NULL DEFAULT(0),
	YtdVariancePercentageQ2 money NOT NULL DEFAULT(0),
	YtdVariancePercentageQ3 money NOT NULL DEFAULT(0),
	
	AnnualOriginalBudget money NOT NULL DEFAULT(0),
	AnnualReforecastQ1 money NOT NULL DEFAULT(0),
	AnnualReforecastQ2 money NOT NULL DEFAULT(0),
	AnnualReforecastQ3 money NOT NULL DEFAULT(0)
)

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
VALUES(0,'REVENUE','REVENUE',100)

Insert Into #Result
(NumberOfSpacesToPad,GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
VALUES(0, 'OPERATINGREVENUE', 'Operating Revenue',200)

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		gac.MinorCategoryName GroupDisplayCode,
		gac.MinorCategoryName,
		201 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0),
		ISNULL(SUM(t1.MtdOriginalBudget),0),
		ISNULL(SUM(t1.MtdReforecastQ1),0),
		ISNULL(SUM(t1.MtdReforecastQ2),0),
		ISNULL(SUM(t1.MtdReforecastQ3),0),
		ISNULL(SUM(t1.MtdVarianceQ0),0),
		ISNULL(SUM(t1.MtdVarianceQ1),0),
		ISNULL(SUM(t1.MtdVarianceQ2),0),
		ISNULL(SUM(t1.MtdVarianceQ3),0),
		ISNULL(SUM(t1.YtdActual),0),
		ISNULL(SUM(t1.YtdOriginalBudget),0),
		ISNULL(SUM(t1.YtdReforecastQ1),0),
		ISNULL(SUM(t1.YtdReforecastQ2),0),
		ISNULL(SUM(t1.YtdReforecastQ3),0),
		ISNULL(SUM(t1.YtdVarianceQ0),0),
		ISNULL(SUM(t1.YtdVarianceQ1),0),
		ISNULL(SUM(t1.YtdVarianceQ2),0),
		ISNULL(SUM(t1.YtdVarianceQ3),0),
		ISNULL(SUM(t1.AnnualOriginalBudget),0),
		ISNULL(SUM(t1.AnnualReforecastQ1),0),
		ISNULL(SUM(t1.AnnualReforecastQ2),0),
		ISNULL(SUM(t1.AnnualReforecastQ3),0)

From 
		GlAccountCategory gac
			LEFT OUTER JOIN (Select * 
							From #DetailResult t1
							Where t1.FeeAdjustmentCode		= 'NORMAL'
							) t1 ON gac.GlAccountCategoryKey = t1.GlAccountCategoryKey


Where	gac.FeeOrExpense		= 'INCOME'
AND		gac.MajorCategoryName	= 'Fee Income'

Group By 
		gac.MinorCategoryName
		
IF @DisplayFeeAdjustmentsBy = 'AllocationRegion'
	BEGIN
	
	Insert Into #Result
	(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
	MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
	MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
	YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
	YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
	AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)
	
	Select 
			5 NumberOfSpacesToPad,
			t1.MinorExpenseCategoryName + '-' + t1.AllocationSubRegionName GroupDisplayCode,
			t1.AllocationSubRegionName + ' Adjustment',
			201 DisplayOrderNumber,
			ISNULL(SUM(t1.MtdActual),0),
			ISNULL(SUM(t1.MtdOriginalBudget),0),
			ISNULL(SUM(t1.MtdReforecastQ1),0),
			ISNULL(SUM(t1.MtdReforecastQ2),0),
			ISNULL(SUM(t1.MtdReforecastQ3),0),
			ISNULL(SUM(t1.MtdVarianceQ0),0),
			ISNULL(SUM(t1.MtdVarianceQ1),0),
			ISNULL(SUM(t1.MtdVarianceQ2),0),
			ISNULL(SUM(t1.MtdVarianceQ3),0),
			ISNULL(SUM(t1.YtdActual),0),
			ISNULL(SUM(t1.YtdOriginalBudget),0),
			ISNULL(SUM(t1.YtdReforecastQ1),0),
			ISNULL(SUM(t1.YtdReforecastQ2),0),
			ISNULL(SUM(t1.YtdReforecastQ3),0),
			ISNULL(SUM(t1.YtdVarianceQ0),0),
			ISNULL(SUM(t1.YtdVarianceQ1),0),
			ISNULL(SUM(t1.YtdVarianceQ2),0),
			ISNULL(SUM(t1.YtdVarianceQ3),0),
			ISNULL(SUM(t1.AnnualOriginalBudget),0),
			ISNULL(SUM(t1.AnnualReforecastQ1),0),
			ISNULL(SUM(t1.AnnualReforecastQ2),0),
			ISNULL(SUM(t1.AnnualReforecastQ3),0)

	From #DetailResult t1


	Where	t1.FeeOrExpense				= 'INCOME'
	AND		t1.MajorExpenseCategoryName = 'Fee Income'
	AND		t1.FeeAdjustmentCode		= 'FEEADJUST'
	Group By 
			t1.MinorExpenseCategoryName + '-' + t1.AllocationSubRegionName,
			t1.AllocationSubRegionName + ' Adjustment'
	END
	
ELSE IF @DisplayFeeAdjustmentsBy = 'ReportingEntity'
	BEGIN
	Insert Into #Result
	(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
	MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
	MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
	YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
	YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
	AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)
	
	Select 
			5 NumberOfSpacesToPad,
			t1.MinorExpenseCategoryName + '-' + RTRIM(t1.ReportingEntityName) GroupDisplayCode,
			RTRIM(t1.ReportingEntityName) + ' Adjustment',
			201 DisplayOrderNumber,
			ISNULL(SUM(t1.MtdActual),0),
			ISNULL(SUM(t1.MtdOriginalBudget),0),
			ISNULL(SUM(t1.MtdReforecastQ1),0),
			ISNULL(SUM(t1.MtdReforecastQ2),0),
			ISNULL(SUM(t1.MtdReforecastQ3),0),
			ISNULL(SUM(t1.MtdVarianceQ0),0),
			ISNULL(SUM(t1.MtdVarianceQ1),0),
			ISNULL(SUM(t1.MtdVarianceQ2),0),
			ISNULL(SUM(t1.MtdVarianceQ3),0),
			ISNULL(SUM(t1.YtdActual),0),
			ISNULL(SUM(t1.YtdOriginalBudget),0),
			ISNULL(SUM(t1.YtdReforecastQ1),0),
			ISNULL(SUM(t1.YtdReforecastQ2),0),
			ISNULL(SUM(t1.YtdReforecastQ3),0),
			ISNULL(SUM(t1.YtdVarianceQ0),0),
			ISNULL(SUM(t1.YtdVarianceQ1),0),
			ISNULL(SUM(t1.YtdVarianceQ2),0),
			ISNULL(SUM(t1.YtdVarianceQ3),0),
			ISNULL(SUM(t1.AnnualOriginalBudget),0),
			ISNULL(SUM(t1.AnnualReforecastQ1),0),
			ISNULL(SUM(t1.AnnualReforecastQ2),0),
			ISNULL(SUM(t1.AnnualReforecastQ3),0)

	From #DetailResult t1


	Where	t1.FeeOrExpense				= 'INCOME'
	AND		t1.MajorExpenseCategoryName = 'Fee Income'
	AND		t1.FeeAdjustmentCode		= 'FEEADJUST'
	
	Group By 
			t1.MinorExpenseCategoryName + '-' + RTRIM(t1.ReportingEntityName),
			t1.ReportingEntityName
	END


Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'TOTALOPERATINGREVENUE' GroupDisplayCode,
		'Total Operating Revenue',
		203 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0),
		ISNULL(SUM(t1.MtdOriginalBudget),0),
		ISNULL(SUM(t1.MtdReforecastQ1),0),
		ISNULL(SUM(t1.MtdReforecastQ2),0),
		ISNULL(SUM(t1.MtdReforecastQ3),0),
		ISNULL(SUM(t1.MtdVarianceQ0),0),
		ISNULL(SUM(t1.MtdVarianceQ1),0),
		ISNULL(SUM(t1.MtdVarianceQ2),0),
		ISNULL(SUM(t1.MtdVarianceQ3),0),
		ISNULL(SUM(t1.YtdActual),0),
		ISNULL(SUM(t1.YtdOriginalBudget),0),
		ISNULL(SUM(t1.YtdReforecastQ1),0),
		ISNULL(SUM(t1.YtdReforecastQ2),0),
		ISNULL(SUM(t1.YtdReforecastQ3),0),
		ISNULL(SUM(t1.YtdVarianceQ0),0),
		ISNULL(SUM(t1.YtdVarianceQ1),0),
		ISNULL(SUM(t1.YtdVarianceQ2),0),
		ISNULL(SUM(t1.YtdVarianceQ3),0),
		ISNULL(SUM(t1.AnnualOriginalBudget),0),
		ISNULL(SUM(t1.AnnualReforecastQ1),0),
		ISNULL(SUM(t1.AnnualReforecastQ2),0),
		ISNULL(SUM(t1.AnnualReforecastQ3),0)

From #DetailResult t1


Where	t1.FeeOrExpense				= 'INCOME'
AND		t1.MajorExpenseCategoryName = 'Fee Income'	

Insert Into #Result
(NumberOfSpacesToPad,GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
VALUES(0, 'OTHERREVENUE', 'Other Revenue',210)
	
	
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		gac.MinorCategoryName GroupDisplayCode,
		gac.MinorCategoryName,
		211 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0),
		ISNULL(SUM(t1.MtdOriginalBudget),0),
		ISNULL(SUM(t1.MtdReforecastQ1),0),
		ISNULL(SUM(t1.MtdReforecastQ2),0),
		ISNULL(SUM(t1.MtdReforecastQ3),0),
		ISNULL(SUM(t1.MtdVarianceQ0),0),
		ISNULL(SUM(t1.MtdVarianceQ1),0),
		ISNULL(SUM(t1.MtdVarianceQ2),0),
		ISNULL(SUM(t1.MtdVarianceQ3),0),
		ISNULL(SUM(t1.YtdActual),0),
		ISNULL(SUM(t1.YtdOriginalBudget),0),
		ISNULL(SUM(t1.YtdReforecastQ1),0),
		ISNULL(SUM(t1.YtdReforecastQ2),0),
		ISNULL(SUM(t1.YtdReforecastQ3),0),
		ISNULL(SUM(t1.YtdVarianceQ0),0),
		ISNULL(SUM(t1.YtdVarianceQ1),0),
		ISNULL(SUM(t1.YtdVarianceQ2),0),
		ISNULL(SUM(t1.YtdVarianceQ3),0),
		ISNULL(SUM(t1.AnnualOriginalBudget),0),
		ISNULL(SUM(t1.AnnualReforecastQ1),0),
		ISNULL(SUM(t1.AnnualReforecastQ2),0),
		ISNULL(SUM(t1.AnnualReforecastQ3),0)

From GlAccountCategory gac

			LEFT OUTER JOIN #DetailResult t1 ON gac.GlAccountCategoryKey = t1.GlAccountCategoryKey


Where	gac.FeeOrExpense		= 'INCOME'
AND		gac.MajorCategoryName	<> 'Fee Income'

Group By 
		gac.MinorCategoryName
	

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'TOTALOTHERREVENUE' GroupDisplayCode,
		'Total Other Revenue',
		212 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0),
		ISNULL(SUM(t1.MtdOriginalBudget),0),
		ISNULL(SUM(t1.MtdReforecastQ1),0),
		ISNULL(SUM(t1.MtdReforecastQ2),0),
		ISNULL(SUM(t1.MtdReforecastQ3),0),
		ISNULL(SUM(t1.MtdVarianceQ0),0),
		ISNULL(SUM(t1.MtdVarianceQ1),0),
		ISNULL(SUM(t1.MtdVarianceQ2),0),
		ISNULL(SUM(t1.MtdVarianceQ3),0),
		ISNULL(SUM(t1.YtdActual),0),
		ISNULL(SUM(t1.YtdOriginalBudget),0),
		ISNULL(SUM(t1.YtdReforecastQ1),0),
		ISNULL(SUM(t1.YtdReforecastQ2),0),
		ISNULL(SUM(t1.YtdReforecastQ3),0),
		ISNULL(SUM(t1.YtdVarianceQ0),0),
		ISNULL(SUM(t1.YtdVarianceQ1),0),
		ISNULL(SUM(t1.YtdVarianceQ2),0),
		ISNULL(SUM(t1.YtdVarianceQ3),0),
		ISNULL(SUM(t1.AnnualOriginalBudget),0),
		ISNULL(SUM(t1.AnnualReforecastQ1),0),
		ISNULL(SUM(t1.AnnualReforecastQ2),0),
		ISNULL(SUM(t1.AnnualReforecastQ3),0)

From #DetailResult t1


Where	t1.FeeOrExpense				= 'INCOME'
AND		t1.MajorExpenseCategoryName <> 'Fee Income'	


Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'TOTALREVENUE' GroupDisplayCode,
		'Total Revenue',
		220 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0),
		ISNULL(SUM(t1.MtdOriginalBudget),0),
		ISNULL(SUM(t1.MtdReforecastQ1),0),
		ISNULL(SUM(t1.MtdReforecastQ2),0),
		ISNULL(SUM(t1.MtdReforecastQ3),0),
		ISNULL(SUM(t1.MtdVarianceQ0),0),
		ISNULL(SUM(t1.MtdVarianceQ1),0),
		ISNULL(SUM(t1.MtdVarianceQ2),0),
		ISNULL(SUM(t1.MtdVarianceQ3),0),
		ISNULL(SUM(t1.YtdActual),0),
		ISNULL(SUM(t1.YtdOriginalBudget),0),
		ISNULL(SUM(t1.YtdReforecastQ1),0),
		ISNULL(SUM(t1.YtdReforecastQ2),0),
		ISNULL(SUM(t1.YtdReforecastQ3),0),
		ISNULL(SUM(t1.YtdVarianceQ0),0),
		ISNULL(SUM(t1.YtdVarianceQ1),0),
		ISNULL(SUM(t1.YtdVarianceQ2),0),
		ISNULL(SUM(t1.YtdVarianceQ3),0),
		ISNULL(SUM(t1.AnnualOriginalBudget),0),
		ISNULL(SUM(t1.AnnualReforecastQ1),0),
		ISNULL(SUM(t1.AnnualReforecastQ2),0),
		ISNULL(SUM(t1.AnnualReforecastQ3),0)

From #DetailResult t1
Where	t1.FeeOrExpense				= 'INCOME'

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'BLANK' GroupDisplayCode,
		'',
		230 DisplayOrderNumber


Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'EXPENSES' GroupDisplayCode,
		'EXPENSES',
		240 DisplayOrderNumber
		
		
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'PAYROLLEXPENSES' GroupDisplayCode,
		'Payroll Expenses',
		241 DisplayOrderNumber


		
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'Gross ' + t1.MajorExpenseCategoryName GroupDisplayCode,
		'Gross ' + t1.MajorExpenseCategoryName,
		242 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0) * -1,
		ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.YtdActual),0) * -1,
		ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

From #DetailResult t1
Where	t1.FeeOrExpense				= 'EXPENSE'
AND		t1.MajorExpenseCategoryName = 'Salaries/Taxes/Benefits'
AND		t1.ExpenseType				<> 'Overhead'
Group By 
		t1.MajorExpenseCategoryName
		
		
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'Reimbursed ' + t1.MajorExpenseCategoryName GroupDisplayCode,
		'Reimbursed ' + t1.MajorExpenseCategoryName,
		243 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0) * -1,
		ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.YtdActual),0) * -1,
		ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

From #DetailResult t1
Where	t1.FeeOrExpense				= 'EXPENSE'
AND		t1.MajorExpenseCategoryName = 'Salaries/Taxes/Benefits'
AND		t1.ReimbursableName			= 'Reimbursable'
AND		t1.ExpenseType				<> 'Overhead'
Group By 
		t1.MajorExpenseCategoryName	

		
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'Total Net ' + t1.MajorExpenseCategoryName GroupDisplayCode,
		'Total Net ' + t1.MajorExpenseCategoryName,
		244 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0) * -1,
		ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.YtdActual),0) * -1,
		ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

From #DetailResult t1
Where	t1.FeeOrExpense				= 'EXPENSE'
AND		t1.MajorExpenseCategoryName = 'Salaries/Taxes/Benefits'
AND		t1.ReimbursableName			= 'Not Reimbursable'
AND		t1.ExpenseType				<> 'Overhead'
Group By 
		t1.MajorExpenseCategoryName	
		
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'Payroll Reimbursement Rate' GroupDisplayCode,
		'% Recovery',
		245 DisplayOrderNumber,
		ISNULL(Reimbursed.MtdActual / CASE WHEN Gross.MtdActual = 0 THEN NULL ELSE Gross.MtdActual END,0),
		ISNULL(Reimbursed.MtdOriginalBudget / CASE WHEN Gross.MtdOriginalBudget = 0 THEN NULL ELSE Gross.MtdOriginalBudget END,0),
		ISNULL(Reimbursed.MtdReforecastQ1 / CASE WHEN Gross.MtdReforecastQ1 = 0 THEN NULL ELSE Gross.MtdReforecastQ1 END,0),
		ISNULL(Reimbursed.MtdReforecastQ2 / CASE WHEN Gross.MtdReforecastQ2 = 0 THEN NULL ELSE Gross.MtdReforecastQ2 END,0),
		ISNULL(Reimbursed.MtdReforecastQ3 / CASE WHEN Gross.MtdReforecastQ3 = 0 THEN NULL ELSE Gross.MtdReforecastQ3 END,0),
		0,
		0,
		0,
		0,
		ISNULL(Reimbursed.YtdActual / CASE WHEN Gross.YtdActual = 0 THEN NULL ELSE Gross.YtdActual END,0),
		ISNULL(Reimbursed.YtdOriginalBudget / CASE WHEN Gross.YtdOriginalBudget = 0 THEN NULL ELSE Gross.YtdOriginalBudget END,0),
		ISNULL(Reimbursed.YtdReforecastQ1 / CASE WHEN Gross.YtdReforecastQ1 = 0 THEN NULL ELSE Gross.YtdReforecastQ1 END,0),
		ISNULL(Reimbursed.YtdReforecastQ2 / CASE WHEN Gross.YtdReforecastQ2 = 0 THEN NULL ELSE Gross.YtdReforecastQ2 END,0),
		ISNULL(Reimbursed.YtdReforecastQ3 / CASE WHEN Gross.YtdReforecastQ3 = 0 THEN NULL ELSE Gross.YtdReforecastQ3 END,0),
		0,
		0,
		0,
		0,
		ISNULL(Reimbursed.AnnualOriginalBudget / CASE WHEN Gross.AnnualOriginalBudget = 0 THEN NULL ELSE Gross.AnnualOriginalBudget END,0),
		ISNULL(Reimbursed.AnnualReforecastQ1 / CASE WHEN Gross.AnnualReforecastQ1 = 0 THEN NULL ELSE Gross.AnnualReforecastQ1 END,0),
		ISNULL(Reimbursed.AnnualReforecastQ2 / CASE WHEN Gross.AnnualReforecastQ2 = 0 THEN NULL ELSE Gross.AnnualReforecastQ2 END,0),
		ISNULL(Reimbursed.AnnualReforecastQ3 / CASE WHEN Gross.AnnualReforecastQ3 = 0 THEN NULL ELSE Gross.AnnualReforecastQ3 END,0)
From 
	(
		Select 
					ISNULL(SUM(t1.MtdActual),0) MtdActual,
					ISNULL(SUM(t1.MtdOriginalBudget),0) MtdOriginalBudget,
					ISNULL(SUM(t1.MtdReforecastQ1),0) MtdReforecastQ1,
					ISNULL(SUM(t1.MtdReforecastQ2),0) MtdReforecastQ2,
					ISNULL(SUM(t1.MtdReforecastQ3),0) MtdReforecastQ3,
					ISNULL(SUM(t1.MtdVarianceQ0),0) MtdVarianceQ0,
					ISNULL(SUM(t1.MtdVarianceQ1),0) MtdVarianceQ1,
					ISNULL(SUM(t1.MtdVarianceQ2),0) MtdVarianceQ2,
					ISNULL(SUM(t1.MtdVarianceQ3),0) MtdVarianceQ3,
					ISNULL(SUM(t1.YtdActual),0) YtdActual,
					ISNULL(SUM(t1.YtdOriginalBudget),0) YtdOriginalBudget,
					ISNULL(SUM(t1.YtdReforecastQ1),0) YtdReforecastQ1,
					ISNULL(SUM(t1.YtdReforecastQ2),0) YtdReforecastQ2,
					ISNULL(SUM(t1.YtdReforecastQ3),0) YtdReforecastQ3,
					ISNULL(SUM(t1.YtdVarianceQ0),0) YtdVarianceQ0,
					ISNULL(SUM(t1.YtdVarianceQ1),0) YtdVarianceQ1,
					ISNULL(SUM(t1.YtdVarianceQ2),0) YtdVarianceQ2,
					ISNULL(SUM(t1.YtdVarianceQ3),0) YtdVarianceQ3,
					ISNULL(SUM(t1.AnnualOriginalBudget),0) AnnualOriginalBudget,
					ISNULL(SUM(t1.AnnualReforecastQ1),0) AnnualReforecastQ1,
					ISNULL(SUM(t1.AnnualReforecastQ2),0) AnnualReforecastQ2,
					ISNULL(SUM(t1.AnnualReforecastQ3),0) AnnualReforecastQ3

		From #DetailResult t1
		Where	t1.FeeOrExpense				= 'EXPENSE'
		AND		t1.MajorExpenseCategoryName = 'Salaries/Taxes/Benefits'
		AND		t1.ReimbursableName			= 'Reimbursable'
		AND		t1.ExpenseType				<> 'Overhead'
		) Reimbursed
		CROSS JOIN 
			(
				Select 
					ISNULL(SUM(t1.MtdActual),0) MtdActual,
					ISNULL(SUM(t1.MtdOriginalBudget),0) MtdOriginalBudget,
					ISNULL(SUM(t1.MtdReforecastQ1),0) MtdReforecastQ1,
					ISNULL(SUM(t1.MtdReforecastQ2),0) MtdReforecastQ2,
					ISNULL(SUM(t1.MtdReforecastQ3),0) MtdReforecastQ3,
					ISNULL(SUM(t1.MtdVarianceQ0),0) MtdVarianceQ0,
					ISNULL(SUM(t1.MtdVarianceQ1),0) MtdVarianceQ1,
					ISNULL(SUM(t1.MtdVarianceQ2),0) MtdVarianceQ2,
					ISNULL(SUM(t1.MtdVarianceQ3),0) MtdVarianceQ3,
					ISNULL(SUM(t1.YtdActual),0) YtdActual,
					ISNULL(SUM(t1.YtdOriginalBudget),0) YtdOriginalBudget,
					ISNULL(SUM(t1.YtdReforecastQ1),0) YtdReforecastQ1,
					ISNULL(SUM(t1.YtdReforecastQ2),0) YtdReforecastQ2,
					ISNULL(SUM(t1.YtdReforecastQ3),0) YtdReforecastQ3,
					ISNULL(SUM(t1.YtdVarianceQ0),0) YtdVarianceQ0,
					ISNULL(SUM(t1.YtdVarianceQ1),0) YtdVarianceQ1,
					ISNULL(SUM(t1.YtdVarianceQ2),0) YtdVarianceQ2,
					ISNULL(SUM(t1.YtdVarianceQ3),0) YtdVarianceQ3,
					ISNULL(SUM(t1.AnnualOriginalBudget),0) AnnualOriginalBudget,
					ISNULL(SUM(t1.AnnualReforecastQ1),0) AnnualReforecastQ1,
					ISNULL(SUM(t1.AnnualReforecastQ2),0) AnnualReforecastQ2,
					ISNULL(SUM(t1.AnnualReforecastQ3),0) AnnualReforecastQ3

				From #DetailResult t1
				Where	t1.FeeOrExpense				= 'EXPENSE'
				AND		t1.MajorExpenseCategoryName = 'Salaries/Taxes/Benefits'
				AND		t1.ExpenseType				<> 'Overhead'
			
			) Gross 
	
--Calculate the Payroll Reimbursement Rate Variance Columns
Update 		#Result
Set			
			MtdVarianceQ0 = (MtdActual - MtdOriginalBudget) * -1,
			MtdVarianceQ1 = (MtdActual - MtdReforecastQ1) * -1,
			MtdVarianceQ2 = (MtdActual - MtdReforecastQ2) * -1,
			MtdVarianceQ3 = (MtdActual - MtdReforecastQ3) * -1,
			YtdVarianceQ0 = (YtdActual - YtdOriginalBudget) * -1,
			YtdVarianceQ1 = (YtdActual - YtdReforecastQ1) * -1,
			YtdVarianceQ2 = (YtdActual - YtdReforecastQ2) * -1,
			YtdVarianceQ3 = (YtdActual - YtdReforecastQ3) * -1

Where	GroupDisplayCode = 'Payroll Reimbursement Rate'
AND		DisplayOrderNumber = 245	

	
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'BLANK' GroupDisplayCode,
		'',
		250 DisplayOrderNumber
		
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'OVERHEADEXPENSE' GroupDisplayCode,
		'Overhead  Expenses',
		260 DisplayOrderNumber

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'GROSSOVERHEADEXPENSE' GroupDisplayCode,
		'Gross Overhead  Expenses',
		261 DisplayOrderNumber

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		gac.MajorCategoryName GroupDisplayCode,
		gac.MajorCategoryName,
		262 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0) * -1,
		ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.YtdActual),0) * -1,
		ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

From GlAccountCategory gac

			LEFT OUTER JOIN (Select * 
			From #DetailResult t1 
			Where t1.ExpenseType = 'Overhead') t1 ON gac.GlAccountCategoryKey = t1.GlAccountCategoryKey
			
Where	gac.FeeOrExpense		= 'Expense'

Group By 
		gac.MajorCategoryName	
				

IF @DisplayOverheadBy = 'Unallocated'
	BEGIN
	Insert Into #Result
	(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
	MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
	MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
	YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
	YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
	AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

	Select 
			0 NumberOfSpacesToPad,
			'Total Gross Overhead Expense' GroupDisplayCode,
			'Total Gross Overhead Expense',
			263 DisplayOrderNumber,
			ISNULL(SUM(t1.MtdActual),0) * -1,
			ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.YtdActual),0) * -1,
			ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

	From #DetailResult t1
	Where	t1.FeeOrExpense		= 'Expense'
	AND		t1.ExpenseType		= 'Overhead'

END

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'REIMBERSEDOVERHEADEXPENSE' GroupDisplayCode,
		'Reimbursed Overhead  Expenses',
		270 DisplayOrderNumber

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		gac.MajorCategoryName GroupDisplayCode,
		gac.MajorCategoryName,
		271 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0) * -1,
		ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.YtdActual),0) * -1,
		ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

From GlAccountCategory gac

			LEFT OUTER JOIN (Select * 
							From #DetailResult t1
							Where	t1.ExpenseType		= 'Overhead'
							AND		t1.ReimbursableName	= 'Reimbursable'
							) t1
							 ON gac.GlAccountCategoryKey = t1.GlAccountCategoryKey
			
Where	gac.FeeOrExpense		= 'Expense'
Group By 
		gac.MajorCategoryName	
				
IF @DisplayOverheadBy = 'Unallocated'
	BEGIN

	Insert Into #Result
	(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
	MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
	MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
	YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
	YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
	AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

	Select 
			0 NumberOfSpacesToPad,
			'Total Reimbursed Overhead Expense' GroupDisplayCode,
			'Total Reimbursed Overhead Expense',
			272 DisplayOrderNumber,
			ISNULL(SUM(t1.MtdActual),0) * -1,
			ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.YtdActual),0) * -1,
			ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

	From #DetailResult t1
	Where	t1.FeeOrExpense		= 'Expense'
	AND		t1.ExpenseType		= 'Overhead'
	AND		ReimbursableName	= 'Reimbursable'
END
		
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'Total Net Overhead Expense' GroupDisplayCode,
		'Total Net Overhead Expense',
		273 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0) * -1,
		ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.YtdActual),0) * -1,
		ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

From #DetailResult t1
Where	t1.FeeOrExpense		= 'Expense'
AND		t1.ExpenseType		= 'Overhead'
AND		t1.ReimbursableName = 'Not Reimbursable'


Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'Overhead Reimbursement Rate' GroupDisplayCode,
		'% Recovery',
		274 DisplayOrderNumber,
		ISNULL(Reimbursed.MtdActual / CASE WHEN Gross.MtdActual = 0 THEN NULL ELSE Gross.MtdActual END,0),
		ISNULL(Reimbursed.MtdOriginalBudget / CASE WHEN Gross.MtdOriginalBudget = 0 THEN NULL ELSE Gross.MtdOriginalBudget END,0),
		ISNULL(Reimbursed.MtdReforecastQ1 / CASE WHEN Gross.MtdReforecastQ1 = 0 THEN NULL ELSE Gross.MtdReforecastQ1 END,0),
		ISNULL(Reimbursed.MtdReforecastQ2 / CASE WHEN Gross.MtdReforecastQ2 = 0 THEN NULL ELSE Gross.MtdReforecastQ2 END,0),
		ISNULL(Reimbursed.MtdReforecastQ3 / CASE WHEN Gross.MtdReforecastQ3 = 0 THEN NULL ELSE Gross.MtdReforecastQ3 END,0),
		0,
		0,
		0,
		0,
		ISNULL(Reimbursed.YtdActual / CASE WHEN Gross.YtdActual = 0 THEN NULL ELSE Gross.YtdActual END,0),
		ISNULL(Reimbursed.YtdOriginalBudget / CASE WHEN Gross.YtdOriginalBudget = 0 THEN NULL ELSE Gross.YtdOriginalBudget END,0),
		ISNULL(Reimbursed.YtdReforecastQ1 / CASE WHEN Gross.YtdReforecastQ1 = 0 THEN NULL ELSE Gross.YtdReforecastQ1 END,0),
		ISNULL(Reimbursed.YtdReforecastQ2 / CASE WHEN Gross.YtdReforecastQ2 = 0 THEN NULL ELSE Gross.YtdReforecastQ2 END,0),
		ISNULL(Reimbursed.YtdReforecastQ3 / CASE WHEN Gross.YtdReforecastQ3 = 0 THEN NULL ELSE Gross.YtdReforecastQ3 END,0),
		0,
		0,
		0,
		0,
		ISNULL(Reimbursed.AnnualOriginalBudget / CASE WHEN Gross.AnnualOriginalBudget = 0 THEN NULL ELSE Gross.AnnualOriginalBudget END,0),
		ISNULL(Reimbursed.AnnualReforecastQ1 / CASE WHEN Gross.AnnualReforecastQ1 = 0 THEN NULL ELSE Gross.AnnualReforecastQ1 END,0),
		ISNULL(Reimbursed.AnnualReforecastQ2 / CASE WHEN Gross.AnnualReforecastQ2 = 0 THEN NULL ELSE Gross.AnnualReforecastQ2 END,0),
		ISNULL(Reimbursed.AnnualReforecastQ3 / CASE WHEN Gross.AnnualReforecastQ3 = 0 THEN NULL ELSE Gross.AnnualReforecastQ3 END,0)

From 
	(
		Select 
					ISNULL(SUM(t1.MtdActual),0) MtdActual,
					ISNULL(SUM(t1.MtdOriginalBudget),0) MtdOriginalBudget,
					ISNULL(SUM(t1.MtdReforecastQ1),0) MtdReforecastQ1,
					ISNULL(SUM(t1.MtdReforecastQ2),0) MtdReforecastQ2,
					ISNULL(SUM(t1.MtdReforecastQ3),0) MtdReforecastQ3,
					ISNULL(SUM(t1.MtdVarianceQ0),0) MtdVarianceQ0,
					ISNULL(SUM(t1.MtdVarianceQ1),0) MtdVarianceQ1,
					ISNULL(SUM(t1.MtdVarianceQ2),0) MtdVarianceQ2,
					ISNULL(SUM(t1.MtdVarianceQ3),0) MtdVarianceQ3,
					ISNULL(SUM(t1.YtdActual),0) YtdActual,
					ISNULL(SUM(t1.YtdOriginalBudget),0) YtdOriginalBudget,
					ISNULL(SUM(t1.YtdReforecastQ1),0) YtdReforecastQ1,
					ISNULL(SUM(t1.YtdReforecastQ2),0) YtdReforecastQ2,
					ISNULL(SUM(t1.YtdReforecastQ3),0) YtdReforecastQ3,
					ISNULL(SUM(t1.YtdVarianceQ0),0) YtdVarianceQ0,
					ISNULL(SUM(t1.YtdVarianceQ1),0) YtdVarianceQ1,
					ISNULL(SUM(t1.YtdVarianceQ2),0) YtdVarianceQ2,
					ISNULL(SUM(t1.YtdVarianceQ3),0) YtdVarianceQ3,
					ISNULL(SUM(t1.AnnualOriginalBudget),0) AnnualOriginalBudget,
					ISNULL(SUM(t1.AnnualReforecastQ1),0) AnnualReforecastQ1,
					ISNULL(SUM(t1.AnnualReforecastQ2),0) AnnualReforecastQ2,
					ISNULL(SUM(t1.AnnualReforecastQ3),0) AnnualReforecastQ3

		From #DetailResult t1
		Where	t1.FeeOrExpense		= 'Expense'
		AND		t1.ExpenseType		= 'Overhead'
		AND		t1.ReimbursableName	= 'Reimbursable'
		) Reimbursed
		CROSS JOIN 
			(
				Select 
					ISNULL(SUM(t1.MtdActual),0) MtdActual,
					ISNULL(SUM(t1.MtdOriginalBudget),0) MtdOriginalBudget,
					ISNULL(SUM(t1.MtdReforecastQ1),0) MtdReforecastQ1,
					ISNULL(SUM(t1.MtdReforecastQ2),0) MtdReforecastQ2,
					ISNULL(SUM(t1.MtdReforecastQ3),0) MtdReforecastQ3,
					ISNULL(SUM(t1.MtdVarianceQ0),0) MtdVarianceQ0,
					ISNULL(SUM(t1.MtdVarianceQ1),0) MtdVarianceQ1,
					ISNULL(SUM(t1.MtdVarianceQ2),0) MtdVarianceQ2,
					ISNULL(SUM(t1.MtdVarianceQ3),0) MtdVarianceQ3,
					ISNULL(SUM(t1.YtdActual),0) YtdActual,
					ISNULL(SUM(t1.YtdOriginalBudget),0) YtdOriginalBudget,
					ISNULL(SUM(t1.YtdReforecastQ1),0) YtdReforecastQ1,
					ISNULL(SUM(t1.YtdReforecastQ2),0) YtdReforecastQ2,
					ISNULL(SUM(t1.YtdReforecastQ3),0) YtdReforecastQ3,
					ISNULL(SUM(t1.YtdVarianceQ0),0) YtdVarianceQ0,
					ISNULL(SUM(t1.YtdVarianceQ1),0) YtdVarianceQ1,
					ISNULL(SUM(t1.YtdVarianceQ2),0) YtdVarianceQ2,
					ISNULL(SUM(t1.YtdVarianceQ3),0) YtdVarianceQ3,
					ISNULL(SUM(t1.AnnualOriginalBudget),0) AnnualOriginalBudget,
					ISNULL(SUM(t1.AnnualReforecastQ1),0) AnnualReforecastQ1,
					ISNULL(SUM(t1.AnnualReforecastQ2),0) AnnualReforecastQ2,
					ISNULL(SUM(t1.AnnualReforecastQ3),0) AnnualReforecastQ3

				From #DetailResult t1
				Where	t1.FeeOrExpense		= 'Expense'
				AND		t1.ExpenseType		= 'Overhead'
			) Gross 

--Calculate the Overhead Reimbursement Rate Variance Columns
Update 		#Result
Set			
			MtdVarianceQ0 = (MtdActual - MtdOriginalBudget) * -1,
			MtdVarianceQ1 = (MtdActual - MtdReforecastQ1) * -1,
			MtdVarianceQ2 = (MtdActual - MtdReforecastQ2) * -1,
			MtdVarianceQ3 = (MtdActual - MtdReforecastQ3) * -1,
			YtdVarianceQ0 = (YtdActual - YtdOriginalBudget) * -1,
			YtdVarianceQ1 = (YtdActual - YtdReforecastQ1) * -1,
			YtdVarianceQ2 = (YtdActual - YtdReforecastQ2) * -1,
			YtdVarianceQ3 = (YtdActual - YtdReforecastQ3) * -1

Where	GroupDisplayCode = 'Overhead Reimbursement Rate'
AND		DisplayOrderNumber = 274

	
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'BLANK' GroupDisplayCode,
		'',
		280 DisplayOrderNumber
		
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'NONPAYROLLEXPENSE' GroupDisplayCode,
		'Non-Payroll Expenses',
		290 DisplayOrderNumber

IF @IncludeGrossNonPayrollExpenses = 1
	BEGIN
	
	Insert Into #Result
	(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
	Select 
		0 NumberOfSpacesToPad,
		'GROSSNONPAYROLLEXPENSE' GroupDisplayCode,
		'Gross Non-Payroll  Expenses',
		291 DisplayOrderNumber

	Insert Into #Result
	(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
	MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
	MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
	YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
	YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
	AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

	Select 
			0 NumberOfSpacesToPad,
			gac.MajorCategoryName GroupDisplayCode,
			gac.MajorCategoryName,
			292 DisplayOrderNumber,
			ISNULL(SUM(t1.MtdActual),0) * -1,
			ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.YtdActual),0) * -1,
			ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

	From GlAccountCategory gac

			LEFT OUTER JOIN (Select *
							From	#DetailResult t1
							Where	t1.ExpenseType		= 'Non-Payroll'
							) t1 ON gac.GlAccountCategoryKey = t1.GlAccountCategoryKey
			
	Where	gac.FeeOrExpense		= 'Expense'
	
	Group By 
			gac.MajorCategoryName	
					

	Insert Into #Result
	(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
	MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
	MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
	YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
	YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
	AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

	Select 
			0 NumberOfSpacesToPad,
			'Total Gross Non-Payroll Expense' GroupDisplayCode,
			'Total Gross Non-Payroll Expense',
			293 DisplayOrderNumber,
			ISNULL(SUM(t1.MtdActual),0) * -1,
			ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.YtdActual),0) * -1,
			ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

	From #DetailResult t1
	Where	t1.FeeOrExpense		= 'Expense'
	AND		t1.ExpenseType		= 'Non-Payroll'

	END


Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
	0 NumberOfSpacesToPad,
	'NETNONPAYROLLEXPENSE' GroupDisplayCode,
	'Net Non-Payroll  Expenses',
	301 DisplayOrderNumber

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		gac.MajorCategoryName GroupDisplayCode,
		gac.MajorCategoryName,
		302 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0) * -1,
		ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.YtdActual),0) * -1,
		ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

From GlAccountCategory gac

			LEFT OUTER JOIN (Select * 
							From	#DetailResult t1
							Where
									t1.ExpenseType		= 'Non-Payroll'
							AND		t1.ReimbursableName = 'Not Reimbursable'

							) t1 ON gac.GlAccountCategoryKey = t1.GlAccountCategoryKey
			
Where	gac.FeeOrExpense		= 'Expense'
Group By 
		gac.MajorCategoryName	
				

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'Total Net Non-Payroll Expense' GroupDisplayCode,
		'Total Net Non-Payroll Expense',
		303 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0) * -1,
		ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.YtdActual),0) * -1,
		ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

From #DetailResult t1
Where	t1.FeeOrExpense		= 'Expense'
AND		t1.ExpenseType		= 'Non-Payroll'
AND		t1.ReimbursableName = 'Not Reimbursable'



Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'BLANK' GroupDisplayCode,
		'',
		310 DisplayOrderNumber
		
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'TOTALNETEXPENSE' GroupDisplayCode,
		'Total Net Expenses',
		320 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0) * -1,
		ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.YtdActual),0) * -1,
		ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

From #DetailResult t1
Where	t1.FeeOrExpense		= 'Expense'
AND		t1.ReimbursableName = 'Not Reimbursable'

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'BLANK' GroupDisplayCode,
		'',
		321 DisplayOrderNumber

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)
Select 
		0 NumberOfSpacesToPad,
		'PROFIT' GroupDisplayCode,
		'PROFIT',
		330 DisplayOrderNumber,
		(INC.MtdActual + EP.MtdActual) AS MtdActual,
		(INC.MtdOriginalBudget + EP.MtdOriginalBudget) AS MtdOriginalBudget,
		(INC.MtdReforecastQ1 + EP.MtdReforecastQ1) AS MtdReforecastQ1,
		(INC.MtdReforecastQ2 + EP.MtdReforecastQ2) AS MtdReforecastQ2,
		(INC.MtdReforecastQ3 + EP.MtdReforecastQ3) AS MtdReforecastQ3,
		(INC.MtdVarianceQ0 + EP.MtdVarianceQ0) AS MtdVarianceQ0,
		(INC.MtdVarianceQ1 + EP.MtdVarianceQ1) AS MtdVarianceQ1,
		(INC.MtdVarianceQ2 + EP.MtdVarianceQ2) AS MtdVarianceQ2,
		(INC.MtdVarianceQ3 + EP.MtdVarianceQ3) AS MtdVarianceQ3,
		(INC.YtdActual + EP.YtdActual) AS YtdActual,
		(INC.YtdOriginalBudget + EP.YtdOriginalBudget) AS YtdOriginalBudget,
		(INC.YtdReforecastQ1 + EP.YtdReforecastQ1) AS YtdReforecastQ1,
		(INC.YtdReforecastQ2 + EP.YtdReforecastQ2) AS YtdReforecastQ2,
		(INC.YtdReforecastQ3 + EP.YtdReforecastQ3) AS YtdReforecastQ3,
		(INC.YtdVarianceQ0 + EP.YtdVarianceQ0) AS YtdVarianceQ0,
		(INC.YtdVarianceQ1 + EP.YtdVarianceQ1) AS YtdVarianceQ1,
		(INC.YtdVarianceQ2 + EP.YtdVarianceQ2) AS YtdVarianceQ2,
		(INC.YtdVarianceQ3 + EP.YtdVarianceQ3) AS YtdVarianceQ3,
		(INC.AnnualOriginalBudget + EP.AnnualOriginalBudget) AS AnnualOriginalBudget,
		(INC.AnnualReforecastQ1 + EP.AnnualReforecastQ1) AS AnnualReforecastQ1,
		(INC.AnnualReforecastQ2 + EP.AnnualReforecastQ2) AS AnnualReforecastQ2,
		(INC.AnnualReforecastQ3 + EP.AnnualReforecastQ3) AS AnnualReforecastQ3
		
		
FROM	(
		Select 
				ISNULL(SUM(t1.MtdActual),0) MtdActual,
				ISNULL(SUM(t1.MtdOriginalBudget),0) MtdOriginalBudget,
				ISNULL(SUM(t1.MtdReforecastQ1),0) MtdReforecastQ1,
				ISNULL(SUM(t1.MtdReforecastQ2),0) MtdReforecastQ2,
				ISNULL(SUM(t1.MtdReforecastQ3),0) MtdReforecastQ3,
				ISNULL(SUM(t1.MtdVarianceQ0),0) MtdVarianceQ0,
				ISNULL(SUM(t1.MtdVarianceQ1),0) MtdVarianceQ1,
				ISNULL(SUM(t1.MtdVarianceQ2),0) MtdVarianceQ2,
				ISNULL(SUM(t1.MtdVarianceQ3),0) MtdVarianceQ3,
				ISNULL(SUM(t1.YtdActual),0) YtdActual,
				ISNULL(SUM(t1.YtdOriginalBudget),0) YtdOriginalBudget,
				ISNULL(SUM(t1.YtdReforecastQ1),0) YtdReforecastQ1,
				ISNULL(SUM(t1.YtdReforecastQ2),0) YtdReforecastQ2,
				ISNULL(SUM(t1.YtdReforecastQ3),0) YtdReforecastQ3,
				ISNULL(SUM(t1.YtdVarianceQ0),0) YtdVarianceQ0,
				ISNULL(SUM(t1.YtdVarianceQ1),0) YtdVarianceQ1,
				ISNULL(SUM(t1.YtdVarianceQ2),0) YtdVarianceQ2,
				ISNULL(SUM(t1.YtdVarianceQ3),0) YtdVarianceQ3,
				ISNULL(SUM(t1.AnnualOriginalBudget),0) AnnualOriginalBudget,
				ISNULL(SUM(t1.AnnualReforecastQ1),0) AnnualReforecastQ1,
				ISNULL(SUM(t1.AnnualReforecastQ2),0) AnnualReforecastQ2,
				ISNULL(SUM(t1.AnnualReforecastQ3),0) AnnualReforecastQ3

		From #DetailResult t1
		Where	t1.FeeOrExpense				= 'INCOME'
		) INC
		CROSS JOIN (
		Select 
				ISNULL(SUM(t1.MtdActual),0) MtdActual,
				ISNULL(SUM(t1.MtdOriginalBudget),0) MtdOriginalBudget,
				ISNULL(SUM(t1.MtdReforecastQ1),0) MtdReforecastQ1,
				ISNULL(SUM(t1.MtdReforecastQ2),0) MtdReforecastQ2,
				ISNULL(SUM(t1.MtdReforecastQ3),0) MtdReforecastQ3,
				ISNULL(SUM(t1.MtdVarianceQ0),0) MtdVarianceQ0,
				ISNULL(SUM(t1.MtdVarianceQ1),0) MtdVarianceQ1,
				ISNULL(SUM(t1.MtdVarianceQ2),0) MtdVarianceQ2,
				ISNULL(SUM(t1.MtdVarianceQ3),0) MtdVarianceQ3,
				ISNULL(SUM(t1.YtdActual),0) YtdActual,
				ISNULL(SUM(t1.YtdOriginalBudget),0) YtdOriginalBudget,
				ISNULL(SUM(t1.YtdReforecastQ1),0) YtdReforecastQ1,
				ISNULL(SUM(t1.YtdReforecastQ2),0) YtdReforecastQ2,
				ISNULL(SUM(t1.YtdReforecastQ3),0) YtdReforecastQ3,
				ISNULL(SUM(t1.YtdVarianceQ0),0) YtdVarianceQ0,
				ISNULL(SUM(t1.YtdVarianceQ1),0) YtdVarianceQ1,
				ISNULL(SUM(t1.YtdVarianceQ2),0) YtdVarianceQ2,
				ISNULL(SUM(t1.YtdVarianceQ3),0) YtdVarianceQ3,
				ISNULL(SUM(t1.AnnualOriginalBudget),0) AnnualOriginalBudget,
				ISNULL(SUM(t1.AnnualReforecastQ1),0) AnnualReforecastQ1,
				ISNULL(SUM(t1.AnnualReforecastQ2),0) AnnualReforecastQ2,
				ISNULL(SUM(t1.AnnualReforecastQ3),0) AnnualReforecastQ3

			From #DetailResult t1
			Where	t1.FeeOrExpense		= 'Expense'
			AND		t1.ReimbursableName = 'Not Reimbursable'
		) EP


Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)
Select 
		0 NumberOfSpacesToPad,
		'PROFITMARGIN' GroupDisplayCode,
		'Profit Margin (Profit / Total Revenue)',
		331 DisplayOrderNumber,
		ISNULL(((INC.MtdActual + EP.MtdActual) / CASE WHEN INC.MtdActual <> 0 THEN INC.MtdActual ELSE NULL END),0) AS MtdActual,
		ISNULL(((INC.MtdOriginalBudget + EP.MtdOriginalBudget) / CASE WHEN INC.MtdOriginalBudget <> 0 THEN INC.MtdOriginalBudget ELSE NULL END),0) AS MtdOriginalBudget,
		ISNULL(((INC.MtdReforecastQ1 + EP.MtdReforecastQ1) / CASE WHEN INC.MtdReforecastQ1 <> 0 THEN INC.MtdReforecastQ1 ELSE NULL END),0) AS MtdReforecastQ1,
		ISNULL(((INC.MtdReforecastQ2 + EP.MtdReforecastQ2) / CASE WHEN INC.MtdReforecastQ2 <> 0 THEN INC.MtdReforecastQ2 ELSE NULL END),0) AS MtdReforecastQ2,
		ISNULL(((INC.MtdReforecastQ3 + EP.MtdReforecastQ3) / CASE WHEN INC.MtdReforecastQ3 <> 0 THEN INC.MtdReforecastQ3 ELSE NULL END),0) AS MtdReforecastQ3,
		0 AS MtdVarianceQ0, --Done Below for it use these results to sub calculate
		0 AS MtdVarianceQ1, --Done Below for it use these results to sub calculate
		0 AS MtdVarianceQ2, --Done Below for it use these results to sub calculate
		0 AS MtdVarianceQ3, --Done Below for it use these results to sub calculate
		ISNULL(((INC.YtdActual + EP.YtdActual) / CASE WHEN INC.YtdActual <> 0 THEN INC.YtdActual ELSE NULL END),0) AS YtdActual,
		ISNULL(((INC.YtdOriginalBudget + EP.YtdOriginalBudget) / CASE WHEN INC.YtdOriginalBudget <> 0 THEN INC.YtdOriginalBudget ELSE NULL END),0) AS YtdOriginalBudget,
		ISNULL(((INC.YtdReforecastQ1 + EP.YtdReforecastQ1) / CASE WHEN INC.YtdReforecastQ1 <> 0 THEN INC.YtdReforecastQ1 ELSE NULL END),0) AS YtdReforecastQ1,
		ISNULL(((INC.YtdReforecastQ2 + EP.YtdReforecastQ2) / CASE WHEN INC.YtdReforecastQ2 <> 0 THEN INC.YtdReforecastQ2 ELSE NULL END),0) AS YtdReforecastQ2,
		ISNULL(((INC.YtdReforecastQ3 + EP.YtdReforecastQ3) / CASE WHEN INC.YtdReforecastQ3 <> 0 THEN INC.YtdReforecastQ3 ELSE NULL END),0) AS YtdReforecastQ3,
		0 AS YtdVarianceQ0, --Done Below for it use these results to sub calculate
		0 AS YtdVarianceQ1, --Done Below for it use these results to sub calculate
		0 AS YtdVarianceQ2, --Done Below for it use these results to sub calculate
		0 AS YtdVarianceQ3, --Done Below for it use these results to sub calculate
		ISNULL(((INC.AnnualOriginalBudget + EP.AnnualOriginalBudget) / CASE WHEN INC.AnnualOriginalBudget <> 0 THEN INC.AnnualOriginalBudget ELSE NULL END),0) AS AnnualOriginalBudget,
		ISNULL(((INC.AnnualReforecastQ1 + EP.AnnualReforecastQ1) / CASE WHEN INC.AnnualReforecastQ1 <> 0 THEN INC.AnnualReforecastQ1 ELSE NULL END),0) AS AnnualReforecastQ1,
		ISNULL(((INC.AnnualReforecastQ2 + EP.AnnualReforecastQ2) / CASE WHEN INC.AnnualReforecastQ2 <> 0 THEN INC.AnnualReforecastQ2 ELSE NULL END),0) AS AnnualReforecastQ2,
		ISNULL(((INC.AnnualReforecastQ3 + EP.AnnualReforecastQ3) / CASE WHEN INC.AnnualReforecastQ3 <> 0 THEN INC.AnnualReforecastQ3 ELSE NULL END),0) AS AnnualReforecastQ3
		
FROM	(
		Select 
				ISNULL(SUM(t1.MtdActual),0) MtdActual,
				ISNULL(SUM(t1.MtdOriginalBudget),0) MtdOriginalBudget,
				ISNULL(SUM(t1.MtdReforecastQ1),0) MtdReforecastQ1,
				ISNULL(SUM(t1.MtdReforecastQ2),0) MtdReforecastQ2,
				ISNULL(SUM(t1.MtdReforecastQ3),0) MtdReforecastQ3,
				ISNULL(SUM(t1.MtdVarianceQ0),0) MtdVarianceQ0,
				ISNULL(SUM(t1.MtdVarianceQ1),0) MtdVarianceQ1,
				ISNULL(SUM(t1.MtdVarianceQ2),0) MtdVarianceQ2,
				ISNULL(SUM(t1.MtdVarianceQ3),0) MtdVarianceQ3,
				ISNULL(SUM(t1.YtdActual),0) YtdActual,
				ISNULL(SUM(t1.YtdOriginalBudget),0) YtdOriginalBudget,
				ISNULL(SUM(t1.YtdReforecastQ1),0) YtdReforecastQ1,
				ISNULL(SUM(t1.YtdReforecastQ2),0) YtdReforecastQ2,
				ISNULL(SUM(t1.YtdReforecastQ3),0) YtdReforecastQ3,
				ISNULL(SUM(t1.YtdVarianceQ0),0) YtdVarianceQ0,
				ISNULL(SUM(t1.YtdVarianceQ1),0) YtdVarianceQ1,
				ISNULL(SUM(t1.YtdVarianceQ2),0) YtdVarianceQ2,
				ISNULL(SUM(t1.YtdVarianceQ3),0) YtdVarianceQ3,
				ISNULL(SUM(t1.AnnualOriginalBudget),0) AnnualOriginalBudget,
				ISNULL(SUM(t1.AnnualReforecastQ1),0) AnnualReforecastQ1,
				ISNULL(SUM(t1.AnnualReforecastQ2),0) AnnualReforecastQ2,
				ISNULL(SUM(t1.AnnualReforecastQ3),0) AnnualReforecastQ3

		From #DetailResult t1
		Where	t1.FeeOrExpense				= 'INCOME'
		) INC
		CROSS JOIN (
		Select 
				ISNULL(SUM(t1.MtdActual),0) MtdActual,
				ISNULL(SUM(t1.MtdOriginalBudget),0) MtdOriginalBudget,
				ISNULL(SUM(t1.MtdReforecastQ1),0) MtdReforecastQ1,
				ISNULL(SUM(t1.MtdReforecastQ2),0) MtdReforecastQ2,
				ISNULL(SUM(t1.MtdReforecastQ3),0) MtdReforecastQ3,
				ISNULL(SUM(t1.MtdVarianceQ0),0) MtdVarianceQ0,
				ISNULL(SUM(t1.MtdVarianceQ1),0) MtdVarianceQ1,
				ISNULL(SUM(t1.MtdVarianceQ2),0) MtdVarianceQ2,
				ISNULL(SUM(t1.MtdVarianceQ3),0) MtdVarianceQ3,
				ISNULL(SUM(t1.YtdActual),0) YtdActual,
				ISNULL(SUM(t1.YtdOriginalBudget),0) YtdOriginalBudget,
				ISNULL(SUM(t1.YtdReforecastQ1),0) YtdReforecastQ1,
				ISNULL(SUM(t1.YtdReforecastQ2),0) YtdReforecastQ2,
				ISNULL(SUM(t1.YtdReforecastQ3),0) YtdReforecastQ3,
				ISNULL(SUM(t1.YtdVarianceQ0),0) YtdVarianceQ0,
				ISNULL(SUM(t1.YtdVarianceQ1),0) YtdVarianceQ1,
				ISNULL(SUM(t1.YtdVarianceQ2),0) YtdVarianceQ2,
				ISNULL(SUM(t1.YtdVarianceQ3),0) YtdVarianceQ3,
				ISNULL(SUM(t1.AnnualOriginalBudget),0) AnnualOriginalBudget,
				ISNULL(SUM(t1.AnnualReforecastQ1),0) AnnualReforecastQ1,
				ISNULL(SUM(t1.AnnualReforecastQ2),0) AnnualReforecastQ2,
				ISNULL(SUM(t1.AnnualReforecastQ3),0) AnnualReforecastQ3

			From #DetailResult t1
			Where	t1.FeeOrExpense		= 'Expense'
			AND		t1.ReimbursableName = 'Not Reimbursable'
		) EP

--Calculate the Profit Variance Columns
Update 		#Result
Set			
			MtdVarianceQ0 = MtdActual - MtdOriginalBudget,
			MtdVarianceQ1 = MtdActual - MtdReforecastQ1,
			MtdVarianceQ2 = MtdActual - MtdReforecastQ2,
			MtdVarianceQ3 = MtdActual - MtdReforecastQ3,
			YtdVarianceQ0 = YtdActual - YtdOriginalBudget,
			YtdVarianceQ1 = YtdActual - YtdReforecastQ1,
			YtdVarianceQ2 = YtdActual - YtdReforecastQ2,
			YtdVarianceQ3 = YtdActual - YtdReforecastQ3

Where	GroupDisplayCode = 'PROFITMARGIN'
AND		DisplayOrderNumber = 331	
		
		
--------------------------------------------------------------------------------------------------------------------------------------	
--Final Common block to set the Variance% columns
--------------------------------------------------------------------------------------------------------------------------------------	
		
Update #Result
Set		
	MtdVariancePercentageQ0 = ISNULL(MtdVarianceQ0 / CASE WHEN MtdOriginalBudget <> 0 THEN MtdOriginalBudget ELSE NULL END,0) ,
	MtdVariancePercentageQ1 = ISNULL(MtdVarianceQ1 / CASE WHEN MtdReforecastQ1 <> 0 THEN MtdReforecastQ1 ELSE NULL END,0) ,
	MtdVariancePercentageQ2 = ISNULL(MtdVarianceQ2 / CASE WHEN MtdReforecastQ2 <> 0 THEN MtdReforecastQ2 ELSE NULL END,0) ,
	MtdVariancePercentageQ3 = ISNULL(MtdVarianceQ3 / CASE WHEN MtdReforecastQ3 <> 0 THEN MtdReforecastQ3 ELSE NULL END,0) ,

	YtdVariancePercentageQ0 = ISNULL(YtdVarianceQ0 / CASE WHEN YtdOriginalBudget <> 0 THEN YtdOriginalBudget ELSE NULL END,0) ,
	YtdVariancePercentageQ1 = ISNULL(YtdVarianceQ1 / CASE WHEN YtdReforecastQ1 <> 0 THEN YtdReforecastQ1 ELSE NULL END,0) ,
	YtdVariancePercentageQ2 = ISNULL(YtdVarianceQ2 / CASE WHEN YtdReforecastQ2 <> 0 THEN YtdReforecastQ2 ELSE NULL END,0) ,
	YtdVariancePercentageQ3 = ISNULL(YtdVarianceQ3 / CASE WHEN YtdReforecastQ3 <> 0 THEN YtdReforecastQ3 ELSE NULL END,0) 
Where GroupDisplayCode NOT IN('Payroll Reimbursement Rate','Overhead Reimbursement Rate','PROFITMARGIN')

--UNKNOWN MajorCategory

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'BLANK' GroupDisplayCode,
		'',
		340 DisplayOrderNumber

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'UNKNOWN' GroupDisplayCode,
		'Unknown',
		341 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0),
		ISNULL(SUM(t1.MtdOriginalBudget),0),
		ISNULL(SUM(t1.MtdReforecastQ1),0),
		ISNULL(SUM(t1.MtdReforecastQ2),0),
		ISNULL(SUM(t1.MtdReforecastQ3),0),
		ISNULL(SUM(t1.MtdVarianceQ0),0),
		ISNULL(SUM(t1.MtdVarianceQ1),0),
		ISNULL(SUM(t1.MtdVarianceQ2),0),
		ISNULL(SUM(t1.MtdVarianceQ3),0),
		ISNULL(SUM(t1.YtdActual),0),
		ISNULL(SUM(t1.YtdOriginalBudget),0),
		ISNULL(SUM(t1.YtdReforecastQ1),0),
		ISNULL(SUM(t1.YtdReforecastQ2),0),
		ISNULL(SUM(t1.YtdReforecastQ3),0),
		ISNULL(SUM(t1.YtdVarianceQ0),0),
		ISNULL(SUM(t1.YtdVarianceQ1),0),
		ISNULL(SUM(t1.YtdVarianceQ2),0),
		ISNULL(SUM(t1.YtdVarianceQ3),0),
		ISNULL(SUM(t1.AnnualOriginalBudget),0),
		ISNULL(SUM(t1.AnnualReforecastQ1),0),
		ISNULL(SUM(t1.AnnualReforecastQ2),0),
		ISNULL(SUM(t1.AnnualReforecastQ3),0)

From #DetailResult t1
Where	t1.MajorExpenseCategoryName	= 'UNKNOWN'
Having (
		ISNULL(SUM(t1.MtdActual),0) <> 0 OR 
		ISNULL(SUM(t1.MtdOriginalBudget),0) <> 0 OR 
		ISNULL(SUM(t1.MtdReforecastQ1),0) <> 0 OR 
		ISNULL(SUM(t1.MtdReforecastQ2),0) <> 0 OR 
		ISNULL(SUM(t1.MtdReforecastQ3),0) <> 0 OR 
		ISNULL(SUM(t1.MtdVarianceQ0),0) <> 0 OR 
		ISNULL(SUM(t1.MtdVarianceQ1),0) <> 0 OR 
		ISNULL(SUM(t1.MtdVarianceQ2),0) <> 0 OR 
		ISNULL(SUM(t1.MtdVarianceQ3),0) <> 0 OR 
		ISNULL(SUM(t1.YtdActual),0) <> 0 OR 
		ISNULL(SUM(t1.YtdOriginalBudget),0) <> 0 OR 
		ISNULL(SUM(t1.YtdReforecastQ1),0) <> 0 OR 
		ISNULL(SUM(t1.YtdReforecastQ2),0) <> 0 OR 
		ISNULL(SUM(t1.YtdReforecastQ3),0) <> 0 OR 
		ISNULL(SUM(t1.YtdVarianceQ0),0) <> 0 OR 
		ISNULL(SUM(t1.YtdVarianceQ1),0) <> 0 OR 
		ISNULL(SUM(t1.YtdVarianceQ2),0) <> 0 OR 
		ISNULL(SUM(t1.YtdVarianceQ3),0) <> 0 OR 
		ISNULL(SUM(t1.AnnualOriginalBudget),0) <> 0 OR 
		ISNULL(SUM(t1.AnnualReforecastQ1),0) <> 0 OR 
		ISNULL(SUM(t1.AnnualReforecastQ2),0) <> 0 OR 
		ISNULL(SUM(t1.AnnualReforecastQ3),0) <> 0
	)




--------------------------------------------------------------------------------------------------------------------------------------	
--Final Result
--------------------------------------------------------------------------------------------------------------------------------------	

Select 
	NumberOfSpacesToPad,
	GroupDisplayCode,
	REPLICATE(' ', NumberOfSpacesToPad) + GroupDisplayName AS GroupDisplayName,
	DisplayOrderNumber,
	MtdActual,
	MtdOriginalBudget,
	MtdReforecastQ1,
	MtdReforecastQ2,
	MtdReforecastQ3,
	
	MtdVarianceQ0,
	MtdVarianceQ1,
	MtdVarianceQ2,
	MtdVarianceQ3,

	MtdVariancePercentageQ0,
	MtdVariancePercentageQ1,
	MtdVariancePercentageQ2,
	MtdVariancePercentageQ3,
	
	YtdActual,
	YtdOriginalBudget,
	YtdReforecastQ1,
	YtdReforecastQ2,
	YtdReforecastQ3,
	
	YtdVarianceQ0,
	YtdVarianceQ1,
	YtdVarianceQ2,
	YtdVarianceQ3,

	YtdVariancePercentageQ0,
	YtdVariancePercentageQ1,
	YtdVariancePercentageQ2,
	YtdVariancePercentageQ3,
		
	AnnualOriginalBudget,
	AnnualReforecastQ1,
	AnnualReforecastQ2,
	AnnualReforecastQ3
From #Result
Order By 
	DisplayOrderNumber,
	#Result.GroupDisplayCode

--Second Resultset for Excel
Select * From #DetailResult
GO

/****** Object:  StoredProcedure [dbo].[stp_R_UnknownActivityType]    Script Date: 12/08/2010 12:01:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[stp_R_UnknownActivityType]
@StartPeriod Varchar(6),
@StopPeriod  Varchar(6)
AS

DECLARE @DataPriorToDate DateTime

SET @DataPriorToDate = GETDATE()

CREATE TABLE #Result(
	SourceSystem Varchar(50) NOT NULL,
	SourceTable varchar(50) NOT NULL,
	ActivityTypeName varchar(50) NOT NULL,
	FunctionalDepartmentUnknown varchar(3) NOT NULL,
	OriginatingRegionUnknown varchar(3) NOT NULL,
	GLAccountUnknown varchar(3) NOT NULL,
	GlPeriod char(6) NOT NULL,
	GlRef char(8) NOT NULL,
	GlSource char(2) NOT NULL,
	GlSiteID char(2) NOT NULL,
	GlItem smallint NOT NULL,
	GlEntityID char(7) NOT NULL,
	EntityName varchar(80) NULL,
	GlAccountNumber char(14) NOT NULL,
	GlAccountName varchar(60) NULL,
	PropertyFundCode char(7) NOT NULL,
	DepartmentDescription varchar(50) NULL,
	Jobcode char(15) NULL,
	JobCodeDescription varchar(50) NULL,
	GlAmount money NULL,
	GlDescription char(60) NULL,
	GlEntrDate datetime NULL,
	GlReversal varchar(1) NOT NULL,
	GlStatus varchar(1) NOT NULL,
	GlBasis char(1) NOT NULL,
	GlLastDate datetime NULL,
	GlUser varchar(20) NULL
)

--USProp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.USProp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.USProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.USProp.ENTITY En
					INNER JOIN GrReportingStaging.USProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.USProp.GACC Ga
					INNER JOIN GrReportingStaging.USProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.ActivityTypeKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--USCorp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.USCorp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.USCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.USCorp.ENTITY En
					INNER JOIN GrReportingStaging.USCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.USCorp.GACC Ga
					INNER JOIN GrReportingStaging.USCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.ActivityTypeKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--EUProp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.EUProp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.EUProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.EUProp.ENTITY En
					INNER JOIN GrReportingStaging.EUProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.EUProp.GACC Ga
					INNER JOIN GrReportingStaging.EUProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.ActivityTypeKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--EUCorp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.EUCorp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.EUCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.EUCorp.ENTITY En
					INNER JOIN GrReportingStaging.EUCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.EUCorp.GACC Ga
					INNER JOIN GrReportingStaging.EUCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.ActivityTypeKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod


--INProp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.Ref GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.INProp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.INProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.INProp.ENTITY En
					INNER JOIN GrReportingStaging.INProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.INProp.GACC Ga
					INNER JOIN GrReportingStaging.INProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.ActivityTypeKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--INCorp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.INCorp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.INCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.INCorp.ENTITY En
					INNER JOIN GrReportingStaging.INCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.INCorp.GACC Ga
					INNER JOIN GrReportingStaging.INCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.ActivityTypeKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod


--BRProp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.BRProp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.BRProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.BRProp.ENTITY En
					INNER JOIN GrReportingStaging.BRProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.BRProp.GACC Ga
					INNER JOIN GrReportingStaging.BRProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.ActivityTypeKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--BRCorp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.BRCorp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.BRCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.BRCorp.ENTITY En
					INNER JOIN GrReportingStaging.BRCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.BRCorp.GACC Ga
					INNER JOIN GrReportingStaging.BRCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.ActivityTypeKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod


--CNProp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.CNProp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.CNProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.CNProp.ENTITY En
					INNER JOIN GrReportingStaging.CNProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.CNProp.GACC Ga
					INNER JOIN GrReportingStaging.CNProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.ActivityTypeKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--CNCorp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.CNCorp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.CNCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.CNCorp.ENTITY En
					INNER JOIN GrReportingStaging.CNCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.CNCorp.GACC Ga
					INNER JOIN GrReportingStaging.CNCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.ActivityTypeKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

CREATE CLUSTERED INDEX IX_Clustered ON #Result (SourceSystem, GlPeriod, GlEntrDate)

Select * From #Result ORder By SourceSystem, GlPeriod, GlEntrDate
GO

/****** Object:  StoredProcedure [dbo].[stp_R_UnknownFunctionalDepartment]    Script Date: 12/08/2010 12:01:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[stp_R_UnknownFunctionalDepartment]
@StartPeriod Varchar(6),
@StopPeriod  Varchar(6)
AS

DECLARE @DataPriorToDate DateTime

SET @DataPriorToDate = GETDATE()

CREATE TABLE #Result(
	SourceSystem Varchar(50) NOT NULL,
	SourceTable varchar(50) NOT NULL,
	ActivityTypeName varchar(50) NOT NULL,
	FunctionalDepartmentUnknown varchar(3) NOT NULL,
	OriginatingRegionUnknown varchar(3) NOT NULL,
	GLAccountUnknown varchar(3) NOT NULL,
	GlPeriod char(6) NOT NULL,
	GlRef char(8) NOT NULL,
	GlSource char(2) NOT NULL,
	GlSiteID char(2) NOT NULL,
	GlItem smallint NOT NULL,
	GlEntityID char(7) NOT NULL,
	EntityName varchar(80) NULL,
	GlAccountNumber char(14) NOT NULL,
	GlAccountName varchar(60) NULL,
	PropertyFundCode char(7) NOT NULL,
	DepartmentDescription varchar(50) NULL,
	Jobcode char(15) NULL,
	JobCodeDescription varchar(50) NULL,
	GlAmount money NULL,
	GlDescription char(60) NULL,
	GlEntrDate datetime NULL,
	GlReversal varchar(1) NOT NULL,
	GlStatus varchar(1) NOT NULL,
	GlBasis char(1) NOT NULL,
	GlLastDate datetime NULL,
	GlUser varchar(20) NULL
)

--USProp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.USProp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.USProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.USProp.ENTITY En
					INNER JOIN GrReportingStaging.USProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.USProp.GACC Ga
					INNER JOIN GrReportingStaging.USProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.FunctionalDepartmentKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--USCorp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.USCorp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.USCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.USCorp.ENTITY En
					INNER JOIN GrReportingStaging.USCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.USCorp.GACC Ga
					INNER JOIN GrReportingStaging.USCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.FunctionalDepartmentKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--EUProp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.EUProp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.EUProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.EUProp.ENTITY En
					INNER JOIN GrReportingStaging.EUProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.EUProp.GACC Ga
					INNER JOIN GrReportingStaging.EUProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.FunctionalDepartmentKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--EUCorp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.EUCorp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.EUCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.EUCorp.ENTITY En
					INNER JOIN GrReportingStaging.EUCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.EUCorp.GACC Ga
					INNER JOIN GrReportingStaging.EUCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.FunctionalDepartmentKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod


--INProp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.Ref GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.INProp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.INProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.INProp.ENTITY En
					INNER JOIN GrReportingStaging.INProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.INProp.GACC Ga
					INNER JOIN GrReportingStaging.INProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.FunctionalDepartmentKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--INCorp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.INCorp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.INCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.INCorp.ENTITY En
					INNER JOIN GrReportingStaging.INCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.INCorp.GACC Ga
					INNER JOIN GrReportingStaging.INCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.FunctionalDepartmentKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod


--BRProp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.BRProp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.BRProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.BRProp.ENTITY En
					INNER JOIN GrReportingStaging.BRProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.BRProp.GACC Ga
					INNER JOIN GrReportingStaging.BRProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.FunctionalDepartmentKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--BRCorp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.BRCorp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.BRCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.BRCorp.ENTITY En
					INNER JOIN GrReportingStaging.BRCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.BRCorp.GACC Ga
					INNER JOIN GrReportingStaging.BRCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.FunctionalDepartmentKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod


--CNProp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.CNProp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.CNProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.CNProp.ENTITY En
					INNER JOIN GrReportingStaging.CNProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.CNProp.GACC Ga
					INNER JOIN GrReportingStaging.CNProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.FunctionalDepartmentKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--CNCorp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.CNCorp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.CNCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.CNCorp.ENTITY En
					INNER JOIN GrReportingStaging.CNCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.CNCorp.GACC Ga
					INNER JOIN GrReportingStaging.CNCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.FunctionalDepartmentKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

CREATE CLUSTERED INDEX IX_Clustered ON #Result (SourceSystem, GlPeriod, GlEntrDate)

Select * From #Result ORder By SourceSystem, GlPeriod, GlEntrDate 
GO

/****** Object:  StoredProcedure [dbo].[stp_R_UnknownGlAccount]    Script Date: 12/08/2010 12:01:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[stp_R_UnknownGlAccount]
@StartPeriod Varchar(6),
@StopPeriod  Varchar(6)
AS

DECLARE @DataPriorToDate DateTime

SET @DataPriorToDate = GETDATE()

CREATE TABLE #Result(
	SourceSystem Varchar(50) NOT NULL,
	SourceTable varchar(50) NOT NULL,
	ActivityTypeName varchar(50) NOT NULL,
	FunctionalDepartmentUnknown varchar(3) NOT NULL,
	OriginatingRegionUnknown varchar(3) NOT NULL,
	GLAccountUnknown varchar(3) NOT NULL,
	GlPeriod char(6) NOT NULL,
	GlRef char(8) NOT NULL,
	GlSource char(2) NOT NULL,
	GlSiteID char(2) NOT NULL,
	GlItem smallint NOT NULL,
	GlEntityID char(7) NOT NULL,
	EntityName varchar(80) NULL,
	GlAccountNumber char(14) NOT NULL,
	GlAccountName varchar(60) NULL,
	PropertyFundCode char(7) NOT NULL,
	DepartmentDescription varchar(50) NULL,
	Jobcode char(15) NULL,
	JobCodeDescription varchar(50) NULL,
	GlAmount money NULL,
	GlDescription char(60) NULL,
	GlEntrDate datetime NULL,
	GlReversal varchar(1) NOT NULL,
	GlStatus varchar(1) NOT NULL,
	GlBasis char(1) NOT NULL,
	GlLastDate datetime NULL,
	GlUser varchar(20) NULL
)

--USProp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.USProp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.USProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.USProp.ENTITY En
					INNER JOIN GrReportingStaging.USProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.USProp.GACC Ga
					INNER JOIN GrReportingStaging.USProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.GlAccountKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--USCorp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.USCorp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.USCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.USCorp.ENTITY En
					INNER JOIN GrReportingStaging.USCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.USCorp.GACC Ga
					INNER JOIN GrReportingStaging.USCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.GlAccountKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--EUProp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.EUProp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.EUProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.EUProp.ENTITY En
					INNER JOIN GrReportingStaging.EUProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.EUProp.GACC Ga
					INNER JOIN GrReportingStaging.EUProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.GlAccountKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--EUCorp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.EUCorp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.EUCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.EUCorp.ENTITY En
					INNER JOIN GrReportingStaging.EUCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.EUCorp.GACC Ga
					INNER JOIN GrReportingStaging.EUCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.GlAccountKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod


--INProp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.Ref GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.INProp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.INProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.INProp.ENTITY En
					INNER JOIN GrReportingStaging.INProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.INProp.GACC Ga
					INNER JOIN GrReportingStaging.INProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.GlAccountKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--INCorp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.INCorp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.INCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.INCorp.ENTITY En
					INNER JOIN GrReportingStaging.INCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.INCorp.GACC Ga
					INNER JOIN GrReportingStaging.INCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.GlAccountKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod


--BRProp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.BRProp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.BRProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.BRProp.ENTITY En
					INNER JOIN GrReportingStaging.BRProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.BRProp.GACC Ga
					INNER JOIN GrReportingStaging.BRProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.GlAccountKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--BRCorp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.BRCorp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.BRCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.BRCorp.ENTITY En
					INNER JOIN GrReportingStaging.BRCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.BRCorp.GACC Ga
					INNER JOIN GrReportingStaging.BRCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.GlAccountKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod


--CNProp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.CNProp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.CNProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.CNProp.ENTITY En
					INNER JOIN GrReportingStaging.CNProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.CNProp.GACC Ga
					INNER JOIN GrReportingStaging.CNProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.GlAccountKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--CNCorp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.CNCorp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.CNCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.CNCorp.ENTITY En
					INNER JOIN GrReportingStaging.CNCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.CNCorp.GACC Ga
					INNER JOIN GrReportingStaging.CNCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.GlAccountKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

CREATE CLUSTERED INDEX IX_Clustered ON #Result (SourceSystem, GlPeriod, GlEntrDate)

Select * From #Result ORder By SourceSystem, GlPeriod, GlEntrDate  
GO

/****** Object:  StoredProcedure [dbo].[stp_R_UnknownOriginatingRegion]    Script Date: 12/08/2010 12:01:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[stp_R_UnknownOriginatingRegion]
@StartPeriod Varchar(6),
@StopPeriod  Varchar(6)
AS

DECLARE @DataPriorToDate DateTime

SET @DataPriorToDate = GETDATE()

CREATE TABLE #Result(
	SourceSystem Varchar(50) NOT NULL,
	SourceTable varchar(50) NOT NULL,
	ActivityTypeName varchar(50) NOT NULL,
	FunctionalDepartmentUnknown varchar(3) NOT NULL,
	OriginatingRegionUnknown varchar(3) NOT NULL,
	GLAccountUnknown varchar(3) NOT NULL,
	GlPeriod char(6) NOT NULL,
	GlRef char(8) NOT NULL,
	GlSource char(2) NOT NULL,
	GlSiteID char(2) NOT NULL,
	GlItem smallint NOT NULL,
	GlEntityID char(7) NOT NULL,
	EntityName varchar(80) NULL,
	GlAccountNumber char(14) NOT NULL,
	GlAccountName varchar(60) NULL,
	PropertyFundCode char(7) NOT NULL,
	DepartmentDescription varchar(50) NULL,
	Jobcode char(15) NULL,
	JobCodeDescription varchar(50) NULL,
	GlAmount money NULL,
	GlDescription char(60) NULL,
	GlEntrDate datetime NULL,
	GlReversal varchar(1) NOT NULL,
	GlStatus varchar(1) NOT NULL,
	GlBasis char(1) NOT NULL,
	GlLastDate datetime NULL,
	GlUser varchar(20) NULL
)

--USProp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.USProp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.USProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.USProp.ENTITY En
					INNER JOIN GrReportingStaging.USProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.USProp.GACC Ga
					INNER JOIN GrReportingStaging.USProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.OriginatingRegionKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--USCorp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.USCorp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.USCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.USCorp.ENTITY En
					INNER JOIN GrReportingStaging.USCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.USCorp.GACC Ga
					INNER JOIN GrReportingStaging.USCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.OriginatingRegionKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--EUProp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.EUProp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.EUProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.EUProp.ENTITY En
					INNER JOIN GrReportingStaging.EUProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.EUProp.GACC Ga
					INNER JOIN GrReportingStaging.EUProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.OriginatingRegionKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--EUCorp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.EUCorp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.EUCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.EUCorp.ENTITY En
					INNER JOIN GrReportingStaging.EUCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.EUCorp.GACC Ga
					INNER JOIN GrReportingStaging.EUCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.OriginatingRegionKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod


--INProp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.Ref GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.INProp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.INProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.INProp.ENTITY En
					INNER JOIN GrReportingStaging.INProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.INProp.GACC Ga
					INNER JOIN GrReportingStaging.INProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.OriginatingRegionKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--INCorp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.INCorp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.INCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.INCorp.ENTITY En
					INNER JOIN GrReportingStaging.INCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.INCorp.GACC Ga
					INNER JOIN GrReportingStaging.INCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.OriginatingRegionKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod


--BRProp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.BRProp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.BRProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.BRProp.ENTITY En
					INNER JOIN GrReportingStaging.BRProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.BRProp.GACC Ga
					INNER JOIN GrReportingStaging.BRProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.OriginatingRegionKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--BRCorp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.BRCorp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.BRCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.BRCorp.ENTITY En
					INNER JOIN GrReportingStaging.BRCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.BRCorp.GACC Ga
					INNER JOIN GrReportingStaging.BRCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.OriginatingRegionKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod


--CNProp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.CNProp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.CNProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.CNProp.ENTITY En
					INNER JOIN GrReportingStaging.CNProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.CNProp.GACC Ga
					INNER JOIN GrReportingStaging.CNProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.OriginatingRegionKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

--CNCorp
Insert Into #Result
(SourceSystem,SourceTable,ActivityTypeName,FunctionalDepartmentUnknown,OriginatingRegionUnknown,GLAccountUnknown,GlPeriod,
GlRef,GlSource,GlSiteID,GlItem,GlEntityID,EntityName,GlAccountNumber,GlAccountName,PropertyFundCode,DepartmentDescription,
Jobcode,JobCodeDescription,GlAmount,GlDescription,GlEntrDate,GlReversal,GlStatus,GlBasis,GlLastDate,GlUser)
Select
		s.SourceSystem
		,pst.SourceTable
		,at.ActivityTypeName
		
		,CASE
			WHEN pa.FunctionalDepartmentKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS FunctionalDepartmentUnknown
		
		,CASE					/* DISPLAY FOR ACTIVITY TYPE UNKNOWNS */
			WHEN pa.OriginatingRegionKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS OriginatingRegionUnknown
		
		,CASE					/* DISPLAY FOR GL ACCOUNT UNKNOWNS */
			WHEN pa.GlAccountKey = -1 THEN ('Yes')
			ELSE ('No')
			END AS GLAccountUnknown
		,Gl.Period GlPeriod
		,Gl.REF GlRef
		,Gl.Source GlSource
		,Gl.SiteID GlSiteID
		,Gl.Item GlItem
		,Gl.EntityID GlEntityID
		,RTRIM(En.NAME) EntityName   
		,Gl.GlAccountCode GlAccountNumber
		,RTRIM(Ga.ACCTNAME) GlAccountName
		,Gl.PropertyFundCode
		,De.Description DepartmentDescription
		,Gl.JobCode Jobcode
		,Jb.Description JobCodeDescription
		,Gl.Amount GlAmount
		,Gl.Description GlDescription
		,Gl.EnterDate GlEntrDate
		,Gl.Reversal GlReversal
		,Gl.Status GlStatus
		,Gl.Basis GlBasis
		,Gl.LastDate GlLastDate
		,Gl.UserID GlUser
	
FROM 

	GrReporting.dbo.ProfitabilityActual pa	
	
	INNER JOIN GrReporting.dbo.Source s ON 
		pa.SourceKey = s.SourceKey
		
	INNER JOIN GrReporting.dbo.Calendar c On
		pa.CalendarKey = c.CalendarKey	
		
	INNER JOIN dbo.ActivityType at ON
		pa.ActivityTypeKey = at.ActivityTypeKey
		
	INNER JOIN dbo.GlAccountCategory Category ON
		pa.GlobalGlAccountCategoryKey = Category.GlAccountCategoryKey	
		
	INNER JOIN GrReportingStaging.CNCorp.GeneralLedger Gl ON
	Gl.SourcePrimaryKey = pa.ReferenceCode
	
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.CNCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	INNER JOIN GrReporting.dbo.ProfitabilityActualSourceTable pst ON 
			pst.ProfitabilityActualSourceTableId = gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.CNCorp.ENTITY En
					INNER JOIN GrReportingStaging.CNCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
			
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.CNCorp.GACC Ga
					INNER JOIN GrReportingStaging.CNCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
		
	LEFT OUTER JOIN (
				SELECT
					De.*
				FROM
					GrReportingStaging.GACS.Department De
					INNER JOIN GrReportingStaging.GACS.DepartmentActive(@DataPriorToDate) DeA ON
						DeA.ImportKey = De.ImportKey
				) De ON
		De.DEPARTMENT = Gl.PropertyFundCode AND De.Source = s.SourceCode

	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.GACS.JobCode Jb
					INNER JOIN GrReportingStaging.GACS.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JobCode = Gl.JobCode AND Jb.Source = s.SourceCode

Where	pa.OriginatingRegionKey = -1
AND		Gl.Period >= @StartPeriod
AND		Gl.Period <= @StopPeriod

CREATE CLUSTERED INDEX IX_Clustered ON #Result (SourceSystem, GlPeriod, GlEntrDate)

Select * From #Result ORder By SourceSystem, GlPeriod, GlEntrDate   
GO

/****** Object:  StoredProcedure [dbo].[stp_S_UnknownSummaryAllocatedOverhead]    Script Date: 12/08/2010 12:01:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[stp_S_UnknownSummaryAllocatedOverhead]
@BudgetYear int,
@BudgetQuater	Varchar(2),
@DataPriorToDate DateTime,
@StartPeriod int,
@EndPeriod int
AS


--SET @StartPeriod = 201001
--SET @EndPeriod = 201008
--SET @BudgetYear = 2010
--SET @BudgetQuater = 'Q2'
--SET @DataPriorToDate = '2010-12-31'
--ActivityType
--GlAccount
--GlAccountCategory
--AllocationRegion
--OriginatingRegion
--FunctionalDepartment
--<<not included>>Overhead
--PropertyFund

--This is copied directly from stp_IU_LoadGrProfitabiltyOverhead
IF OBJECT_ID('tempdb..#ActivityTypeGLAccount') IS NOT NULL
	DROP TABLE #ActivityTypeGLAccount
	
CREATE TABLE #ActivityTypeGLAccount(
	ActivityTypeId INT,
	GLAccountCode VARCHAR(12)
)

INSERT INTO #ActivityTypeGLAccount (
	ActivityTypeId, 
	GLAccountCode
)
SELECT NULL AS ActivityTypeId, '5002950000' AS GLAccountCode UNION ALL --header (NULL in on hierarchy)
SELECT 1, '5002950001' UNION ALL --Leasing
SELECT 2, '5002950002' UNION ALL --Acquisitions
SELECT 3, '5002950003' UNION ALL --Asset Management
SELECT 4, '5002950004' UNION ALL --Development
SELECT 5, '5002950005' UNION ALL --Property Management Escalatable
SELECT 6, '5002950006' UNION ALL --Property Management Non-Escalatable
SELECT 7, '5002950007' UNION ALL --Syndication (Investment and Fund)
SELECT 8, '5002950008' UNION ALL --Fund Organization
SELECT 9, '5002950009' UNION ALL --Fund Operations
SELECT 10, '5002950010' UNION ALL --Property Management TI
SELECT 11, '5002950011' UNION ALL --Property Management CapEx
SELECT 12, '5002950012' UNION ALL --Corporate
SELECT 99, '5002950099' --Corporate Overhead (No corporate overhead (5002950099) account  use header instead)



IF OBJECT_ID('tempdb..#ValidationSummary') IS NOT NULL
	DROP TABLE #ValidationSummary
	
CREATE TABLE #ValidationSummary
(
SourceCode Char(2) NOT NULL,
ProfitabilityActualKey Int NOT NULL,
ReferenceCode varchar(100) NOT NULL,
HasActivityTypeUnknown TinyInt NULL,
HasAllocationRegionUnknown TinyInt NULL,
HasFunctionalDepartmentUnknown TinyInt NULL,
HasGlAccountUnknown TinyInt NULL,
HasGlAccountCategoryUnknown TinyInt NULL,
HasOriginatingRegionUnknown TinyInt NULL,
--HasOverheadUnknown TinyInt NULL,
HasPropertyFundUnknown TinyInt NULL,
InValidRegionAndFunctionalDepartment TinyInt NULL DEFAULT(0),
InValidActivityTypeEntity  TinyInt NULL DEFAULT(0)
)

--Step 1 :: Get all the unknowns
Insert Into #ValidationSummary
(SourceCode,ProfitabilityActualKey, ReferenceCode, HasActivityTypeUnknown, HasAllocationRegionUnknown, 
HasFunctionalDepartmentUnknown,HasGlAccountUnknown, HasGlAccountCategoryUnknown, 
HasOriginatingRegionUnknown,--HasOverheadUnknown, 
HasPropertyFundUnknown)

Select 
	ss.SourceCode,
	pa.ProfitabilityActualKey, 
	pa.ReferenceCode, 
	CASE WHEN pa.ActivityTypeKey = -1 THEN 1 ELSE 0 END HasActivityTypeUnknown, 
	CASE WHEN pa.AllocationRegionKey = -1 THEN 1 ELSE 0 END HasAllocationRegionUnknown, 
	CASE WHEN pa.FunctionalDepartmentKey = -1 AND gac.FeeOrExpense <> 'INCOME' THEN 1 ELSE 0 END HasFunctionalDepartmentUnknown,
	CASE WHEN pa.GlAccountKey = -1 THEN 1 ELSE 0 END HasGlAccountUnknown, 
	CASE WHEN gac.MajorCategoryName like '%unknown%' THEN 1 ELSE 0 END HasGlAccountCategoryUnknown, 
	CASE WHEN pa.OriginatingRegionKey = -1 AND gac.FeeOrExpense <> 'INCOME' THEN 1 ELSE 0 END HasOriginatingRegionUnknown,
	--CASE WHEN pa.OverheadKey = -1 THEN 1 ELSE 0 END HasOverheadUnknown, 
	CASE WHEN pa.PropertyFundKey = -1 THEN 1 ELSE 0 END HasPropertyFundUnknown

From	ProfitabilityActual pa
			INNER JOIN Calendar ca on ca.CalendarKey = pa.CalendarKey
			INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = pa.GlobalGlAccountCategoryKey
			INNER JOIN [Source] ss ON ss.SourceKey = pa.SourceKey
			INNER JOIN ProfitabilityActualSourceTable pas ON pas.ProfitabilityActualSourceTableId = pa.ProfitabilityActualSourceTableId
Where	ca.CalendarPeriod BETWEEN @StartPeriod AND @EndPeriod		
AND		pas.SourceTable IN ('BillingUploadDetail')
AND		gac.MinorCategoryName <> 'Architects & Engineering'
--Only where one of the DimensionKey's are unknown
AND (
	CASE WHEN pa.ActivityTypeKey = -1 THEN 1 ELSE 0 END = 1 OR 
	CASE WHEN pa.AllocationRegionKey = -1 THEN 1 ELSE 0 END = 1 OR
	CASE WHEN pa.FunctionalDepartmentKey = -1 THEN 1 ELSE 0 END = 1 OR
	CASE WHEN pa.GlAccountKey = -1 THEN 1 ELSE 0 END = 1 OR
	CASE WHEN gac.MajorCategoryName like '%unknown%' THEN 1 ELSE 0 END = 1 OR 
	CASE WHEN pa.OriginatingRegionKey = -1 THEN 1 ELSE 0 END = 1 OR
	--CASE WHEN pa.OverheadKey = -1 THEN 1 ELSE 0 END = 1 OR
	CASE WHEN pa.PropertyFundKey = -1 THEN 1 ELSE 0 END = 1
	)

IF OBJECT_ID('tempdb..#GeneralLedger') IS NOT NULL
	DROP TABLE #GeneralLedger
	
--Step 1 :: Get all the TapasUS (Payroll) GeneralLedger Details, used to removed re-classed MRI items
		


-----------------------------------------------------------------------------------------------------------------------------------------------
--Step 8 :: OriginatingRegion & FunctionalDepartment Combination
--Sheet 1 :: OriginatingSubRegion And FunctionalDepartment

IF OBJECT_ID('tempdb..#ValidRegionAndFunctionalDepartment') IS NOT NULL
	DROP TABLE #ValidRegionAndFunctionalDepartment

CREATE TABLE #ValidRegionAndFunctionalDepartment
(OriginatingSubRegionName Varchar(50) NOT NULL,
FunctionalDepartmentName Varchar(50) NOT NULL
)
Insert Into #ValidRegionAndFunctionalDepartment
(FunctionalDepartmentName,OriginatingSubRegionName)
EXEC [stp_S_ValidPayrollRegionAndFunctionalDepartment] 
	@BudgetYear = @BudgetYear,
	@BudgetQuater = @BudgetQuater,
	@DataPriorToDate = @DataPriorToDate

Insert Into #ValidRegionAndFunctionalDepartment
(FunctionalDepartmentName,OriginatingSubRegionName)
EXEC [stp_S_ValidNonPayrollRegionAndFunctionalDepartment] 
	@BudgetYear = @BudgetYear,
	@BudgetQuater = @BudgetQuater,
	@DataPriorToDate = @DataPriorToDate

--Select 
--		DISTINCT 
--		orr.Name GdmOriginatingRegionName,
--		orr.Code GdmOriginatingRegionCode,
--		fd.Code FunctionalDepartmentCode,
--		fd.Name FunctionalDepartmentName
--Into #ValidRegionAndFunctionalDepartment
--From	SERVER3.GACS.dbo.[Site] si
--			INNER JOIN SERVER3.GACS.dbo.Team te ON te.SiteID = si.SiteID
--			INNER JOIN SERVER3.GACS.dbo.StaffTeam st ON st.TeamID = te.TeamID
--			INNER JOIN SERVER3.GACS.dbo.Staff s ON s.StaffID = st.StaffID
--			INNER JOIN SERVER3.GACS.dbo.StaffFunctionalDepartment sf ON sf.StaffID = s.StaffID
--			INNER JOIN SERVER3.GACS.dbo.FunctionalDepartment fd ON fd.FunctionalDepartmentID = sf.FunctionalDepartmentID
--			INNER JOIN SERVER3.GACS.dbo.StaffEntity se ON se.StaffID = s.StaffID
--			INNER JOIN SERVER3.GACS.dbo.Entity e ON e.EntityRef = se.EntityRef
--			INNER JOIN SERVER3.Gdm.dbo.OriginatingRegionCorporateEntity orrce ON orrce.CorporateEntityCode = e.EntityRef AND orrce.SourceCode = e.[Source]
--			INNER JOIN SERVER3.Gdm.dbo.OriginatingSubRegion orr ON orr.OriginatingSubRegionGlobalRegionId = orrce.GlobalRegionId
--Where te.name like '%Budget Coordinator%'
--and e.IsHistoric = 0
--and e.[Source] like '%C'

------------------------------------------------------------------------------------------------------------------------------------------
--The view an interim solution, until the spreadhseet is finalyzed
------------------------------------------------------------------------------------------------------------------------------------------
--Select
--		DISTINCT 
--		list.OriginatingSubRegionName,
--		list.FunctionalDepartmentName
--Into #ValidRegionAndFunctionalDepartment
--From
--		GrReportingStaging.dbo.ValidOriginatingSubRegionAndFunctionalDepartment list

IF OBJECT_ID('tempdb..#InvalidRegionAndFunctDeptCombination') IS NOT NULL
	DROP TABLE #InvalidRegionAndFunctDeptCombination
	
Select  
		s.SourceCode,
		pa.ReferenceCode,
		fd.FunctionalDepartmentName,
		orr.SubRegionName
Into #InvalidRegionAndFunctDeptCombination
From ProfitabilityActual pa

		INNER JOIN ProfitabilityActualSourceTable pas ON pas.ProfitabilityActualSourceTableId = pa.ProfitabilityActualSourceTableId

		INNER JOIN [Source] s ON s.SourceKey = pa.SourceKey
		
		LEFT OUTER JOIN FunctionalDepartment fd ON 
					fd.FunctionalDepartmentKey = pa.FunctionalDepartmentKey
				
		LEFT OUTER JOIN OriginatingRegion orr ON 
					orr.OriginatingRegionKey = pa.OriginatingRegionKey

		LEFT OUTER JOIN GlAccountCategory gac ON 
					gac.GlAccountCategoryKey = pa.GlobalGlAccountCategoryKey
					
		LEFT OUTER JOIN #ValidRegionAndFunctionalDepartment vs 
			on vs.FunctionalDepartmentName = fd.FunctionalDepartmentName
			 AND vs.OriginatingSubRegionName = orr.SubRegionName

Where	vs.FunctionalDepartmentName IS NULL
--AND		s.SourceCode LIKE '%C' --GC 2010-11-25 removed this for in MRI actuals its not included
AND		pas.SourceTable IN ('BillingUploadDetail')
AND		gac.FeeOrExpense <> 'INCOME'
AND		gac.MinorCategoryName <> 'Architects & Engineering'



--Remove from this table the items, that the reclass logic already fixed the issue at hand
-->> No reclass removal required for the process do not exist in TAPAS


--Updated the existing rows in #ValidationSummary where FunctionalDepartment&OriginatingRegion combination is not valid
Update #ValidationSummary
Set	InValidRegionAndFunctionalDepartment = 1
	From	
		#InvalidRegionAndFunctDeptCombination InvalidRegionAndFunctDeptCombination
						
Where	#ValidationSummary.ReferenceCode = InvalidRegionAndFunctDeptCombination.ReferenceCode
 AND	#ValidationSummary.SourceCode = InvalidRegionAndFunctDeptCombination.SourceCode


--Insert only where FunctionalDepartment&OriginatingRegion combination is not valid and the item is not in #ValidationSummary yet
Insert Into #ValidationSummary
(SourceCode,ProfitabilityActualKey, ReferenceCode, HasActivityTypeUnknown, HasAllocationRegionUnknown, 
HasFunctionalDepartmentUnknown,HasGlAccountUnknown, HasGlAccountCategoryUnknown, 
HasOriginatingRegionUnknown,--HasOverheadUnknown, 
HasPropertyFundUnknown,InValidRegionAndFunctionalDepartment)
Select 
	ss.SourceCode,
	pa.ProfitabilityActualKey, 
	pa.ReferenceCode, 
	0 HasActivityTypeUnknown, 
	0 HasAllocationRegionUnknown, 
	0 HasFunctionalDepartmentUnknown,
	0 HasGlAccountUnknown, 
	0 HasGlAccountCategoryUnknown, 
	0 HasOriginatingRegionUnknown,
	--1 HasOverheadUnknown, 
	0 HasPropertyFundUnknown,
	1 InValidRegionAndFunctionalDepartment

From	ProfitabilityActual pa

			INNER JOIN ProfitabilityActualSourceTable pas ON pas.ProfitabilityActualSourceTableId = pa.ProfitabilityActualSourceTableId

			INNER JOIN Calendar ca on ca.CalendarKey = pa.CalendarKey

			INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = pa.GlobalGlAccountCategoryKey

			INNER JOIN [Source] ss ON ss.SourceKey = pa.SourceKey

			LEFT OUTER JOIN #ValidationSummary existing ON existing.SourceCode = ss.SourceCode AND existing.ReferenceCode = pa.ReferenceCode

			INNER JOIN #InvalidRegionAndFunctDeptCombination InvalidRegionAndFunctDeptCombination ON
						InvalidRegionAndFunctDeptCombination.ReferenceCode = pa.ReferenceCode
					AND	InvalidRegionAndFunctDeptCombination.SourceCode = ss.SourceCode
 
Where	ca.CalendarPeriod BETWEEN @StartPeriod AND @EndPeriod		
AND		existing.ReferenceCode IS NULL --Not in table yet
AND		pas.SourceTable IN ('BillingUploadDetail')
AND		gac.MinorCategoryName <> 'Architects & Engineering'


------------------------------------------------------------
--Sheet 2 :: ActivityType And Entity

IF OBJECT_ID('tempdb..#HolisticReviewExport') IS NOT NULL
	DROP TABLE #HolisticReviewExport
	
CREATE TABLE #HolisticReviewExport
(	ProjectCode varchar(20) NULL,
	ProjectName varchar(100) NULL,
	ProjectEndPeriod int NULL,
	ActivityType varchar(50) NULL,
	PropertyFund varchar(100) NULL,
	PropertyFundAllocationSubRegionName varchar(50) NULL,
	Source char(2) NULL,
	AllocationType varchar(100) NULL,
	CorporateDepartment char(8) NULL,
	CorporateDepartmentDescription varchar(50) NULL,
	ReportingEntity varchar(100) NULL,
	ReportingEntityAllocationSubRegionName varchar(50) NULL,
	EntityType varchar(50) NULL,
	BudgetOwner varchar(255) NULL,
	RegionalOwner varchar(255) NULL,
	BudgetCoordinatorDisplayNames nvarchar(max) NULL,
	IsTSCost Varchar(3) NULL,
	PropertyEntity char(6) NULL,
	PropertyEntityName nvarchar(264) NULL
)
SET XACT_ABORT ON

Insert Into #HolisticReviewExport
EXEC SERVER3.Gdm.dbo.HolisticReviewExport


IF OBJECT_ID('tempdb..#ValidActivityTypeEntity') IS NOT NULL
	DROP TABLE #ValidActivityTypeEntity
	
Select
		DISTINCT 
		list.ActivityType ActivityTypeName,
		list.AllocationType AllocationTypeName,
		list.ReportingEntity ReportingEntityName
Into #ValidActivityTypeEntity
From
		#HolisticReviewExport list


--Add additional entries provided by Martin: IMS 56718
Insert Into #ValidActivityTypeEntity
(ReportingEntityName, ActivityTypeName, AllocationTypeName)
Select t1.ReportingEntityName, t1.ActivityTypeName, t1.AllocationTypeName 
From AdditionalValidCombinationsForEntityActivity t1
		LEFT OUTER JOIN #ValidActivityTypeEntity t2
				ON t2.ReportingEntityName = t1.ReportingEntityName AND
				t2.ActivityTypeName = t1.ActivityTypeName AND
				t2.AllocationTypeName = t1.AllocationTypeName
Where t2.AllocationTypeName IS NULL


IF OBJECT_ID('tempdb..#InvalidActivityTypeEntityCombination') IS NOT NULL
	DROP TABLE #InvalidActivityTypeEntityCombination
	
Select  
		s.SourceCode,
		pa.ReferenceCode,

		vs.AllocationTypeName,
		REPLACE(gac.AccountSubTypeName,'-','') AccountSubTypeName,

		vs.ActivityTypeName LocalActivityTypeName,
		at.ActivityTypeName ValidationActivityTypeName,

		vs.ReportingEntityName,
		pf.PropertyFundName
		
Into #InvalidActivityTypeEntityCombination
From ProfitabilityActual pa

		INNER JOIN ProfitabilityActualSourceTable pas ON pas.ProfitabilityActualSourceTableId = pa.ProfitabilityActualSourceTableId

		INNER JOIN [Source] s ON s.SourceKey = pa.SourceKey
		
		INNER JOIN PropertyFund pf ON 
					pf.PropertyFundKey = pa.PropertyFundKey
				
		INNER JOIN ActivityType at ON 
					at.ActivityTypeKey = pa.ActivityTypeKey

		INNER JOIN GlAccountCategory gac ON 
					gac.GlAccountCategoryKey = pa.GlobalGlAccountCategoryKey

		INNER JOIN Overhead oh ON oh.OverheadKey = pa.OverheadKey

		INNER JOIN Calendar ca ON ca.CalendarKey = pa.CalendarKey

		LEFT OUTER JOIN #ValidActivityTypeEntity vs 
			on 
				(	--GR
						gac.MajorCategoryName		<> 'Salaries/Taxes/Benefits'
				AND		oh.OverheadCode				= 'UNALLOC'
				AND		gac.AccountSubTypeName			= 'Overhead'
					--AM
				AND		vs.AllocationTypeName		= 'NonPayroll'
				AND		vs.ActivityTypeName			= 'Corporate Overhead'
				AND		vs.ReportingEntityName		= pf.PropertyFundName
				)
				OR
				(	--GR
						gac.MajorCategoryName		= 'Salaries/Taxes/Benefits'
				AND		oh.OverheadCode				= 'UNALLOC'
				AND		gac.AccountSubTypeName			= 'Overhead'
					--AM
				AND		vs.AllocationTypeName		= 'Payroll'
				AND		vs.ActivityTypeName			= 'Corporate Overhead'
				AND		vs.ReportingEntityName		= pf.PropertyFundName
				)
				OR
				(	--Default Match	
						vs.AllocationTypeName		= REPLACE(gac.AccountSubTypeName,'-','')
				AND		vs.ActivityTypeName			= at.ActivityTypeName
				AND		vs.ReportingEntityName		= pf.PropertyFundName
				)

Where	vs.ActivityTypeName		IS NULL
AND		pas.SourceTable			IN ('BillingUploadDetail')
AND		NOT(oh.OverheadCode		= 'ALLOC' AND gac.AccountSubTypeName = 'Overhead')
AND		gac.MinorCategoryName	<> 'Architects & Engineering'
AND		ca.CalendarPeriod		>= 201007 

--Remove from this table the items, that the reclass logic already fixed the issue at hand
-->>> This is not required for reclass is a option from TAPAS

--Delete the old Reporting Entity Names
Delete From #InvalidActivityTypeEntityCombination
Where LTRIM(RTRIM(PropertyFundName)) IN (
		Select 'ECM Business Development' ReportingEntity UNION
		Select 'Employee Reimbursables' ReportingEntity UNION
		Select 'US CORP TBD' ReportingEntity
		)

--Updated the existing rows in #ValidationSummary where FunctionalDepartment&OriginatingRegion combination is not valid
Update #ValidationSummary
Set	InvalidActivityTypeEntity = 1
	From	
		#InvalidActivityTypeEntityCombination InvalidActivityTypeEntityCombination
						
Where	#ValidationSummary.ReferenceCode = InvalidActivityTypeEntityCombination.ReferenceCode
 AND	#ValidationSummary.SourceCode = InvalidActivityTypeEntityCombination.SourceCode


--Insert only where ActivityTypeEntity&OriginatingRegion combination is not valid and the item is not in #ValidationSummary yet
Insert Into #ValidationSummary
(SourceCode,ProfitabilityActualKey, ReferenceCode, HasActivityTypeUnknown, HasAllocationRegionUnknown, 
HasFunctionalDepartmentUnknown,HasGlAccountUnknown, HasGlAccountCategoryUnknown, 
HasOriginatingRegionUnknown,--HasOverheadUnknown, 
HasPropertyFundUnknown,InvalidActivityTypeEntity)
Select 
	ss.SourceCode,
	pa.ProfitabilityActualKey, 
	pa.ReferenceCode, 
	0 HasActivityTypeUnknown, 
	0 HasAllocationRegionUnknown, 
	0 HasFunctionalDepartmentUnknown,
	0 HasGlAccountUnknown, 
	0 HasGlAccountCategoryUnknown, 
	0 HasOriginatingRegionUnknown,
	--1 HasOverheadUnknown, 
	0 HasPropertyFundUnknown,
	1 InValidRegionAndFunctionalDepartment

From	ProfitabilityActual pa

			INNER JOIN Calendar ca on ca.CalendarKey = pa.CalendarKey

			INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = pa.GlobalGlAccountCategoryKey

			INNER JOIN [Source] ss ON ss.SourceKey = pa.SourceKey

			LEFT OUTER JOIN #ValidationSummary existing ON existing.SourceCode = ss.SourceCode AND existing.ReferenceCode = pa.ReferenceCode

			INNER JOIN #InvalidActivityTypeEntityCombination InvalidActivityTypeEntityCombination ON
						InvalidActivityTypeEntityCombination.ReferenceCode = pa.ReferenceCode
					AND	InvalidActivityTypeEntityCombination.SourceCode = ss.SourceCode
 
Where	ca.CalendarPeriod BETWEEN @StartPeriod AND @EndPeriod	
AND		ca.CalendarPeriod		>= 201007 	
AND		existing.ReferenceCode IS NULL --Not in table yet
AND		gac.MinorCategoryName <> 'Architects & Engineering'


------------------------------------------------------------------------------------------------------------------------------------------
--Now Remove the rows from #ValidationSummary, where the re-class of items cause the to be valid now
Delete From #ValidationSummary
Where	HasActivityTypeUnknown = 0
AND		HasAllocationRegionUnknown = 0
AND		HasFunctionalDepartmentUnknown = 0
AND		HasGlAccountUnknown = 0
AND		HasGlAccountCategoryUnknown = 0
AND		HasOriginatingRegionUnknown = 0
--AND		HasOverheadUnknown = 0
AND		HasPropertyFundUnknown = 0
AND		InValidRegionAndFunctionalDepartment = 0
AND		InValidActivityTypeEntity = 0


--Return the UNKNOWN's
Select 
	vs.SourceCode,
	CASE WHEN vs.HasActivityTypeUnknown = 1 THEN 'YES' ELSE 'NO' END HasActivityTypeUnknown,
	CASE WHEN vs.HasFunctionalDepartmentUnknown = 1 THEN 'YES' ELSE 'NO' END HasFunctionalDepartmentUnknown,
	CASE WHEN vs.HasOriginatingRegionUnknown = 1 THEN 'YES' ELSE 'NO' END HasOriginatingRegionUnknown,
	CASE WHEN vs.HasPropertyFundUnknown = 1 THEN 'YES' ELSE 'NO' END HasPropertyFundUnknown,
	CASE WHEN vs.HasAllocationRegionUnknown = 1 THEN 'YES' ELSE 'NO' END HasAllocationRegionUnknown,
	CASE WHEN vs.HasGlAccountUnknown = 1 THEN 'YES' ELSE 'NO' END HasGlAccountUnknown,
	CASE WHEN vs.HasGlAccountCategoryUnknown = 1 THEN 'YES' ELSE 'NO' END HasGlAccountCategoryUnknown,
	CASE WHEN vs.InValidRegionAndFunctionalDepartment = 1 THEN 'YES' ELSE 'NO' END InValidRegionAndFunctionalDepartment,
	CASE WHEN vs.InValidActivityTypeEntity = 1 THEN 'YES' ELSE 'NO' END InValidActivityTypeEntity,
	CASE WHEN 
		vs.HasActivityTypeUnknown = 1 OR 
		vs.HasFunctionalDepartmentUnknown = 1 OR
		vs.HasOriginatingRegionUnknown = 1 OR
		vs.InValidRegionAndFunctionalDepartment = 1 OR
		vs.InValidActivityTypeEntity = 1
	THEN CASE WHEN
			vs.HasPropertyFundUnknown = 1 OR
			vs.HasAllocationRegionUnknown = 1 OR
			vs.HasGlAccountUnknown = 1 OR
			vs.HasGlAccountCategoryUnknown = 1
		THEN 
			'Both Corporate Finance and Accounting'
		ELSE
			'Accounting - Re-class'
		END
	ELSE 
		'Corporate Finance - Mapping'
	END AS ResolvedBy,
	--DW
	gl.ExpensePeriod,
	gl.AllocationRegionCode,
	gl.AllocationRegionName,
	gl.OriginatingRegionCode,
	gl.OriginatingRegionSourceCode,
	gl.PropertyFundName,
	gl.FunctionalDepartmentCode,
	gl.ActivityTypeCode,
	gl.ForeignCurrency,
	gl.ForeignActual,
	gl.GlAccountCode,
	gl.EmployeeDisplayName
	
From #ValidationSummary vs

	INNER JOIN 
	(
		Select 
				Bud.BillingUploadDetailId,
				Bu.ExpensePeriod,
				GrAr.RegionCode AllocationRegionCode,
				GrAr.RegionName AllocationRegionName,
				Ovr.CorporateEntityRef OriginatingRegionCode,
				Ovr.CorporateSourceCode OriginatingRegionSourceCode,
				PF.Name PropertyFundName,
				Fd.GlobalCode FunctionalDepartmentCode,
				At.Code ActivityTypeCode,
				Bud.CurrencyCode ForeignCurrency,
				Bud.AllocationAmount ForeignActual,
				
				CASE
					WHEN (P1.AllocateOverheadsProjectId IS NULL OR P1.AllocateOverheadsProjectId = 0) THEN 
						ISNULL(DepartmentPropertyFund.PropertyFundId, -1)
					ELSE
						ISNULL(OverheadPropertyFund.PropertyFundId, -1)
				END PFID,
				
				P1.PropertyFundId P1,
				P1.PropertyFundId P2,
				ISNULL(DepartmentPropertyFund.PropertyFundId, -1)  DepartmentPropertyFundId,
				ISNULL(OverheadPropertyFund.PropertyFundId, -1) OverheadPropertyFundId,
				GA.Code GlAccountCode,
				Emp.DisplayName EmployeeDisplayName
		From	
				(Select		
						Bu.*
					From	GrReportingStaging.TapasGlobal.BillingUpload Bu
								INNER JOIN GrReportingStaging.TapasGlobal.BillingUploadActive(@DataPriorToDate) BuA 
							ON buA.ImportKey = bu.ImportKey
				) Bu
				
				LEFT OUTER JOIN SERVER3.ERPHR.dbo.HREmployee emp ON Emp.HREmployeeId = Bu.HREmployeeId
					
				INNER JOIN (Select 
								Bud.*
							From	GrReportingStaging.TapasGlobal.BillingUploadDetail Bud
										INNER JOIN GrReportingStaging.TapasGlobal.BillingUploadDetailActive(@DataPriorToDate) BudA 
											ON BudA.ImportKey = Bud.ImportKey
							) Bud ON Bud.BillingUploadId = Bu.BillingUploadId
						
				
				INNER JOIN (
							Select Oh.*
							From	GrReportingStaging.TapasGlobal.Overhead oh 
								INNER JOIN GrReportingStaging.TapasGlobal.OverheadActive(@DataPriorToDate) OhA ON
									OhA.ImportKey = Oh.ImportKey
							) Oh ON Oh.OverheadId = Bu.OverheadId

					LEFT OUTER JOIN (
									Select 
											Fd.*
									From GrReportingStaging.HR.FunctionalDepartment Fd 
										INNER JOIN GrReportingStaging.HR.FunctionalDepartmentActive(@DataPriorToDate) FdA ON
											FdA.ImportKey = Fd.ImportKey
									) Fd ON Fd.FunctionalDepartmentId = Bu.OverheadFunctionalDepartmentId

					LEFT OUTER JOIN (
									Select 
										P.*
									From GrReportingStaging.TapasGlobal.Project P
											INNER JOIN GrReportingStaging.TapasGlobal.ProjectActive(@DataPriorToDate) PA ON
												PA.ImportKey = P.ImportKey
									) P1 ON P1.ProjectId = Bu.ProjectId

					LEFT OUTER JOIN (
									Select 
										P.*
									From GrReportingStaging.TapasGlobal.Project P
											INNER JOIN GrReportingStaging.TapasGlobal.ProjectActive(@DataPriorToDate) PA ON
												PA.ImportKey = P.ImportKey
									) P2 ON
						P2.ProjectId = P1.AllocateOverheadsProjectId

					-- P1 ---------------------------

					LEFT OUTER JOIN GrReporting.dbo.[Source] GrScC ON
						GrScC.SourceCode = P1.CorporateSourceCode

					LEFT OUTER JOIN	(
									Select 
										RECD.*
									From GrReportingStaging.Gdm.ReportingEntityCorporateDepartment RECD
											INNER JOIN GrReportingStaging.Gdm.ReportingEntityCorporateDepartmentActive(@DataPriorToDate) RECDA ON
												RECDA.ImportKey = RECD.ImportKey
									)  RECDC ON GrScC.IsCorporate = 'YES' AND -- only corporate MRIs resolved through this
						RECDC.CorporateDepartmentCode = LTRIM(RTRIM(P1.CorporateDepartmentCode)) AND
						RECDC.SourceCode = P1.CorporateSourceCode AND
						Bu.ExpensePeriod >= '201007' AND		   
						RECDC.IsDeleted = 0
						   
					LEFT OUTER JOIN (
									Select 
										REPE.*
									From GrReportingStaging.Gdm.ReportingEntityPropertyEntity REPE
												INNER JOIN GrReportingStaging.Gdm.ReportingEntityPropertyEntityActive(@DataPriorToDate) REPEA ON
													REPEA.ImportKey = REPE.ImportKey
									) REPEC ON -- added
						GrScC.IsProperty = 'YES' AND -- only property MRIs resolved through this
						REPEC.PropertyEntityCode = LTRIM(RTRIM(P1.CorporateDepartmentCode)) AND
						REPEC.SourceCode = P1.CorporateSourceCode AND
						Bu.ExpensePeriod >= '201007' AND
						REPEC.IsDeleted = 0

					LEFT OUTER JOIN (
									Select pfm.*
									From	GrReportingStaging.Gdm.PropertyFundMapping Pfm 
												INNER JOIN GrReportingStaging.Gdm.PropertyFundMappingActive(@DataPriorToDate) PfmA ON
													PfmA.ImportKey = Pfm.ImportKey
									) pfm ON pfm.PropertyFundCode = P1.CorporateDepartmentCode AND -- Combination of entity and corporate department
						pfm.SourceCode = P1.CorporateSourceCode AND
						pfm.IsDeleted = 0 AND 
						(
							(GrScC.IsProperty = 'YES' AND pfm.ActivityTypeId IS NULL) 
							OR
							(
								(GrScC.IsCorporate = 'YES' AND pfm.ActivityTypeId = Bu.ActivityTypeId)
								OR
								(GrScC.IsCorporate = 'YES' AND pfm.ActivityTypeId IS NULL AND Bu.ActivityTypeId IS NULL)
							)
						) AND Bu.ExpensePeriod < '201007' 
						
					LEFT OUTER JOIN GrReporting.dbo.PropertyFund DepartmentPropertyFund ON
						DepartmentPropertyFund.PropertyFundId =
							CASE
								WHEN Bu.ExpensePeriod < '201007' THEN pfm.PropertyFundId
								ELSE
									CASE
										WHEN GrScC.IsCorporate = 'YES' THEN RECDC.PropertyFundId
										ELSE REPEC.PropertyFundId
									END
							END -- extra condition? re: date

					-- P1 end -----------------------
					-- P2 ---------------------------

					LEFT OUTER JOIN GrReporting.dbo.[Source] GrScO
						ON GrScO.SourceCode = P2.CorporateSourceCode

					LEFT OUTER JOIN	(
									Select 
											RECD.*
									From	GrReportingStaging.Gdm.ReportingEntityCorporateDepartment RECD
												INNER JOIN GrReportingStaging.Gdm.ReportingEntityCorporateDepartmentActive(@DataPriorToDate) RECDA ON
													RECDA.ImportKey = RECD.ImportKey
									) RECDO ON -- added
						GrScO.IsCorporate = 'YES' AND -- only corporate MRIs resolved through this
						RECDO.CorporateDepartmentCode = LTRIM(RTRIM(P2.CorporateDepartmentCode)) AND
						RECDO.SourceCode = P2.CorporateSourceCode AND
						Bu.ExpensePeriod >= '201007'  AND 
						RECDO.IsDeleted = 0
						   
					LEFT OUTER JOIN (
									Select 
										REPE.*
									From GrReportingStaging.Gdm.ReportingEntityPropertyEntity REPE
												INNER JOIN GrReportingStaging.Gdm.ReportingEntityPropertyEntityActive(@DataPriorToDate) REPEA ON
													REPEA.ImportKey = REPE.ImportKey
									)  REPEO ON -- added
						GrScO.IsProperty = 'YES' AND -- only property MRIs resolved through this
						REPEO.PropertyEntityCode = LTRIM(RTRIM(P2.CorporateDepartmentCode)) AND
						REPEO.SourceCode = P2.CorporateSourceCode AND
						Bu.ExpensePeriod >= '201007'  AND
						REPEO.IsDeleted = 0

					LEFT OUTER JOIN (
									Select pfm.*
									From	GrReportingStaging.Gdm.PropertyFundMapping Pfm 
												INNER JOIN GrReportingStaging.Gdm.PropertyFundMappingActive(@DataPriorToDate) PfmA ON
													PfmA.ImportKey = Pfm.ImportKey
									) opfm ON
						P2.CorporateDepartmentCode = opfm.PropertyFundCode AND -- Combination of entity and corporate department
						P2.CorporateSourceCode = opfm.SourceCode AND
						opfm.IsDeleted = 0  AND 
						(
							(GrScO.IsProperty = 'YES' AND opfm.ActivityTypeId IS NULL) 
							OR
							(
								(GrScO.IsCorporate = 'YES' AND opfm.ActivityTypeId = Bu.ActivityTypeId)
								OR
								(GrScO.IsCorporate = 'YES' AND opfm.ActivityTypeId IS NULL AND Bu.ActivityTypeId IS NULL) 
							)	
						) AND Bu.ExpensePeriod < '201007' 

					LEFT OUTER JOIN GrReporting.dbo.PropertyFund OverheadPropertyFund ON
						OverheadPropertyFund.PropertyFundId =
							CASE
								WHEN Bu.ExpensePeriod < '201007' THEN opfm.PropertyFundId
								ELSE
									CASE
										WHEN GrScO.IsCorporate = 'YES' THEN RECDO.PropertyFundId
										ELSE REPEO.PropertyFundId
									END
							END	

					-- P2 end -----------------------

					LEFT OUTER JOIN (
									Select 
										PF.*
										From	GrReportingStaging.Gdm.PropertyFund PF 
													INNER JOIN GrReportingStaging.Gdm.PropertyFundActive(@DataPriorToDate) PFA ON
														PFA.ImportKey = PF.ImportKey
									) PF ON PF.PropertyFundId = (
												CASE
												WHEN (P1.AllocateOverheadsProjectId IS NULL OR P1.AllocateOverheadsProjectId = 0) THEN 
													ISNULL(DepartmentPropertyFund.PropertyFundId, -1)
												ELSE
													ISNULL(OverheadPropertyFund.PropertyFundId, -1)
											END
											)
						
					LEFT OUTER JOIN (Select	
										ASR.*
									From	GrReportingStaging.Gdm.AllocationSubRegion ASR
											INNER JOIN	GrReportingStaging.Gdm.AllocationSubRegionActive(@DataPriorToDate) ASRA ON ASRA.ImportKey = ASR.ImportKey
									) ASR ON PF.AllocationSubRegionGlobalRegionId = ASR.AllocationSubRegionGlobalRegionId


					LEFT OUTER JOIN GrReporting.dbo.AllocationRegion GrAr ON
						GrAr.GlobalRegionId = ASR.AllocationSubRegionGlobalRegionId --AND
						-- ISNULL(Gl.LastDate, EnterDate) BETWEEN GrAr.StartDate AND GrAr.EndDate ???????

					LEFT OUTER JOIN (Select 
										At.*
									From 	GrReportingStaging.Gdm.ActivityType At
												INNER JOIN GrReportingStaging.Gdm.ActivityTypeActive(@DataPriorToDate) Ata ON
														Ata.ImportKey = At.ImportKey
									) At ON
						At.ActivityTypeId = Bu.ActivityTypeId

					LEFT OUTER JOIN (Select		
										Ovr.*
									From	GrReportingStaging.TapasGlobal.OverheadRegion Ovr 
												INNER JOIN GrReportingStaging.TapasGlobal.OverheadRegionActive(@DataPriorToDate) OvrA ON
													OvrA.ImportKey = Ovr.ImportKey
									) Ovr ON
						Ovr.OverheadRegionId = Bu.OverheadRegionId	
						
					
						LEFT OUTER JOIN #ActivityTypeGLAccount AtGla ON
							AtGla.ActivityTypeId = At.ActivityTypeId

						LEFT OUTER JOIN (
										Select	
												GLA.*
										FROM
												GrReportingStaging.Gdm.GLGlobalAccount GLA
												INNER JOIN GrReportingStaging.Gdm.GLGlobalAccountActive(@DataPriorToDate) GLAA ON
													GLAA.ImportKey = GLA.ImportKey
										) GA ON
							GA.Code = AtGla.GLAccountCode AND
							ISNULL(AtGla.ActivityTypeId, 0) = ISNULL(GA.ActivityTypeId, 0) -- Nulls for header (00) accounts. (Should really have an activity for this)
	
					
						
	) gl on vs.ReferenceCode = 'BillingUploadDetailId=' + LTRIM(STR(gl.BillingUploadDetailId, 10, 0))
Order By vs.SourceCode, vs.ReferenceCode

GO





------------------------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--exec stp_S_UnknownSummaryMRIActuals @BudgetYear=2010, @BudgetQuater='Q2', @DataPriorToDate='2010-12-31', @StartPeriod=201001, @EndPeriod=201002

CREATE PROCEDURE [dbo].[stp_S_UnknownSummaryMRIActuals]
@BudgetYear int,
@BudgetQuater	Varchar(2),
@DataPriorToDate DateTime,
@StartPeriod int,
@EndPeriod int
AS

--SET @StartPeriod = 201001
--SET @EndPeriod = 201009
--SET @BudgetYear = 2010
--SET @BudgetQuater = 'Q2'
--SET @DataPriorToDate = '2010-12-31'

--ActivityType
--GlAccount
--GlAccountCategory
--AllocationRegion
--OriginatingRegion
--FunctionalDepartment
--<<not included>>Overhead
--PropertyFund



IF OBJECT_ID('tempdb..#ValidationSummary') IS NOT NULL
	DROP TABLE #ValidationSummary
	
CREATE TABLE #ValidationSummary
(
SourceCode Char(2) NOT NULL,
ProfitabilityActualKey Int NOT NULL,
ReferenceCode varchar(100) NOT NULL,
HasActivityTypeUnknown TinyInt NULL,
HasAllocationRegionUnknown TinyInt NULL,
HasFunctionalDepartmentUnknown TinyInt NULL,
HasGlAccountUnknown TinyInt NULL,
HasGlAccountCategoryUnknown TinyInt NULL,
HasOriginatingRegionUnknown TinyInt NULL,
--HasOverheadUnknown TinyInt NULL,
HasPropertyFundUnknown TinyInt NULL,
InValidOriginatingRegionAndFunctionalDepartment TinyInt NULL DEFAULT(0),
InValidActivityTypeAndEntity  TinyInt NULL DEFAULT(0)
)

--Step 1 :: Get all the unknowns
Insert Into #ValidationSummary
(SourceCode,ProfitabilityActualKey, ReferenceCode, HasActivityTypeUnknown, HasAllocationRegionUnknown, 
HasFunctionalDepartmentUnknown,HasGlAccountUnknown, HasGlAccountCategoryUnknown, 
HasOriginatingRegionUnknown,--HasOverheadUnknown, 
HasPropertyFundUnknown)

Select 
	ss.SourceCode,
	pa.ProfitabilityActualKey, 
	pa.ReferenceCode, 
	CASE WHEN pa.ActivityTypeKey = -1 THEN 1 ELSE 0 END HasActivityTypeUnknown, 
	CASE WHEN pa.AllocationRegionKey = -1 THEN 1 ELSE 0 END HasAllocationRegionUnknown, 
	CASE WHEN pa.FunctionalDepartmentKey = -1 AND gac.FeeOrExpense <> 'INCOME' THEN 1 ELSE 0 END HasFunctionalDepartmentUnknown,
	CASE WHEN pa.GlAccountKey = -1 THEN 1 ELSE 0 END HasGlAccountUnknown, 
	CASE WHEN gac.MajorCategoryName like '%unknown%' THEN 1 ELSE 0 END HasGlAccountCategoryUnknown, 
	CASE WHEN pa.OriginatingRegionKey = -1 AND gac.FeeOrExpense <> 'INCOME' THEN 1 ELSE 0 END HasOriginatingRegionUnknown,
	--CASE WHEN pa.OverheadKey = -1 THEN 1 ELSE 0 END HasOverheadUnknown, 
	CASE WHEN pa.PropertyFundKey = -1 THEN 1 ELSE 0 END HasPropertyFundUnknown

From	ProfitabilityActual pa
			INNER JOIN Calendar ca on ca.CalendarKey = pa.CalendarKey
			INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = pa.GlobalGlAccountCategoryKey
			INNER JOIN [Source] ss ON ss.SourceKey = pa.SourceKey
			INNER JOIN ProfitabilityActualSourceTable pas ON pas.ProfitabilityActualSourceTableId = pa.ProfitabilityActualSourceTableId
Where	ca.CalendarPeriod BETWEEN @StartPeriod AND @EndPeriod		
AND		pas.SourceTable IN ('GHIS','JOURNAL')
AND		gac.MinorCategoryName <> 'Architects & Engineering'
--Only where one of the DimensionKey's are unknown
AND (
	CASE WHEN pa.ActivityTypeKey = -1 THEN 1 ELSE 0 END = 1 OR 
	CASE WHEN pa.AllocationRegionKey = -1 THEN 1 ELSE 0 END = 1 OR
	CASE WHEN pa.FunctionalDepartmentKey = -1 THEN 1 ELSE 0 END = 1 OR
	CASE WHEN pa.GlAccountKey = -1 THEN 1 ELSE 0 END = 1 OR
	CASE WHEN gac.MajorCategoryName like '%unknown%' THEN 1 ELSE 0 END = 1 OR 
	CASE WHEN pa.OriginatingRegionKey = -1 THEN 1 ELSE 0 END = 1 OR
	--CASE WHEN pa.OverheadKey = -1 THEN 1 ELSE 0 END = 1 OR
	CASE WHEN pa.PropertyFundKey = -1 THEN 1 ELSE 0 END = 1
	)

IF OBJECT_ID('tempdb..#GeneralLedger') IS NOT NULL
	DROP TABLE #GeneralLedger
	
--Step 1 :: Get all the MRI GeneralLedger Details, used to removed re-classed MRI items
--US
Select 
		Gl.Period,
		Gl.Item,
		Gl.Ref,
		Gl.SiteID,
		En.EntityID,
		En.NAME EntityName,
		Gl.GlAccountCode,
		Ga.ACCTNAME GlAccountName,
		Dp.Department,
		Dp.Description DepartmentDescription,
		Jb.JobCode,
		Jb.Description JobCodeDescription,
		gl.Amount,
		gl.Description,
		Gl.EnterDate,
		Gl.Reversal,
		Gl.Status,
		Gl.Basis,
		Gl.UserId,
		Gl.CorporateDepartmentCode,
		Gl.SourceCode,
		Gl.SourcePrimaryKey,
		Gl.[Source]

Into #GeneralLedger
From GrReportingStaging.USProp.GeneralLedger Gl
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.USProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId
		
	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.USProp.ENTITY En
					INNER JOIN GrReportingStaging.USProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
	
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.USProp.GACC Ga
					INNER JOIN GrReportingStaging.USProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
	
	LEFT OUTER JOIN (
				SELECT
					Dp.*
				FROM
					GrReportingStaging.Gacs.Department  Dp
					INNER JOIN GrReportingStaging.Gacs.DepartmentActive(@DataPriorToDate) DpA ON
						DpA.ImportKey = Dp.ImportKey
				) Dp ON
		Dp.[Source] = Gl.SourceCode AND Dp.Department = Gl.RegionCode + Gl.FunctionalDepartmentCode
	
	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.Gacs.JobCode Jb
					INNER JOIN GrReportingStaging.Gacs.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JOBCODE = Gl.JobCode AND Gl.SourceCode = Jb.Source
		
		
Where Gl.Period BETWEEN @StartPeriod AND @EndPeriod		

UNION ALL
Select 
		Gl.Period,
		Gl.Item,
		Gl.Ref,
		Gl.SiteID,
		En.EntityID,
		En.NAME EntityName,
		Gl.GlAccountCode,
		Ga.ACCTNAME GlAccountName,
		Dp.Department,
		Dp.Description DepartmentDescription,
		Jb.JobCode,
		Jb.Description JobCodeDescription,
		gl.Amount,
		gl.Description,
		Gl.EnterDate,
		Gl.Reversal,
		Gl.Status,
		Gl.Basis,
		Gl.UserId,
		Gl.CorporateDepartmentCode,
		Gl.SourceCode,
		Gl.SourcePrimaryKey,
		Gl.[Source]

From GrReportingStaging.USCorp.GeneralLedger Gl
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.USCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.USCorp.ENTITY En
					INNER JOIN GrReportingStaging.USCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.RegionCode
	
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.USCorp.GACC Ga
					INNER JOIN GrReportingStaging.USCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
	
	LEFT OUTER JOIN (
				SELECT
					Dp.*
				FROM
					GrReportingStaging.Gacs.Department  Dp
					INNER JOIN GrReportingStaging.Gacs.DepartmentActive(@DataPriorToDate) DpA ON
						DpA.ImportKey = Dp.ImportKey
				) Dp ON
		Dp.[Source] = Gl.SourceCode AND Dp.Department = Gl.PropertyFundCode
	
	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.Gacs.JobCode Jb
					INNER JOIN GrReportingStaging.Gacs.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JOBCODE = Gl.JobCode AND Gl.SourceCode = Jb.Source
				
Where Gl.Period BETWEEN @StartPeriod AND @EndPeriod	
--EU
UNION ALL
Select 
		Gl.Period,
		Gl.Item,
		Gl.Ref,
		Gl.SiteID,
		En.EntityID,
		En.NAME EntityName,
		Gl.GlAccountCode,
		Ga.ACCTNAME GlAccountName,
		Dp.Department,
		Dp.Description DepartmentDescription,
		Jb.JobCode,
		Jb.Description JobCodeDescription,
		gl.Amount,
		gl.Description,
		Gl.EnterDate,
		Gl.Reversal,
		Gl.Status,
		Gl.Basis,
		Gl.UserId,
		Gl.CorporateDepartmentCode,
		Gl.SourceCode,
		Gl.SourcePrimaryKey,
		Gl.[Source]
 
From GrReportingStaging.EUProp.GeneralLedger Gl
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.EUProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.EUProp.ENTITY En
					INNER JOIN GrReportingStaging.EUProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
	
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.EUProp.GACC Ga
					INNER JOIN GrReportingStaging.EUProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
	
	LEFT OUTER JOIN (
				SELECT
					Dp.*
				FROM
					GrReportingStaging.Gacs.Department  Dp
					INNER JOIN GrReportingStaging.Gacs.DepartmentActive(@DataPriorToDate) DpA ON
						DpA.ImportKey = Dp.ImportKey
				) Dp ON
		Dp.[Source] = Gl.SourceCode AND Dp.Department = Gl.RegionCode + Gl.FunctionalDepartmentCode
	
	LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.Gacs.JobCode Jb
					INNER JOIN GrReportingStaging.Gacs.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JOBCODE = Gl.JobCode AND Gl.SourceCode = Jb.Source
				
Where Gl.Period BETWEEN @StartPeriod AND @EndPeriod	
UNION ALL
Select 
		Gl.Period,
		Gl.Item,
		Gl.Ref,
		Gl.SiteID,
		En.EntityID,
		En.NAME EntityName,
		Gl.GlAccountCode,
		Ga.ACCTNAME GlAccountName,
		Dp.Department,
		Dp.Description DepartmentDescription,
		Jb.JobCode,
		Jb.Description JobCodeDescription,
		gl.Amount,
		gl.Description,
		Gl.EnterDate,
		Gl.Reversal,
		Gl.Status,
		Gl.Basis,
		Gl.UserId,
		Gl.CorporateDepartmentCode,
		Gl.SourceCode,
		Gl.SourcePrimaryKey,
		Gl.[Source]

From GrReportingStaging.EUCorp.GeneralLedger Gl
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.EUCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId

LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.EUCorp.ENTITY En
					INNER JOIN GrReportingStaging.EUCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.RegionCode
	
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.EUCorp.GACC Ga
					INNER JOIN GrReportingStaging.EUCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
	
	LEFT OUTER JOIN (
				SELECT
					Dp.*
				FROM
					GrReportingStaging.Gacs.Department  Dp
					INNER JOIN GrReportingStaging.Gacs.DepartmentActive(@DataPriorToDate) DpA ON
						DpA.ImportKey = Dp.ImportKey
				) Dp ON
		Dp.[Source] = Gl.SourceCode AND Dp.Department = Gl.PropertyFundCode
	
LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.Gacs.JobCode Jb
					INNER JOIN GrReportingStaging.Gacs.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JOBCODE = Gl.JobCode AND Gl.SourceCode = Jb.Source
				
Where Gl.Period BETWEEN @StartPeriod AND @EndPeriod	
--BR
UNION ALL
Select 
		Gl.Period,
		Gl.Item,
		Gl.Ref,
		Gl.SiteID,
		En.EntityID,
		En.NAME EntityName,
		Gl.GlAccountCode,
		Ga.ACCTNAME GlAccountName,
		Dp.Department,
		Dp.Description DepartmentDescription,
		NULL JobCode,
		NULL JobCodeDescription,
		gl.Amount,
		gl.Description,
		Gl.EnterDate,
		Gl.Reversal,
		Gl.Status,
		Gl.Basis,
		Gl.UserId,
		Gl.CorporateDepartmentCode,
		Gl.SourceCode,
		Gl.SourcePrimaryKey,
		Gl.[Source]

From GrReportingStaging.BRProp.GeneralLedger Gl
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.BRProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.BRProp.ENTITY En
					INNER JOIN GrReportingStaging.BRProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
	
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.BRProp.GACC Ga
					INNER JOIN GrReportingStaging.BRProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
	
	LEFT OUTER JOIN (
				SELECT
					Dp.*
				FROM
					GrReportingStaging.Gacs.Department  Dp
					INNER JOIN GrReportingStaging.Gacs.DepartmentActive(@DataPriorToDate) DpA ON
						DpA.ImportKey = Dp.ImportKey
				) Dp ON
		Dp.[Source] = Gl.SourceCode AND Dp.Department = Gl.RegionCode + Gl.FunctionalDepartmentCode
	

				
Where Gl.Period BETWEEN @StartPeriod AND @EndPeriod	
UNION ALL
Select 
		Gl.Period,
		Gl.Item,
		Gl.Ref,
		Gl.SiteID,
		En.EntityID,
		En.NAME EntityName,
		Gl.GlAccountCode,
		Ga.ACCTNAME GlAccountName,
		Dp.Department,
		Dp.Description DepartmentDescription,
		Jb.JobCode,
		Jb.Description JobCodeDescription,
		gl.Amount,
		gl.Description,
		Gl.EnterDate,
		Gl.Reversal,
		Gl.Status,
		Gl.Basis,
		Gl.UserId,
		Gl.CorporateDepartmentCode,
		Gl.SourceCode,
		Gl.SourcePrimaryKey,
		Gl.[Source]
 
From GrReportingStaging.BRCorp.GeneralLedger Gl
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.BRCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId

LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.BRCorp.ENTITY En
					INNER JOIN GrReportingStaging.BRCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.RegionCode
	
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.BRCorp.GACC Ga
					INNER JOIN GrReportingStaging.BRCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
	
	LEFT OUTER JOIN (
				SELECT
					Dp.*
				FROM
					GrReportingStaging.Gacs.Department  Dp
					INNER JOIN GrReportingStaging.Gacs.DepartmentActive(@DataPriorToDate) DpA ON
						DpA.ImportKey = Dp.ImportKey
				) Dp ON
		Dp.[Source] = Gl.SourceCode AND Dp.Department = Gl.PropertyFundCode
	
LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.Gacs.JobCode Jb
					INNER JOIN GrReportingStaging.Gacs.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JOBCODE = Gl.JobCode AND Gl.SourceCode = Jb.Source
				
Where Gl.Period BETWEEN @StartPeriod AND @EndPeriod	
--IN
UNION ALL
Select 
		Gl.Period,
		Gl.Item,
		Gl.Ref,
		Gl.SiteID,
		En.EntityID,
		En.NAME EntityName,
		Gl.GlAccountCode,
		Ga.ACCTNAME GlAccountName,
		Dp.Department,
		Dp.Description DepartmentDescription,
		NULL JobCode,
		NULL JobCodeDescription,
		gl.Amount,
		gl.Description,
		Gl.EnterDate,
		Gl.Reversal,
		Gl.Status,
		Gl.Basis,
		Gl.UserId,
		Gl.CorporateDepartmentCode,
		Gl.SourceCode,
		Gl.SourcePrimaryKey,
		Gl.[Source]
 
From GrReportingStaging.INProp.GeneralLedger Gl
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.INProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.INProp.ENTITY En
					INNER JOIN GrReportingStaging.INProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
	
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.INProp.GACC Ga
					INNER JOIN GrReportingStaging.INProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
	
	LEFT OUTER JOIN (
				SELECT
					Dp.*
				FROM
					GrReportingStaging.Gacs.Department  Dp
					INNER JOIN GrReportingStaging.Gacs.DepartmentActive(@DataPriorToDate) DpA ON
						DpA.ImportKey = Dp.ImportKey
				) Dp ON
		Dp.[Source] = Gl.SourceCode AND Dp.Department = Gl.RegionCode + Gl.FunctionalDepartmentCode
	
Where Gl.Period BETWEEN @StartPeriod AND @EndPeriod	
UNION ALL
Select 
		Gl.Period,
		Gl.Item,
		Gl.Ref,
		Gl.SiteID,
		En.EntityID,
		En.NAME EntityName,
		Gl.GlAccountCode,
		Ga.ACCTNAME GlAccountName,
		Dp.Department,
		Dp.Description DepartmentDescription,
		Jb.JobCode,
		Jb.Description JobCodeDescription,
		gl.Amount,
		gl.Description,
		Gl.EnterDate,
		Gl.Reversal,
		Gl.Status,
		Gl.Basis,
		Gl.UserId,
		Gl.CorporateDepartmentCode,
		Gl.SourceCode,
		Gl.SourcePrimaryKey,
		Gl.[Source]

From GrReportingStaging.INCorp.GeneralLedger Gl
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.INCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId

LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.INCorp.ENTITY En
					INNER JOIN GrReportingStaging.INCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.RegionCode
	
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.INCorp.GACC Ga
					INNER JOIN GrReportingStaging.INCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
	
	LEFT OUTER JOIN (
				SELECT
					Dp.*
				FROM
					GrReportingStaging.Gacs.Department  Dp
					INNER JOIN GrReportingStaging.Gacs.DepartmentActive(@DataPriorToDate) DpA ON
						DpA.ImportKey = Dp.ImportKey
				) Dp ON
		Dp.[Source] = Gl.SourceCode AND Dp.Department = Gl.PropertyFundCode
	
LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.Gacs.JobCode Jb
					INNER JOIN GrReportingStaging.Gacs.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JOBCODE = Gl.JobCode AND Gl.SourceCode = Jb.Source
				
Where Gl.Period BETWEEN @StartPeriod AND @EndPeriod	
--CN
UNION ALL
Select 
		Gl.Period,
		Gl.Item,
		Gl.Ref,
		Gl.SiteID,
		En.EntityID,
		En.NAME EntityName,
		Gl.GlAccountCode,
		Ga.ACCTNAME GlAccountName,
		Dp.Department,
		Dp.Description DepartmentDescription,
		Jb.JobCode,
		Jb.Description JobCodeDescription,
		gl.Amount,
		gl.Description,
		Gl.EnterDate,
		Gl.Reversal,
		Gl.Status,
		Gl.Basis,
		Gl.UserId,
		Gl.CorporateDepartmentCode,
		Gl.SourceCode,
		Gl.SourcePrimaryKey,
		Gl.[Source]

From GrReportingStaging.CNProp.GeneralLedger Gl
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.CNProp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.CNProp.ENTITY En
					INNER JOIN GrReportingStaging.CNProp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.PropertyFundCode
	
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.CNProp.GACC Ga
					INNER JOIN GrReportingStaging.CNProp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
	
	LEFT OUTER JOIN (
				SELECT
					Dp.*
				FROM
					GrReportingStaging.Gacs.Department  Dp
					INNER JOIN GrReportingStaging.Gacs.DepartmentActive(@DataPriorToDate) DpA ON
						DpA.ImportKey = Dp.ImportKey
				) Dp ON
		Dp.[Source] = Gl.SourceCode AND Dp.Department = Gl.RegionCode + Gl.FunctionalDepartmentCode
	
LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.Gacs.JobCode Jb
					INNER JOIN GrReportingStaging.Gacs.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JOBCODE = Gl.JobCode AND Gl.SourceCode = Jb.Source
				
Where Gl.Period BETWEEN @StartPeriod AND @EndPeriod	
UNION ALL
Select 
		Gl.Period,
		Gl.Item,
		Gl.Ref,
		Gl.SiteID,
		En.EntityID,
		En.NAME EntityName,
		Gl.GlAccountCode,
		Ga.ACCTNAME GlAccountName,
		Dp.Department,
		Dp.Description DepartmentDescription,
		Jb.JobCode,
		Jb.Description JobCodeDescription,
		gl.Amount,
		gl.Description,
		Gl.EnterDate,
		Gl.Reversal,
		Gl.Status,
		Gl.Basis,
		Gl.UserId,
		Gl.CorporateDepartmentCode,
		Gl.SourceCode,
		Gl.SourcePrimaryKey,
		Gl.[Source]
 
From GrReportingStaging.CNCorp.GeneralLedger Gl
	INNER JOIN (
				--This allows JOURNAL&GHIS to each have a record with the same PK,
				--but that is incorrect data and as such GR will pick GHIS as the 
				--more accurate data, for it is posted data, where journal data is still open data
				SELECT 
					SourcePrimaryKey,
					MAX(SourceTableId) SourceTableId
				FROM
					GrReportingStaging.CNCorp.GeneralLedger Gl
				GROUP BY 
					SourcePrimaryKey
				) t1 ON
		t1.SourcePrimaryKey = Gl.SourcePrimaryKey AND
		t1.SourceTableId = Gl.SourceTableId

	LEFT OUTER JOIN (
				SELECT
					En.*
				FROM
					GrReportingStaging.CNCorp.ENTITY En
					INNER JOIN GrReportingStaging.CNCorp.EntityActive(@DataPriorToDate) EnA ON
						EnA.ImportKey = En.ImportKey
				) En ON
		En.EntityId = Gl.RegionCode
	
	LEFT OUTER JOIN (
				SELECT
					Ga.*
				FROM
					GrReportingStaging.CNCorp.GACC Ga
					INNER JOIN GrReportingStaging.CNCorp.GAccActive(@DataPriorToDate) GaA ON
						GaA.ImportKey = Ga.ImportKey
				) Ga ON
		Ga.ACCTNUM = Gl.GlAccountCode
	
	LEFT OUTER JOIN (
				SELECT
					Dp.*
				FROM
					GrReportingStaging.Gacs.Department  Dp
					INNER JOIN GrReportingStaging.Gacs.DepartmentActive(@DataPriorToDate) DpA ON
						DpA.ImportKey = Dp.ImportKey
				) Dp ON
		Dp.[Source] = Gl.SourceCode AND Dp.Department = Gl.PropertyFundCode
	
LEFT OUTER JOIN (
				SELECT
					Jb.*
				FROM
					GrReportingStaging.Gacs.JobCode Jb
					INNER JOIN GrReportingStaging.Gacs.JobCodeActive(@DataPriorToDate) JbA ON
						JbA.ImportKey = Jb.ImportKey
				) Jb ON
		Jb.JOBCODE = Gl.JobCode AND Gl.SourceCode = Jb.Source

IF OBJECT_ID('tempdb..#PropertyHeaderSum') IS NOT NULL
	DROP TABLE #PropertyHeaderSum

SELECT LEDGER.SourceCode, LEDGER.EntityID, LEDGER.GlAccountCode, SUM(LEDGER.Amount) Amount
INTO #PropertyHeaderSum
FROM 
	GrReportingStaging.USPROP.GeneralLedger LEDGER 
	LEFT OUTER JOIN (
		SELECT GACC.ACCTNUM, GACC.ISGR
		FROM GrReportingStaging.USPROP.GACC
		INNER JOIN GrReportingStaging.USPROP.GAccActive(@DataPriorToDate) GaA 
			ON GaA.ImportKey = GACC.ImportKey
	) GACC ON LEDGER.GlAccountCode = GACC.ACCTNUM
WHERE 
	LEDGER.Period BETWEEN @StartPeriod AND @EndPeriod 
	AND LEDGER.Basis IN ('A','B')		
	AND GACC.ISGR = 'Y' 
	AND EXISTS(SELECT NULL FROM GrReportingStaging.USPROP.GACC G
		WHERE G.ISGR = 'Y' AND LEFT(G.ACCTNUM, 10) = LEFT(GACC.ACCTNUM, 10) 
			AND G.ACCTNUM <> GACC.ACCTNUM)
	AND RIGHT(RTRIM(GACC.ACCTNUM), 2) = '00'
GROUP BY
	LEDGER.SourceCode, LEDGER.EntityID, LEDGER.GlAccountCode
UNION ALL 
SELECT LEDGER.SourceCode, LEDGER.EntityID, LEDGER.GlAccountCode, SUM(LEDGER.Amount)
FROM 
	GrReportingStaging.EUPROP.GeneralLedger LEDGER 
	LEFT OUTER JOIN (
		SELECT GACC.ACCTNUM, GACC.ISGR
		FROM GrReportingStaging.EUPROP.GACC
		INNER JOIN GrReportingStaging.EUPROP.GAccActive(@DataPriorToDate) GaA 
			ON GaA.ImportKey = GACC.ImportKey
	) GACC ON LEDGER.GlAccountCode = GACC.ACCTNUM
WHERE 
	LEDGER.Period BETWEEN @StartPeriod AND @EndPeriod
	AND LEDGER.Basis IN ('A','B')		
	AND GACC.ISGR = 'Y' 
	AND EXISTS(SELECT NULL FROM GrReportingStaging.EUPROP.GACC G
		WHERE G.ISGR = 'Y' AND LEFT(G.ACCTNUM, 10) = LEFT(GACC.ACCTNUM, 10) 
			AND G.ACCTNUM <> GACC.ACCTNUM)
	AND RIGHT(RTRIM(GACC.ACCTNUM), 2) = '00'
GROUP BY
	LEDGER.SourceCode, LEDGER.EntityID, LEDGER.GlAccountCode
UNION ALL 
SELECT LEDGER.SourceCode, LEDGER.EntityID, LEDGER.GlAccountCode, SUM(LEDGER.Amount)
FROM
	GrReportingStaging.CNPROP.GeneralLedger LEDGER 
	LEFT OUTER JOIN (
		SELECT GACC.ACCTNUM, GACC.ISGR
		FROM GrReportingStaging.CNCorp.GACC
		INNER JOIN GrReportingStaging.CNPROP.GAccActive(@DataPriorToDate) GaA 
			ON GaA.ImportKey = GACC.ImportKey
	) GACC ON LEDGER.GlAccountCode = GACC.ACCTNUM
WHERE 
	LEDGER.Period BETWEEN @StartPeriod AND @EndPeriod
	AND LEDGER.Basis IN ('A','B')		
	AND GACC.ISGR = 'Y' 
	AND EXISTS(SELECT NULL FROM GrReportingStaging.CNPROP.GACC G
		WHERE G.ISGR = 'Y' AND LEFT(G.ACCTNUM, 10) = LEFT(GACC.ACCTNUM, 10) 
			AND G.ACCTNUM <> GACC.ACCTNUM)
	AND RIGHT(RTRIM(GACC.ACCTNUM), 2) = '00'
GROUP BY
	LEDGER.SourceCode, LEDGER.EntityID, LEDGER.GlAccountCode
UNION ALL 
SELECT LEDGER.SourceCode, LEDGER.EntityID, LEDGER.GlAccountCode, SUM(LEDGER.Amount) 
FROM
	GrReportingStaging.INPROP.GeneralLedger LEDGER 
	LEFT OUTER JOIN (
		SELECT GACC.ACCTNUM, GACC.ISGR
		FROM GrReportingStaging.INPROP.GACC
		INNER JOIN GrReportingStaging.INPROP.GAccActive(@DataPriorToDate) GaA 
			ON GaA.ImportKey = GACC.ImportKey
	) GACC ON LEDGER.GlAccountCode = GACC.ACCTNUM
WHERE 
	LEDGER.Period BETWEEN @StartPeriod AND @EndPeriod
	AND LEDGER.Basis IN ('A','B')		
	AND GACC.ISGR = 'Y' 
	AND EXISTS(SELECT NULL FROM GrReportingStaging.INPROP.GACC G
		WHERE G.ISGR = 'Y' AND LEFT(G.ACCTNUM, 10) = LEFT(GACC.ACCTNUM, 10) 
			AND G.ACCTNUM <> GACC.ACCTNUM)
	AND RIGHT(RTRIM(GACC.ACCTNUM), 2) = '00'
GROUP BY
	LEDGER.SourceCode, LEDGER.EntityID, LEDGER.GlAccountCode
UNION ALL 
SELECT LEDGER.SourceCode, LEDGER.EntityID, LEDGER.GlAccountCode, SUM(LEDGER.Amount) 
FROM
	GrReportingStaging.BRPROP.GeneralLedger LEDGER 
	LEFT OUTER JOIN (
		SELECT GACC.ACCTNUM, GACC.ISGR
		FROM GrReportingStaging.BRPROP.GACC
		INNER JOIN GrReportingStaging.BRPROP.GAccActive(@DataPriorToDate) GaA 
			ON GaA.ImportKey = GACC.ImportKey
	) GACC ON LEDGER.GlAccountCode = GACC.ACCTNUM
WHERE 
	LEDGER.Period BETWEEN @StartPeriod AND @EndPeriod 
	AND LEDGER.Basis IN ('A','B')		
	AND GACC.ISGR = 'Y' 
	AND EXISTS(SELECT NULL FROM GrReportingStaging.BRPROP.GACC G
		WHERE G.ISGR = 'Y' AND LEFT(G.ACCTNUM, 10) = LEFT(GACC.ACCTNUM, 10) 
			AND G.ACCTNUM <> GACC.ACCTNUM)
	AND RIGHT(RTRIM(GACC.ACCTNUM), 2) = '00'
GROUP BY
	LEDGER.SourceCode, LEDGER.EntityID, LEDGER.GlAccountCode	
		
IF OBJECT_ID('tempdb..#CorporateDescSum') IS NOT NULL
	DROP TABLE #CorporateDescSum
	
SELECT
	gl.SourceCode,
	gl.EntityID,
	gl.Source,
	ISNULL(gl.JobCode,'') JobCode,
	ISNULL(gl.Description,'') Description,
	SUM(gl.Amount) AS Amount
INTO
	#CorporateDescSum
FROM					
	#GeneralLedger gl	
WHERE
	RIGHT(gl.SourceCode, 1) = 'C'
GROUP BY
	gl.SourceCode,
	gl.EntityID,
	gl.Source,
	gl.JobCode,
	gl.Description
		
--Step 2 :: Remove ActivityType unknowns from #ValidationSummary, that have been re-classed and now net out to 0
Update #ValidationSummary
Set	HasActivityTypeUnknown = 0
	From	
			#GeneralLedger gl 
			INNER JOIN 
						(
						Select  
								gl.GlAccountCode,
								gl.EntityID

						From #ValidationSummary vs
								INNER JOIN #GeneralLedger gl on vs.ReferenceCode = gl.SourcePrimaryKey AND vs.SourceCode = gl.SourceCode
						Where vs.HasActivityTypeUnknown = 1
						Group By
								gl.GlAccountCode,
								gl.EntityID
						Having SUM(gl.Amount) = 0.00
						) UnknownAfterReclass
						ON UnknownAfterReclass.EntityID = gl.EntityID 
						AND UnknownAfterReclass.GlAccountCode = gl.GlAccountCode
						
Where	#ValidationSummary.HasActivityTypeUnknown = 1
AND		#ValidationSummary.ReferenceCode = gl.SourcePrimaryKey
 AND	#ValidationSummary.SourceCode = gl.SourceCode
 
--Step 3 :: Remove GlAccount unknowns from #ValidationSummary, that have been re-classed and now net out to 0
Update #ValidationSummary
Set	HasGlAccountUnknown = 0
	From	
			#GeneralLedger gl 
			INNER JOIN 
						(
						Select  
								gl.GlAccountCode,
								gl.EntityID

						From #ValidationSummary vs
								INNER JOIN #GeneralLedger gl on vs.ReferenceCode = gl.SourcePrimaryKey AND vs.SourceCode = gl.SourceCode
						Where vs.HasGlAccountUnknown = 1
						Group By
								gl.GlAccountCode,
								gl.EntityID
						Having SUM(gl.Amount) = 0.00
						) UnknownAfterReclass
						ON UnknownAfterReclass.EntityID = gl.EntityID 
						AND UnknownAfterReclass.GlAccountCode = gl.GlAccountCode
						
Where	#ValidationSummary.HasGlAccountUnknown = 1
AND		#ValidationSummary.ReferenceCode = gl.SourcePrimaryKey
 AND	#ValidationSummary.SourceCode = gl.SourceCode


--Step 4 :: Remove GlAccountCategory unknowns from #ValidationSummary, that have been re-classed and now net out to 0
Update #ValidationSummary
Set	HasGlAccountCategoryUnknown = 0
	From	
			#GeneralLedger gl 
			INNER JOIN 
						(
						Select  
								gl.GlAccountCode,
								gl.EntityID

						From #ValidationSummary vs
								INNER JOIN #GeneralLedger gl on vs.ReferenceCode = gl.SourcePrimaryKey AND vs.SourceCode = gl.SourceCode
						Where vs.HasGlAccountCategoryUnknown = 1
						Group By
								gl.GlAccountCode,
								gl.EntityID
						Having SUM(gl.Amount) = 0.00
						) UnknownAfterReclass
						ON UnknownAfterReclass.EntityID = gl.EntityID 
						AND UnknownAfterReclass.GlAccountCode = gl.GlAccountCode
						
Where	#ValidationSummary.HasGlAccountCategoryUnknown = 1
AND		#ValidationSummary.ReferenceCode = gl.SourcePrimaryKey
 AND	#ValidationSummary.SourceCode = gl.SourceCode


--Step 4 :: Remove AllocationRegion unknowns from #ValidationSummary, that have been re-classed and now net out to 0
Update #ValidationSummary
Set	HasAllocationRegionUnknown = 0
	From	
			#GeneralLedger gl 
			INNER JOIN 
						(
						Select  
								gl.GlAccountCode,
								gl.EntityID

						From #ValidationSummary vs
								INNER JOIN #GeneralLedger gl on vs.ReferenceCode = gl.SourcePrimaryKey AND vs.SourceCode = gl.SourceCode
						Where vs.HasAllocationRegionUnknown = 1
						Group By
								gl.GlAccountCode,
								gl.EntityID
						Having SUM(gl.Amount) = 0.00
						) UnknownAfterReclass
						ON UnknownAfterReclass.EntityID = gl.EntityID 
						AND UnknownAfterReclass.GlAccountCode = gl.GlAccountCode
						
Where	#ValidationSummary.HasAllocationRegionUnknown = 1
AND		#ValidationSummary.ReferenceCode = gl.SourcePrimaryKey
 AND	#ValidationSummary.SourceCode = gl.SourceCode

--Step 5 :: Remove OriginatingRegion unknowns from #ValidationSummary, that have been re-classed and now net out to 0
Update #ValidationSummary
Set	HasOriginatingRegionUnknown = 0
	From	
			#GeneralLedger gl 
			INNER JOIN 
						(
						Select  
								gl.GlAccountCode,
								gl.EntityID

						From #ValidationSummary vs
								INNER JOIN #GeneralLedger gl on vs.ReferenceCode = gl.SourcePrimaryKey AND vs.SourceCode = gl.SourceCode
						Where vs.HasOriginatingRegionUnknown = 1
						Group By
								gl.GlAccountCode,
								gl.EntityID
						Having SUM(gl.Amount) = 0.00
						) UnknownAfterReclass
						ON UnknownAfterReclass.EntityID = gl.EntityID 
						AND UnknownAfterReclass.GlAccountCode = gl.GlAccountCode
						
Where	#ValidationSummary.HasOriginatingRegionUnknown = 1
AND		#ValidationSummary.ReferenceCode = gl.SourcePrimaryKey
 AND	#ValidationSummary.SourceCode = gl.SourceCode


--Step 6 :: Remove FunctionalDepartment unknowns from #ValidationSummary, that have been re-classed and now net out to 0
Update #ValidationSummary
Set	HasFunctionalDepartmentUnknown = 0
	From	
			#GeneralLedger gl 
			INNER JOIN 
						(
						Select  
								gl.GlAccountCode,
								gl.EntityID

						From #ValidationSummary vs
								INNER JOIN #GeneralLedger gl on vs.ReferenceCode = gl.SourcePrimaryKey AND vs.SourceCode = gl.SourceCode
						Where vs.HasFunctionalDepartmentUnknown = 1
						Group By
								gl.GlAccountCode,
								gl.EntityID
						Having SUM(gl.Amount) = 0.00
						) UnknownAfterReclass
						ON UnknownAfterReclass.EntityID = gl.EntityID 
						AND UnknownAfterReclass.GlAccountCode = gl.GlAccountCode
						
Where	#ValidationSummary.HasFunctionalDepartmentUnknown = 1
AND		#ValidationSummary.ReferenceCode = gl.SourcePrimaryKey
 AND	#ValidationSummary.SourceCode = gl.SourceCode


--Step 7 :: Remove PropertyFund unknowns from #ValidationSummary, that have been re-classed and now net out to 0
Update #ValidationSummary
Set	HasPropertyFundUnknown = 0
	From	
			#GeneralLedger gl 
			INNER JOIN 
						(
						Select  
								gl.GlAccountCode,
								gl.EntityID

						From #ValidationSummary vs
								INNER JOIN #GeneralLedger gl on vs.ReferenceCode = gl.SourcePrimaryKey AND vs.SourceCode = gl.SourceCode
						Where vs.HasPropertyFundUnknown = 1
						Group By
								gl.GlAccountCode,
								gl.EntityID
						Having SUM(gl.Amount) = 0.00
						) UnknownAfterReclass
						ON UnknownAfterReclass.EntityID = gl.EntityID 
						AND UnknownAfterReclass.GlAccountCode = gl.GlAccountCode
						
Where	#ValidationSummary.HasPropertyFundUnknown = 1
AND		#ValidationSummary.ReferenceCode = gl.SourcePrimaryKey
 AND	#ValidationSummary.SourceCode = gl.SourceCode


-----------------------------------------------------------------------------------------------------------------------------------------------
--Step 8 :: OriginatingRegion & FunctionalDepartment Combination
--Sheet 1 :: OriginatingSubRegion And FunctionalDepartment

IF OBJECT_ID('tempdb..#ValidRegionAndFunctionalDepartment') IS NOT NULL
	DROP TABLE #ValidRegionAndFunctionalDepartment

CREATE TABLE #ValidRegionAndFunctionalDepartment
(OriginatingSubRegionName Varchar(50) NOT NULL,
FunctionalDepartmentName Varchar(50) NOT NULL
)
Insert Into #ValidRegionAndFunctionalDepartment
(FunctionalDepartmentName,OriginatingSubRegionName)
EXEC [stp_S_ValidPayrollRegionAndFunctionalDepartment] 
	@BudgetYear = @BudgetYear,
	@BudgetQuater = @BudgetQuater,
	@DataPriorToDate = @DataPriorToDate

Insert Into #ValidRegionAndFunctionalDepartment
(FunctionalDepartmentName,OriginatingSubRegionName)
EXEC [stp_S_ValidNonPayrollRegionAndFunctionalDepartment] 
	@BudgetYear = @BudgetYear,
	@BudgetQuater = @BudgetQuater,
	@DataPriorToDate = @DataPriorToDate

--Add additional entries provided by Martin: IMS 56718
Insert Into #ValidRegionAndFunctionalDepartment
(OriginatingSubRegionName, FunctionalDepartmentName)
Select t1.OriginatingSubRegionName, t1.FunctionalDepartmentName 
From AdditionalValidCombinationsForOriginatingSubRegionFunctionalDepartment t1
		LEFT OUTER JOIN #ValidRegionAndFunctionalDepartment t2
				ON t2.OriginatingSubRegionName = t1.OriginatingSubRegionName AND
				t2.FunctionalDepartmentName = t1.FunctionalDepartmentName
Where t2.FunctionalDepartmentName IS NULL

IF OBJECT_ID('tempdb..#InvalidRegionAndFunctDeptCombination') IS NOT NULL
	DROP TABLE #InvalidRegionAndFunctDeptCombination
	
Select  
		s.SourceCode,
		pa.ReferenceCode,
		fd.FunctionalDepartmentName,
		orr.SubRegionName
Into #InvalidRegionAndFunctDeptCombination
From ProfitabilityActual pa

		INNER JOIN ProfitabilityActualSourceTable pas ON pas.ProfitabilityActualSourceTableId = pa.ProfitabilityActualSourceTableId

		INNER JOIN [Source] s ON s.SourceKey = pa.SourceKey
		
		LEFT OUTER JOIN FunctionalDepartment fd ON 
					fd.FunctionalDepartmentKey = pa.FunctionalDepartmentKey
				
		LEFT OUTER JOIN OriginatingRegion orr ON 
					orr.OriginatingRegionKey = pa.OriginatingRegionKey

		LEFT OUTER JOIN GlAccountCategory gac ON 
					gac.GlAccountCategoryKey = pa.GlobalGlAccountCategoryKey

		LEFT OUTER JOIN #ValidRegionAndFunctionalDepartment vs 
			on vs.FunctionalDepartmentName = fd.FunctionalDepartmentName
			 AND vs.OriginatingSubRegionName = orr.SubRegionName

Where	vs.FunctionalDepartmentName IS NULL
AND		pas.SourceTable IN ('GHIS','JOURNAL')
--IMS 56718 : Revenue should not be validated against a specific functional department/originating region
AND		gac.FeeOrExpense <> 'INCOME'
AND		gac.MinorCategoryName <> 'Architects & Engineering'


--Remove from this table the items, that the reclass logic already fixed the issue at hand
Delete t1 
From #InvalidRegionAndFunctDeptCombination t1
		INNER JOIN #GeneralLedger gl ON gl.SourcePrimaryKey = t1.ReferenceCode
							 AND gl.SourceCode = t1.SourceCode
		INNER JOIN 
					(
					Select  
							gl.GlAccountCode,
							gl.EntityID

					From #InvalidRegionAndFunctDeptCombination vs
							INNER JOIN #GeneralLedger gl on vs.ReferenceCode = gl.SourcePrimaryKey AND vs.SourceCode = gl.SourceCode
					Group By
							gl.GlAccountCode,
							gl.EntityID
					Having SUM(gl.Amount) = 0.00
					) UnknownAfterReclass
				ON UnknownAfterReclass.EntityID = gl.EntityID 
					AND UnknownAfterReclass.GlAccountCode = gl.GlAccountCode
					
--Updated the existing rows in #ValidationSummary where FunctionalDepartment&OriginatingRegion combination is not valid
Update #ValidationSummary
Set	InValidOriginatingRegionAndFunctionalDepartment = 1
	From	
		#InvalidRegionAndFunctDeptCombination InvalidRegionAndFunctDeptCombination
						
Where	#ValidationSummary.ReferenceCode = InvalidRegionAndFunctDeptCombination.ReferenceCode
 AND	#ValidationSummary.SourceCode = InvalidRegionAndFunctDeptCombination.SourceCode


--Insert only where FunctionalDepartment&OriginatingRegion combination is not valid and the item is not in #ValidationSummary yet
Insert Into #ValidationSummary
(SourceCode,ProfitabilityActualKey, ReferenceCode, HasActivityTypeUnknown, HasAllocationRegionUnknown, 
HasFunctionalDepartmentUnknown,HasGlAccountUnknown, HasGlAccountCategoryUnknown, 
HasOriginatingRegionUnknown,--HasOverheadUnknown, 
HasPropertyFundUnknown,InValidOriginatingRegionAndFunctionalDepartment)
Select 
	ss.SourceCode,
	pa.ProfitabilityActualKey, 
	pa.ReferenceCode, 
	0 HasActivityTypeUnknown, 
	0 HasAllocationRegionUnknown, 
	0 HasFunctionalDepartmentUnknown,
	0 HasGlAccountUnknown, 
	0 HasGlAccountCategoryUnknown, 
	0 HasOriginatingRegionUnknown,
	--1 HasOverheadUnknown, 
	0 HasPropertyFundUnknown,
	1 InValidOriginatingRegionAndFunctionalDepartment

From	ProfitabilityActual pa

			INNER JOIN ProfitabilityActualSourceTable pas ON pas.ProfitabilityActualSourceTableId = pa.ProfitabilityActualSourceTableId

			INNER JOIN Calendar ca on ca.CalendarKey = pa.CalendarKey

			INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = pa.GlobalGlAccountCategoryKey

			INNER JOIN [Source] ss ON ss.SourceKey = pa.SourceKey

			LEFT OUTER JOIN #ValidationSummary existing ON existing.SourceCode = ss.SourceCode AND existing.ReferenceCode = pa.ReferenceCode

			INNER JOIN #InvalidRegionAndFunctDeptCombination InvalidRegionAndFunctDeptCombination ON
						InvalidRegionAndFunctDeptCombination.ReferenceCode = pa.ReferenceCode
					AND	InvalidRegionAndFunctDeptCombination.SourceCode = ss.SourceCode
 
Where	ca.CalendarPeriod BETWEEN @StartPeriod AND @EndPeriod		
AND		existing.ReferenceCode IS NULL --Not in table yet
AND		pas.SourceTable IN ('GHIS','JOURNAL')
AND		gac.MinorCategoryName <> 'Architects & Engineering'

---------------------------------------------------------------------------------------------------------------------------------------
--Sheet 2 :: Entity ActivityType Validation

IF OBJECT_ID('tempdb..#HolisticReviewExport') IS NOT NULL
	DROP TABLE #HolisticReviewExport
	
CREATE TABLE #HolisticReviewExport
(	ProjectCode varchar(20) NULL,
	ProjectName varchar(100) NULL,
	ProjectEndPeriod int NULL,
	ActivityType varchar(50) NULL,
	PropertyFund varchar(100) NULL,
	PropertyFundAllocationSubRegionName varchar(50) NULL,
	Source char(2) NULL,
	AllocationType varchar(100) NULL,
	CorporateDepartment char(8) NULL,
	CorporateDepartmentDescription varchar(50) NULL,
	ReportingEntity varchar(100) NULL,
	ReportingEntityAllocationSubRegionName varchar(50) NULL,
	EntityType varchar(50) NULL,
	BudgetOwner varchar(255) NULL,
	RegionalOwner varchar(255) NULL,
	BudgetCoordinatorDisplayNames nvarchar(max) NULL,
	IsTSCost Varchar(3) NULL,
	PropertyEntity char(6) NULL,
	PropertyEntityName nvarchar(264) NULL
)
SET XACT_ABORT ON

Insert Into #HolisticReviewExport
EXEC SERVER3.Gdm.dbo.HolisticReviewExport


IF OBJECT_ID('tempdb..#ValidActivityTypeEntity') IS NOT NULL
	DROP TABLE #ValidActivityTypeEntity
	
Select
		DISTINCT 
		list.ActivityType ActivityTypeName,
		list.AllocationType AllocationTypeName,
		list.ReportingEntity ReportingEntityName
Into #ValidActivityTypeEntity
From
		#HolisticReviewExport list

--Add additional entries provided by Martin: IMS 56718
Insert Into #ValidActivityTypeEntity
(ReportingEntityName, ActivityTypeName, AllocationTypeName)
Select t1.ReportingEntityName, t1.ActivityTypeName, t1.AllocationTypeName 
From AdditionalValidCombinationsForEntityActivity t1
		LEFT OUTER JOIN #ValidActivityTypeEntity t2
				ON t2.ReportingEntityName = t1.ReportingEntityName AND
				t2.ActivityTypeName = t1.ActivityTypeName AND
				t2.AllocationTypeName = t1.AllocationTypeName
Where t2.AllocationTypeName IS NULL


IF OBJECT_ID('tempdb..#InValidActivityTypeAndEntityCombination') IS NOT NULL
	DROP TABLE #InValidActivityTypeAndEntityCombination
	
Select  
		s.SourceCode,
		pa.ReferenceCode,

		vs.AllocationTypeName,
		REPLACE(gac.AccountSubTypeName,'-','') AccountSubTypeName,

		vs.ActivityTypeName LocalActivityTypeName,
		at.ActivityTypeName ValidationActivityTypeName,

		vs.ReportingEntityName,
		pf.PropertyFundName
		
Into #InValidActivityTypeAndEntityCombination
From ProfitabilityActual pa

		INNER JOIN ProfitabilityActualSourceTable pas ON pas.ProfitabilityActualSourceTableId = pa.ProfitabilityActualSourceTableId

		INNER JOIN [Source] s ON s.SourceKey = pa.SourceKey
		
		INNER JOIN PropertyFund pf ON 
					pf.PropertyFundKey = pa.PropertyFundKey
				
		INNER JOIN ActivityType at ON 
					at.ActivityTypeKey = pa.ActivityTypeKey

		INNER JOIN GlAccountCategory gac ON 
					gac.GlAccountCategoryKey = pa.GlobalGlAccountCategoryKey

		INNER JOIN Overhead oh ON oh.OverheadKey = pa.OverheadKey

		INNER JOIN Calendar ca ON ca.CalendarKey = pa.CalendarKey

		LEFT OUTER JOIN #ValidActivityTypeEntity vs 
			on 
				(	--GR
						gac.MajorCategoryName		<> 'Salaries/Taxes/Benefits'
				AND		oh.OverheadCode				= 'UNALLOC'
				AND		gac.AccountSubTypeName			= 'Overhead'
					--AM
				AND		vs.AllocationTypeName		= 'NonPayroll'
				AND		vs.ActivityTypeName			= 'Corporate Overhead'
				AND		vs.ReportingEntityName		= pf.PropertyFundName
				)
				OR
				(	--GR
						gac.MajorCategoryName		= 'Salaries/Taxes/Benefits'
				AND		oh.OverheadCode				= 'UNALLOC'
				AND		gac.AccountSubTypeName			= 'Overhead'
					--AM
				AND		vs.AllocationTypeName		= 'Payroll'
				AND		vs.ActivityTypeName			= 'Corporate Overhead'
				AND		vs.ReportingEntityName		= pf.PropertyFundName
				)
				OR
				(	--Default Match	
						vs.AllocationTypeName		= REPLACE(gac.AccountSubTypeName,'-','')
				AND		vs.ActivityTypeName			= at.ActivityTypeName
				AND		vs.ReportingEntityName		= pf.PropertyFundName
				)

Where	vs.ActivityTypeName		IS NULL
AND		pas.SourceTable			IN ('GHIS','JOURNAL')
AND		NOT(oh.OverheadCode		= 'ALLOC' AND gac.AccountSubTypeName = 'Overhead')
AND		gac.MinorCategoryName	<> 'Architects & Engineering'
AND		ca.CalendarPeriod		>= 201007 

--Remove from this table the items, that the reclass logic already fixed the issue at hand
Delete t1 
From #InValidActivityTypeAndEntityCombination t1
		INNER JOIN #GeneralLedger gl ON gl.SourcePrimaryKey = t1.ReferenceCode
							 AND gl.SourceCode = t1.SourceCode
		INNER JOIN 
					(
					Select  
							gl.GlAccountCode,
							gl.EntityID

					From #InValidActivityTypeAndEntityCombination vs
							INNER JOIN #GeneralLedger gl on vs.ReferenceCode = gl.SourcePrimaryKey AND vs.SourceCode = gl.SourceCode
					Group By
							gl.GlAccountCode,
							gl.EntityID
					Having SUM(gl.Amount) = 0.00
					) UnknownAfterReclass
				ON UnknownAfterReclass.EntityID = gl.EntityID 
					AND UnknownAfterReclass.GlAccountCode = gl.GlAccountCode

--Delete the old Reporting Entity Names
Delete From #InValidActivityTypeAndEntityCombination
Where LTRIM(RTRIM(PropertyFundName)) IN (
Select 'ECM Business Development' ReportingEntity UNION
Select 'Employee Reimbursables' ReportingEntity UNION
Select 'US CORP TBD' ReportingEntity

)



--Updated the existing rows in #ValidationSummary where FunctionalDepartment&OriginatingRegion combination is not valid
Update #ValidationSummary
Set	InValidActivityTypeAndEntity = 1
	From	
		#InValidActivityTypeAndEntityCombination InValidActivityTypeAndEntityCombination
						
Where	#ValidationSummary.ReferenceCode = InValidActivityTypeAndEntityCombination.ReferenceCode
 AND	#ValidationSummary.SourceCode = InValidActivityTypeAndEntityCombination.SourceCode


--Insert only where FunctionalDepartment&OriginatingRegion combination is not valid and the item is not in #ValidationSummary yet
Insert Into #ValidationSummary
(SourceCode,ProfitabilityActualKey, ReferenceCode, HasActivityTypeUnknown, HasAllocationRegionUnknown, 
HasFunctionalDepartmentUnknown,HasGlAccountUnknown, HasGlAccountCategoryUnknown, 
HasOriginatingRegionUnknown,--HasOverheadUnknown, 
HasPropertyFundUnknown,InValidActivityTypeAndEntity)
Select 
	ss.SourceCode,
	pa.ProfitabilityActualKey, 
	pa.ReferenceCode, 
	0 HasActivityTypeUnknown, 
	0 HasAllocationRegionUnknown, 
	0 HasFunctionalDepartmentUnknown,
	0 HasGlAccountUnknown, 
	0 HasGlAccountCategoryUnknown, 
	0 HasOriginatingRegionUnknown,
	--1 HasOverheadUnknown, 
	0 HasPropertyFundUnknown,
	1 InValidActivityTypeAndEntity

From	ProfitabilityActual pa

			INNER JOIN Calendar ca on ca.CalendarKey = pa.CalendarKey

			INNER JOIN GlAccountCategory gac ON gac.GlAccountCategoryKey = pa.GlobalGlAccountCategoryKey

			INNER JOIN [Source] ss ON ss.SourceKey = pa.SourceKey

			LEFT OUTER JOIN #ValidationSummary existing ON existing.SourceCode = ss.SourceCode AND existing.ReferenceCode = pa.ReferenceCode

			INNER JOIN #InValidActivityTypeAndEntityCombination InValidActivityTypeAndEntityCombination ON
						InValidActivityTypeAndEntityCombination.ReferenceCode = pa.ReferenceCode
					AND	InValidActivityTypeAndEntityCombination.SourceCode = ss.SourceCode
 
Where	ca.CalendarPeriod BETWEEN @StartPeriod AND @EndPeriod		
AND     ca.CalendarPeriod >= 201007
AND		existing.ReferenceCode IS NULL --Not in table yet
AND		gac.MinorCategoryName <> 'Architects & Engineering'

------------------------------------------------------------------------------------------------------------------------------------------
--Now Remove the rows from #ValidationSummary, where the re-class of items cause the to be valid now
Delete From #ValidationSummary
Where	HasActivityTypeUnknown = 0
AND		HasAllocationRegionUnknown = 0
AND		HasFunctionalDepartmentUnknown = 0
AND		HasGlAccountUnknown = 0
AND		HasGlAccountCategoryUnknown = 0
AND		HasOriginatingRegionUnknown = 0
--AND		HasOverheadUnknown = 0
AND		HasPropertyFundUnknown = 0
AND		InValidOriginatingRegionAndFunctionalDepartment = 0
AND		InValidActivityTypeAndEntity = 0

SELECT
		CASE WHEN  
			vs.HasActivityTypeUnknown = 1 OR 
			vs.HasFunctionalDepartmentUnknown = 1 OR
			vs.HasOriginatingRegionUnknown = 1 OR
			vs.InValidOriginatingRegionAndFunctionalDepartment = 1 OR
			vs.InValidActivityTypeAndEntity = 1
		THEN CASE WHEN
				vs.HasPropertyFundUnknown = 1 OR
				vs.HasAllocationRegionUnknown = 1 OR
				vs.HasGlAccountUnknown = 1 OR
				vs.HasGlAccountCategoryUnknown = 1
			THEN 
				'Both Corporate Finance and Accounting'
			ELSE
				'Accounting - Re-class'
			END
		ELSE 
			'Corporate Finance - Mapping'
		END AS ResolvedBy,
		vs.SourceCode,
		--MRI
		gl.Period,
		gl.Ref,
		gl.Item,
		gl.EntityID,
		gl.EntityName,
		gl.GlAccountCode,
		gl.GlAccountName,
		gl.Department,
		gl.DepartmentDescription,
		gl.JobCode,
		gl.JobCodeDescription,
		gl.Amount,
		gl.Description,
		gl.EnterDate,
		gl.Reversal,
		gl.Status,
		gl.Basis,
		gl.UserId,
		gl.CorporateDepartmentCode,
		gl.[Source],
		CASE WHEN vs.HasActivityTypeUnknown = 1 THEN 'YES' ELSE 'NO' END HasActivityTypeUnknown,
		CASE WHEN vs.HasFunctionalDepartmentUnknown = 1 THEN 'YES' ELSE 'NO' END HasFunctionalDepartmentUnknown,
		CASE WHEN vs.HasOriginatingRegionUnknown = 1 THEN 'YES' ELSE 'NO' END HasOriginatingRegionUnknown,
		CASE WHEN vs.HasPropertyFundUnknown = 1 THEN 'YES' ELSE 'NO' END HasPropertyFundUnknown,
		CASE WHEN vs.HasAllocationRegionUnknown = 1 THEN 'YES' ELSE 'NO' END HasAllocationRegionUnknown,
		CASE WHEN vs.HasGlAccountUnknown = 1 THEN 'YES' ELSE 'NO' END HasGlAccountUnknown,
		CASE WHEN vs.HasGlAccountCategoryUnknown = 1 THEN 'YES' ELSE 'NO' END HasGlAccountCategoryUnknown,
		CASE WHEN vs.InValidOriginatingRegionAndFunctionalDepartment = 1 THEN 'YES' ELSE 'NO' END InValidOriginatingRegionAndFunctionalDepartment,
		CASE WHEN vs.InValidActivityTypeAndEntity = 1 THEN 'YES' ELSE 'NO' END InValidActivityTypeAndEntity,
		
		--DW
		ph.Amount [PropertyParentAccountTotal],
		cd.Amount [CorporateTotalByDescription],
		gac.MajorCategoryName [Gr MajorCategoryName],
		gac.MinorCategoryName [Gr MinorCategoryName],
		gac.FeeOrExpense [Gr FeeOrExpense],
		pf.PropertyFundName [Gr ReportingEntityName],
		at.ActivityTypeName [Gr ActivityTypeName],		
		orr.SubRegionName [Gr OriginatingSubRegionName],		
		ar.SubRegionName [Gr AllocationSubRegionName],
		fd.FunctionalDepartmentName [GR FunctionalDepartmentName]
From #ValidationSummary vs
	INNER JOIN ProfitabilityActual pa on pa.ProfitabilityActualKey = vs.ProfitabilityActualKey
	INNER JOIN GlAccountCategory gac on gac.GlAccountCategoryKey = pa.GlobalGlAccountCategoryKey
	INNER JOIN PropertyFund pf on pf.PropertyFundKey = pa.PropertyFundKey
	INNER JOIN ActivityType at ON at.ActivityTypeKey = pa.ActivityTypeKey
	INNER JOIN OriginatingRegion orr ON orr.OriginatingRegionKey = pa.OriginatingRegionKey
	INNER JOIN AllocationRegion ar ON ar.AllocationRegionKey = pa.AllocationRegionKey
	INNER JOIN Overhead oh ON Oh.OverheadKey = pa.OverheadKey
	INNER JOIN GlAccount gla ON gla.GlAccountKey = pa.GlAccountKey
	INNER JOIN FunctionalDepartment fd ON fd.FunctionalDepartmentKey = pa.FunctionalDepartmentKey	
	INNER JOIN #GeneralLedger gl on vs.ReferenceCode = gl.SourcePrimaryKey and vs.SourceCode = gl.SourceCode
	
	LEFT OUTER JOIN #PropertyHeaderSum ph ON 
		gl.SourceCode = ph.SourceCode AND
		gl.EntityID = ph.EntityID AND 
		gl.GlAccountCode = ph.GlAccountCode
		
	LEFT OUTER JOIN #CorporateDescSum cd ON 
		gl.SourceCode = cd.SourceCode AND
		gl.EntityID = cd.EntityID AND
		gl.Source = cd.Source AND
		ISNULL(gl.JobCode,'') = cd.JobCode AND
		ISNULL(gl.Description,'') = cd.Description		
		
Order By vs.SourceCode, vs.ReferenceCode


GO


--------------------------------------------------------------------------------------------------------------------------------

GO

/****** Object:  StoredProcedure [dbo].[stp_S_ValidNonPayrollRegionAndFunctionalDepartment]    Script Date: 12/08/2010 12:01:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[stp_S_ValidNonPayrollRegionAndFunctionalDepartment]
@BudgetYear int,
@BudgetQuater	Varchar(2),
@DataPriorToDate DateTime
AS


	Select * Into #ActivityType From SERVER3.GDM.dbo.ActivityType
	Select * Into #FunctionalDepartment From SERVER3.GDM.dbo.FunctionalDepartment

	----------------------------------------------------------------------------------------
	--New GDM_GR Mappings
	----------------------------------------------------------------------------------------
	Select * Into #GLGlobalAccount From SERVER3.GDM.dbo.GLGlobalAccount
	Select * Into #GLGlobalAccountTranslationType From SERVER3.GDM.dbo.GLGlobalAccountTranslationType 
	Select * Into #GLGlobalAccountTranslationSubType From SERVER3.GDM.dbo.GLGlobalAccountTranslationSubType		
	Select * Into #GLMinorCategory From SERVER3.GDM.dbo.GLMinorCategory 
	Select * Into #GLMajorCategory From SERVER3.GDM.dbo.GLMajorCategory		
	Select * Into #GLTranslationType From SERVER3.GDM.dbo.GLTranslationType 	
	Select * Into #GLTranslationSubType From SERVER3.GDM.dbo.GLTranslationSubType 
	Select * Into #GLAccountType From SERVER3.GDM.dbo.GLAccountType		
	Select * Into #GLAccountSubType From SERVER3.GDM.dbo.GLAccountSubType 
	Select * Into #NewGDM_GRPropertyFundMapping FROM SERVER3.GDM.GR.PropertyFundMapping 
	Select * Into #NewGDM_GRPropertyFund From SERVER3.GDM.dbo.PropertyFund
	Select * Into #NewGDM_GRAllocationSubRegion From SERVER3.GDM.dbo.AllocationSubRegion
	Select * Into #NewGDM_GRAllocationRegion From SERVER3.GDM.dbo.AllocationRegion
	Select * Into #NewGDM_GROriginatingSubRegion From SERVER3.GDM.dbo.OriginatingSubRegion
	Select * Into #NewGDM_GROriginatingRegion From SERVER3.GDM.dbo.OriginatingRegion



DECLARE @NonPayrollCycleUID int

SET @NonPayrollCycleUID = (Select NonPayrollCycleUID From BC_TS_GRINDER_Q2.dbo.NonPayrollCycle Where  BudgetPeriodCode = @BudgetQuater AND BudgetYear = @BudgetYear)



/***************************************************************************
DO THE OVERHEAD PORTION FIRST
***************************************************************************/

SELECT
	DISTINCT
	--GrinderFunctionalDepartment,
	GdmFunctionalDepartmentName FunctionalDepartmentName,
	NewGDM_GRGROriginatingSubRegion OriginatingSubRegionName
	--SUM(t1.AnnualAllocatedDollarAmount) AnnualAllocatedDollarAmount
From 
	(
		--Sort our single project first
		SELECT
			'Single' AS ProjectType,
			FunctionalDepartment.Name AS GrinderFunctionalDepartment,
			FdGdm.Name GdmFunctionalDepartmentName,
			
			--------------------------------------------------------------------------
			--New GDM_GR Mappings
			--------------------------------------------------------------------------
			NewGDM_GROriginatingSubRegion.Name AS NewGDM_GRGROriginatingSubRegion,

			--------------------------------------------------------------------------
			--Amounts
			--------------------------------------------------------------------------
			(
				ISNULL(NonPayrollExpenseDetail.JanuaryDollar,0)
				+ ISNULL(NonPayrollExpenseDetail.FebruaryDollar,0) 
				+ ISNULL(NonPayrollExpenseDetail.MarchDollar,0)
				+ ISNULL(NonPayrollExpenseDetail.AprilDollar,0) 
				+ ISNULL(NonPayrollExpenseDetail.MayDollar,0)
				+ ISNULL(NonPayrollExpenseDetail.JuneDollar,0)
				+ ISNULL(NonPayrollExpenseDetail.JulyDollar,0)
				+ ISNULL(NonPayrollExpenseDetail.AugustDollar,0)
				+ ISNULL(NonPayrollExpenseDetail.SeptemberDollar,0)
				+ ISNULL(NonPayrollExpenseDetail.OctoberDollar,0) 
				+ ISNULL(NonPayrollExpenseDetail.NovemberDollar,0) 
				+ ISNULL(NonPayrollExpenseDetail.DecemberDollar,0)
			) AS AnnualAllocatedDollarAmount
			
		FROM 
			BC_TS_GRINDER_Q2.dbo.NonPayrollExpenseDetail
			
			----------------------------------------------------------------------------------------------
			--GRINDER MAPPINS
			----------------------------------------------------------------------------------------------
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.NonPayrollExpense ON
				NonPayrollExpense.NonPayrollExpenseId = NonPayrollExpenseDetail.NonPayrollExpenseId --AND
							
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.Project ON
				Project.ProjectId = NonPayrollExpense.ProjectId
				
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.ActivityType ON
				ActivityType.ActivityTypeId = Project.ActivityTypeId
			
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.GLType ON
				GLType.GLTypeId = NonPayrollExpense.GLTypeId
				
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.FunctionalDepartment ON
				FunctionalDepartment.FunctionalDepartmentId = NonPayrollExpense.OriginatingFunctionalDepartmentId
				
			LEFT OUTER JOIN #FunctionalDepartment FdGdm ON FdGdm.GlobalCode = FunctionalDepartment.GlobalCode
				
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.EmployeeSubregion ON
				NonPayrollExpense.OriginatingEmployeeSubregionId = EmployeeSubregion.EmployeeSubregionId	
					
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.GlobalAccountMappingLookup ON
				GlobalAccountMappingLookup.GLTypeId = GLType.GLTypeId AND
				GlobalAccountMappingLookup.ActivityTypeId = ActivityType.ActivityTypeId
				
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.GlobalAccountMapping ON
				GlobalAccountMappingLookup.GlobalAccountMappingId = GlobalAccountMapping.GlobalAccountMappingId

			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.BudgetOwnerReportMapping BORM 
				ON Project.CorporateMRISource = BORM.CorpMRISource 
				AND CASE WHEN Project.NonPayrollCorporateMRIDepartmentCode = '' THEN '@' ELSE Project.NonPayrollCorporateMRIDepartmentCode END = BORM.MRIDeptCode
				AND Project.ActivityTypeID = BORM.ActivityTypeID
				
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.JobCode ON
				NonPayrollExpense.JobCodeId = JobCode.JobCodeId
				
			LEFT OUTER JOIN #ActivityType GRAT ON
				GRAT.ActivityTypeCode = ActivityType.Acronym
				
			

			----------------------------------------------------------------------------------------------
			--NEW GDM_GR MAPPINGS
			----------------------------------------------------------------------------------------------
			LEFT OUTER JOIN #GLGlobalAccount NewGDM_GRGLAccount ON
				--NewGDM_GRGLAccount.Code = GlobalAccountMapping.GlobalAccountCode
				LEFT(NewGDM_GRGLAccount.Code, 10) = LEFT(GlobalAccountMapping.GlobalAccountCode, 8) + '99'
			
			
			LEFT OUTER JOIN #GLGlobalAccountTranslationType GLGlobalAccountTranslationType ON
				NewGDM_GRGLAccount.GLGlobalAccountId = GLGlobalAccountTranslationType.GLGlobalAccountId 
			  
			LEFT OUTER JOIN #GLGlobalAccountTranslationSubType GLGlobalAccountTranslationSubType ON
				NewGDM_GRGLAccount.GLGlobalAccountId = GLGlobalAccountTranslationSubType.GLGlobalAccountId 
			          
			LEFT OUTER JOIN #GLTranslationSubType GLTranslationSubType ON
				GLGlobalAccountTranslationType.GLTranslationTypeId = GLTranslationSubType.GLTranslationTypeId AND
				GLGlobalAccountTranslationSubType.GLTranslationSubTypeId = GLTranslationSubType.GLTranslationSubTypeId 
			    
			LEFT OUTER JOIN #GLAccountSubType GLAccountSubType ON
				GLGlobalAccountTranslationType.GLAccountSubTypeId = GLAccountSubType.GLAccountSubTypeId

			LEFT OUTER JOIN #GLMinorCategory GLMinorCategory ON
				GLGlobalAccountTranslationSubType.GLMinorCategoryId = GLMinorCategory.GLMinorCategoryId 
			    
			LEFT OUTER JOIN #GLMajorCategory GLMajorCategory ON
				GLMajorCategory.GLMajorCategoryId = GLMinorCategory.GLMajorCategoryId AND
				GLMajorCategory.GLTranslationSubTypeId = GLTranslationSubType.GLTranslationSubTypeId 
			
			LEFT OUTER JOIN	#NewGDM_GRPropertyFundMapping NewGDM_GRPropFundMap ON
				Project.NonPayrollCorporateMRIDepartmentCode = NewGDM_GRPropFundMap.PropertyFundCode AND 
				Project.CorporateMRISource = NewGDM_GRPropFundMap.SourceCode AND
				GRAT.ActivityTypeId = NewGDM_GRPropFundMap.ActivityTypeId	
					
			LEFT OUTER JOIN #NewGDM_GRPropertyFund NewGDM_GRPropertyFund ON 
				NewGDM_GRPropertyFund.PropertyFundId = NewGDM_GRPropFundMap.PropertyFundId
				
			LEFT OUTER JOIN #NewGDM_GRAllocationSubRegion NewGDM_GRAllocationSubRegion ON
				NewGDM_GRAllocationSubRegion.AllocationSubRegionGlobalRegionId = NewGDM_GRPropertyFund.AllocationSubRegionGlobalRegionId
			
			LEFT OUTER JOIN #NewGDM_GRAllocationRegion NewGDM_GRAllocationRegion ON
				NewGDM_GRAllocationRegion.AllocationRegionGlobalRegionId = NewGDM_GRAllocationSubRegion.AllocationRegionGlobalRegionId
				
			LEFT OUTER JOIN #NewGDM_GROriginatingSubRegion NewGDM_GROriginatingSubRegion ON
				NewGDM_GROriginatingSubRegion.Code = EmployeeSubregion.Code
				
			LEFT OUTER JOIN #NewGDM_GROriginatingRegion NewGDM_GROriginatingRegion ON
				NewGDM_GROriginatingRegion.OriginatingRegionGlobalRegionId = NewGDM_GROriginatingSubRegion.OriginatingRegionGlobalRegionId		
							
		WHERE 

			------------------------------------------------------------------------
			--Grinder Mappings
			------------------------------------------------------------------------
			Overhead = 1
			AND NonPayrollExpenseDetail.NonPayrollCycleUID = @NonPayrollCycleUID
			AND NonPayrollExpenseDetail.ProjectId IS NOT NULL			--AP: Now rather say project Id not NULL in the where clause
			
			
			------------------------------------------------------------------------
			--New GDM_GR Mappings
			------------------------------------------------------------------------
			AND (GLTranslationSubType.Name = 'Global' OR GLGlobalAccountTranslationType.GLGlobalAccountId IS NULL)

			
		UNION ALL

		--Then look at project group	
		SELECT
			--REPLACE(NewGDM_GRGLAccount.Code, 2, '99') NewGLCode,
			--NewGDM_GRGLAccount.Code OldGLCode,
			
			--------------------------------------------------------------------------
			--Grinder Mappings
			--------------------------------------------------------------------------
			'Group' AS ProjectType,
			FunctionalDepartment.Name AS GrinderFunctionalDepartment,
			FdGdm.Name GdmFunctionalDepartmentName,

			--------------------------------------------------------------------------
			--New GDM_GR Mappings
			--------------------------------------------------------------------------
			NewGDM_GROriginatingSubRegion.Name AS NewGDM_GRGROriginatingSubRegion,
				
			--------------------------------------------------------------------------
			--Amounts
			--------------------------------------------------------------------------
			(
				ISNULL(NonPayrollExpenseDetail.JanuaryDollar * ProjectGroupAllocation.Percentage,0) 
				+ ISNULL(NonPayrollExpenseDetail.FebruaryDollar * ProjectGroupAllocation.Percentage,0)
				+ ISNULL(NonPayrollExpenseDetail.MarchDollar * ProjectGroupAllocation.Percentage,0)
				+ ISNULL(NonPayrollExpenseDetail.AprilDollar * ProjectGroupAllocation.Percentage,0) 
				+ ISNULL(NonPayrollExpenseDetail.MayDollar * ProjectGroupAllocation.Percentage,0)
				+ ISNULL(NonPayrollExpenseDetail.JuneDollar * ProjectGroupAllocation.Percentage,0) 
				+ ISNULL(NonPayrollExpenseDetail.JulyDollar * ProjectGroupAllocation.Percentage,0) 
				+ ISNULL(NonPayrollExpenseDetail.AugustDollar * ProjectGroupAllocation.Percentage,0) 
				+ ISNULL(NonPayrollExpenseDetail.SeptemberDollar * ProjectGroupAllocation.Percentage,0)
				+ ISNULL(NonPayrollExpenseDetail.OctoberDollar * ProjectGroupAllocation.Percentage,0) 
				+ ISNULL(NonPayrollExpenseDetail.NovemberDollar * ProjectGroupAllocation.Percentage,0)
				+ ISNULL(NonPayrollExpenseDetail.DecemberDollar * ProjectGroupAllocation.Percentage,0)
			) AS AnnualAllocatedDollarAmount
		FROM 
			BC_TS_GRINDER_Q2.dbo.NonPayrollExpenseDetail
			
			----------------------------------------------------------------------------------------------
			--GRINDER MAPPINS
			----------------------------------------------------------------------------------------------	
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.NonPayrollExpense ON
				NonPayrollExpense.NonPayrollExpenseId = NonPayrollExpenseDetail.NonPayrollExpenseId --AND
				--NonPayrollExpense.ProjectGroupId = NonPayrollExpenseDetail.ProjectGroupId   --AP: Now rather say project Id not NULL in the where clause
				
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.ProjectGroupAllocation ON
				ProjectGroupAllocation.ProjectGroupId = NonPayrollExpense.ProjectGroupId
			
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.ProjectGroup ON
				ProjectGroup.ProjectGroupId = ProjectGroupAllocation.ProjectGroupId
				
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.Project ON
				Project.ProjectId = ProjectGroupAllocation.ProjectId
				
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.ActivityType ON
				ActivityType.ActivityTypeId = Project.ActivityTypeId
			
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.GLType ON
				GLType.GLTypeId = NonPayrollExpense.GLTypeId
					
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.FunctionalDepartment ON
				FunctionalDepartment.FunctionalDepartmentId = NonPayrollExpense.OriginatingFunctionalDepartmentId

			LEFT OUTER JOIN #FunctionalDepartment FdGdm ON FdGdm.GlobalCode = FunctionalDepartment.GlobalCode
					
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.EmployeeSubregion ON
				NonPayrollExpense.OriginatingEmployeeSubregionId = EmployeeSubregion.EmployeeSubregionId	
					
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.GlobalAccountMappingLookup ON
				GlobalAccountMappingLookup.GLTypeId = GLType.GLTypeId AND
				GlobalAccountMappingLookup.ActivityTypeId = ActivityType.ActivityTypeId
				
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.GlobalAccountMapping ON
				GlobalAccountMappingLookup.GlobalAccountMappingId = GlobalAccountMapping.GlobalAccountMappingId

			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.BudgetOwnerReportMapping BORM 
				ON Project.CorporateMRISource = BORM.CorpMRISource 
				AND CASE WHEN Project.NonPayrollCorporateMRIDepartmentCode = '' THEN '@' ELSE Project.NonPayrollCorporateMRIDepartmentCode END = BORM.MRIDeptCode
				AND Project.ActivityTypeID = BORM.ActivityTypeID

			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.JobCode ON
				NonPayrollExpense.JobCodeId = JobCode.JobCodeId
			
			LEFT OUTER JOIN #ActivityType GRAT ON
				GRAT.ActivityTypeCode = ActivityType.Acronym

			
			
			----------------------------------------------------------------------------------------------
			--NEW GDM_GR MAPPINGS
			----------------------------------------------------------------------------------------------
			LEFT OUTER JOIN #GLGlobalAccount NewGDM_GRGLAccount ON
				--NewGDM_GRGLAccount.Code = GlobalAccountMapping.GlobalAccountCode
				LEFT(NewGDM_GRGLAccount.Code, 10) = LEFT(GlobalAccountMapping.GlobalAccountCode, 8) + '99'   --AP: Get the -99 for overhead
			
			LEFT OUTER JOIN #GLGlobalAccountTranslationType GLGlobalAccountTranslationType ON
				NewGDM_GRGLAccount.GLGlobalAccountId = GLGlobalAccountTranslationType.GLGlobalAccountId 
			  
			LEFT OUTER JOIN #GLGlobalAccountTranslationSubType GLGlobalAccountTranslationSubType ON
				NewGDM_GRGLAccount.GLGlobalAccountId = GLGlobalAccountTranslationSubType.GLGlobalAccountId 
			          
			LEFT OUTER JOIN #GLTranslationSubType GLTranslationSubType ON
				GLGlobalAccountTranslationType.GLTranslationTypeId = GLTranslationSubType.GLTranslationTypeId AND
				GLGlobalAccountTranslationSubType.GLTranslationSubTypeId = GLTranslationSubType.GLTranslationSubTypeId 
			    
			LEFT OUTER JOIN #GLAccountSubType GLAccountSubType ON
				GLGlobalAccountTranslationType.GLAccountSubTypeId = GLAccountSubType.GLAccountSubTypeId

			LEFT OUTER JOIN #GLMinorCategory GLMinorCategory ON
				GLGlobalAccountTranslationSubType.GLMinorCategoryId = GLMinorCategory.GLMinorCategoryId 
			    
			LEFT OUTER JOIN #GLMajorCategory GLMajorCategory ON
				GLMajorCategory.GLMajorCategoryId = GLMinorCategory.GLMajorCategoryId AND
				GLMajorCategory.GLTranslationSubTypeId = GLTranslationSubType.GLTranslationSubTypeId 	
			
			LEFT OUTER JOIN	#NewGDM_GRPropertyFundMapping NewGDM_GRPropFundMap ON
				Project.NonPayrollCorporateMRIDepartmentCode = NewGDM_GRPropFundMap.PropertyFundCode AND 
				Project.CorporateMRISource = NewGDM_GRPropFundMap.SourceCode AND
				GRAT.ActivityTypeId = NewGDM_GRPropFundMap.ActivityTypeId	
					
			LEFT OUTER JOIN #NewGDM_GRPropertyFund NewGDM_GRPropertyFund ON 
				NewGDM_GRPropertyFund.PropertyFundId = NewGDM_GRPropFundMap.PropertyFundId
				
			LEFT OUTER JOIN #NewGDM_GRAllocationSubRegion NewGDM_GRAllocationSubRegion ON
				NewGDM_GRAllocationSubRegion.AllocationSubRegionGlobalRegionId = NewGDM_GRPropertyFund.AllocationSubRegionGlobalRegionId
			
			LEFT OUTER JOIN #NewGDM_GRAllocationRegion NewGDM_GRAllocationRegion ON
				NewGDM_GRAllocationRegion.AllocationRegionGlobalRegionId = NewGDM_GRAllocationSubRegion.AllocationRegionGlobalRegionId
				
			LEFT OUTER JOIN #NewGDM_GROriginatingSubRegion NewGDM_GROriginatingSubRegion ON
				NewGDM_GROriginatingSubRegion.Code = EmployeeSubregion.Code
				
			LEFT OUTER JOIN #NewGDM_GROriginatingRegion NewGDM_GROriginatingRegion ON
				NewGDM_GROriginatingRegion.OriginatingRegionGlobalRegionId = NewGDM_GROriginatingSubRegion.OriginatingRegionGlobalRegionId		
							
		WHERE 
			------------------------------------------------------------------------
			--Grinder Mappings
			------------------------------------------------------------------------
			Overhead = 1
			AND NonPayrollExpenseDetail.NonPayrollCycleUID = @NonPayrollCycleUID
			AND NonPayrollExpenseDetail.ProjectGroupId IS NOT NULL  --AP: Now rather say project Id not NULL in the where clause
			
			------------------------------------------------------------------------
			--New GDM_GR Mappings
			----------------------------------------------------------------------
			AND (GLTranslationSubType.Name = 'Global' OR GLGlobalAccountTranslationType.GLGlobalAccountId IS NULL)

			

		UNION ALL


		/*******************************************************************
		NOW FOR THE NON-OVERHEAD PORTION
		*******************************************************************/


		--Sort our single project first
		SELECT
			--NewGDM_GRGLAccount.GLGlobalAccountId,
			--LEFT(NewGDM_GRGLAccount.Code, 8) + '99' NewGLCode,
			--NewGDM_GRGLAccount.Code,
			--LEFT(GlobalAccountMapping.GlobalAccountCode, 8) + '99' NewGrinderCode,
			--GlobalAccountMapping.GlobalAccountCode,
				
			--------------------------------------------------------------------------
			--Grinder Mappings
			--------------------------------------------------------------------------
			'Single' AS ProjectType,
			FunctionalDepartment.Name AS GrinderFunctionalDepartment,
			FdGdm.Name GdmFunctionalDepartmentName,
			
			
			--------------------------------------------------------------------------
			--New GDM_GR Mappings
			--------------------------------------------------------------------------
			NewGDM_GROriginatingSubRegion.Name AS NewGDM_GRGROriginatingSubRegion,
			
			--------------------------------------------------------------------------
			--Amounts
			--------------------------------------------------------------------------
			(
				ISNULL(NonPayrollExpenseDetail.JanuaryDollar,0)
				+ ISNULL(NonPayrollExpenseDetail.FebruaryDollar,0) 
				+ ISNULL(NonPayrollExpenseDetail.MarchDollar,0)
				+ ISNULL(NonPayrollExpenseDetail.AprilDollar,0) 
				+ ISNULL(NonPayrollExpenseDetail.MayDollar,0)
				+ ISNULL(NonPayrollExpenseDetail.JuneDollar,0)
				+ ISNULL(NonPayrollExpenseDetail.JulyDollar,0)
				+ ISNULL(NonPayrollExpenseDetail.AugustDollar,0)
				+ ISNULL(NonPayrollExpenseDetail.SeptemberDollar,0)
				+ ISNULL(NonPayrollExpenseDetail.OctoberDollar,0) 
				+ ISNULL(NonPayrollExpenseDetail.NovemberDollar,0) 
				+ ISNULL(NonPayrollExpenseDetail.DecemberDollar,0)
			) AS CorrectAnnualAllocatedDollarAmount
		FROM 
			BC_TS_GRINDER_Q2.dbo.NonPayrollExpenseDetail
			
			----------------------------------------------------------------------------------------------
			--GRINDER MAPPINS
			----------------------------------------------------------------------------------------------
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.NonPayrollExpense ON
				NonPayrollExpense.NonPayrollExpenseId = NonPayrollExpenseDetail.NonPayrollExpenseId --AND
				--NonPayrollExpense.ProjectId = NonPayrollExpenseDetail.ProjectId  AP: Now rather say project Id not NULL in the where clause
							
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.Project ON
				Project.ProjectId = NonPayrollExpense.ProjectId
				
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.ActivityType ON
				ActivityType.ActivityTypeId = Project.ActivityTypeId
			
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.GLType ON
				GLType.GLTypeId = NonPayrollExpense.GLTypeId
				
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.FunctionalDepartment ON
				FunctionalDepartment.FunctionalDepartmentId = NonPayrollExpense.OriginatingFunctionalDepartmentId

			LEFT OUTER JOIN #FunctionalDepartment FdGdm ON FdGdm.GlobalCode = FunctionalDepartment.GlobalCode
				
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.EmployeeSubregion ON
				NonPayrollExpense.OriginatingEmployeeSubregionId = EmployeeSubregion.EmployeeSubregionId	
					
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.GlobalAccountMappingLookup ON
				GlobalAccountMappingLookup.GLTypeId = GLType.GLTypeId AND
				GlobalAccountMappingLookup.ActivityTypeId = ActivityType.ActivityTypeId
				
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.GlobalAccountMapping ON
				GlobalAccountMappingLookup.GlobalAccountMappingId = GlobalAccountMapping.GlobalAccountMappingId

			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.BudgetOwnerReportMapping BORM 
				ON Project.CorporateMRISource = BORM.CorpMRISource 
				AND CASE WHEN Project.NonPayrollCorporateMRIDepartmentCode = '' THEN '@' ELSE Project.NonPayrollCorporateMRIDepartmentCode END = BORM.MRIDeptCode
				AND Project.ActivityTypeID = BORM.ActivityTypeID
				
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.JobCode ON
				NonPayrollExpense.JobCodeId = JobCode.JobCodeId
				
			LEFT OUTER JOIN #ActivityType GRAT ON
				GRAT.ActivityTypeCode = ActivityType.Acronym
				
			

			----------------------------------------------------------------------------------------------
			--NEW GDM_GR MAPPINGS
			----------------------------------------------------------------------------------------------
			LEFT OUTER JOIN #GLGlobalAccount NewGDM_GRGLAccount ON
				NewGDM_GRGLAccount.Code = GlobalAccountMapping.GlobalAccountCode
					
			LEFT OUTER JOIN #GLGlobalAccountTranslationType GLGlobalAccountTranslationType ON
				NewGDM_GRGLAccount.GLGlobalAccountId = GLGlobalAccountTranslationType.GLGlobalAccountId 
			  
			LEFT OUTER JOIN #GLGlobalAccountTranslationSubType GLGlobalAccountTranslationSubType ON
				NewGDM_GRGLAccount.GLGlobalAccountId = GLGlobalAccountTranslationSubType.GLGlobalAccountId 
			          
			LEFT OUTER JOIN #GLTranslationSubType GLTranslationSubType ON
				GLGlobalAccountTranslationType.GLTranslationTypeId = GLTranslationSubType.GLTranslationTypeId AND
				GLGlobalAccountTranslationSubType.GLTranslationSubTypeId = GLTranslationSubType.GLTranslationSubTypeId 
			    
			LEFT OUTER JOIN #GLAccountSubType GLAccountSubType ON
				GLGlobalAccountTranslationType.GLAccountSubTypeId = GLAccountSubType.GLAccountSubTypeId

			LEFT OUTER JOIN #GLMinorCategory GLMinorCategory ON
				GLGlobalAccountTranslationSubType.GLMinorCategoryId = GLMinorCategory.GLMinorCategoryId 
			    
			LEFT OUTER JOIN #GLMajorCategory GLMajorCategory ON
				GLMajorCategory.GLMajorCategoryId = GLMinorCategory.GLMajorCategoryId AND
				GLMajorCategory.GLTranslationSubTypeId = GLTranslationSubType.GLTranslationSubTypeId 
			
			LEFT OUTER JOIN	#NewGDM_GRPropertyFundMapping NewGDM_GRPropFundMap ON
				Project.NonPayrollCorporateMRIDepartmentCode = NewGDM_GRPropFundMap.PropertyFundCode AND 
				Project.CorporateMRISource = NewGDM_GRPropFundMap.SourceCode AND
				GRAT.ActivityTypeId = NewGDM_GRPropFundMap.ActivityTypeId	
					
			LEFT OUTER JOIN #NewGDM_GRPropertyFund NewGDM_GRPropertyFund ON 
				NewGDM_GRPropertyFund.PropertyFundId = NewGDM_GRPropFundMap.PropertyFundId
				
			LEFT OUTER JOIN #NewGDM_GRAllocationSubRegion NewGDM_GRAllocationSubRegion ON
				NewGDM_GRAllocationSubRegion.AllocationSubRegionGlobalRegionId = NewGDM_GRPropertyFund.AllocationSubRegionGlobalRegionId
			
			LEFT OUTER JOIN #NewGDM_GRAllocationRegion NewGDM_GRAllocationRegion ON
				NewGDM_GRAllocationRegion.AllocationRegionGlobalRegionId = NewGDM_GRAllocationSubRegion.AllocationRegionGlobalRegionId
				
			LEFT OUTER JOIN #NewGDM_GROriginatingSubRegion NewGDM_GROriginatingSubRegion ON
				NewGDM_GROriginatingSubRegion.Code = EmployeeSubregion.Code
				
			LEFT OUTER JOIN #NewGDM_GROriginatingRegion NewGDM_GROriginatingRegion ON
				NewGDM_GROriginatingRegion.OriginatingRegionGlobalRegionId = NewGDM_GROriginatingSubRegion.OriginatingRegionGlobalRegionId		
							
		WHERE 

			------------------------------------------------------------------------
			--Grinder Mappings
			------------------------------------------------------------------------
			Overhead = 0
			AND NonPayrollExpenseDetail.NonPayrollCycleUID = @NonPayrollCycleUID
			AND NonPayrollExpenseDetail.ProjectId IS NOT NULL			--AP: Now rather say project Id not NULL in the where clause
			
			------------------------------------------------------------------------
			--New GDM_GR Mappings
			------------------------------------------------------------------------
			AND (GLTranslationSubType.Name = 'Global' OR GLGlobalAccountTranslationType.GLGlobalAccountId IS NULL)

			
		UNION ALL

		--Then look at project group	
		SELECT
			--REPLACE(NewGDM_GRGLAccount.Code, 2, '99') NewGLCode,
			--NewGDM_GRGLAccount.Code OldGLCode,
			
			--------------------------------------------------------------------------
			--Grinder Mappings
			--------------------------------------------------------------------------
			'Group' AS ProjectType,
			FunctionalDepartment.Name AS GrinderFunctionalDepartment,
			FdGdm.Name GdmFunctionalDepartmentName,
			
			
			--------------------------------------------------------------------------
			--New GDM_GR Mappings
			--------------------------------------------------------------------------
			NewGDM_GROriginatingSubRegion.Name AS NewGDM_GRGROriginatingSubRegion,
				
			--------------------------------------------------------------------------
			--Amounts
			--------------------------------------------------------------------------
			(
				ISNULL(NonPayrollExpenseDetail.JanuaryDollar * ProjectGroupAllocation.Percentage,0) 
				+ ISNULL(NonPayrollExpenseDetail.FebruaryDollar * ProjectGroupAllocation.Percentage,0)
				+ ISNULL(NonPayrollExpenseDetail.MarchDollar * ProjectGroupAllocation.Percentage,0)
				+ ISNULL(NonPayrollExpenseDetail.AprilDollar * ProjectGroupAllocation.Percentage,0) 
				+ ISNULL(NonPayrollExpenseDetail.MayDollar * ProjectGroupAllocation.Percentage,0)
				+ ISNULL(NonPayrollExpenseDetail.JuneDollar * ProjectGroupAllocation.Percentage,0) 
				+ ISNULL(NonPayrollExpenseDetail.JulyDollar * ProjectGroupAllocation.Percentage,0) 
				+ ISNULL(NonPayrollExpenseDetail.AugustDollar * ProjectGroupAllocation.Percentage,0) 
				+ ISNULL(NonPayrollExpenseDetail.SeptemberDollar * ProjectGroupAllocation.Percentage,0)
				+ ISNULL(NonPayrollExpenseDetail.OctoberDollar * ProjectGroupAllocation.Percentage,0) 
				+ ISNULL(NonPayrollExpenseDetail.NovemberDollar * ProjectGroupAllocation.Percentage,0)
				+ ISNULL(NonPayrollExpenseDetail.DecemberDollar * ProjectGroupAllocation.Percentage,0)
			) AS CorrectAnnualAllocatedDollarAmount

		FROM 
			BC_TS_GRINDER_Q2.dbo.NonPayrollExpenseDetail
			
			----------------------------------------------------------------------------------------------
			--GRINDER MAPPINS
			----------------------------------------------------------------------------------------------	
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.NonPayrollExpense ON
				NonPayrollExpense.NonPayrollExpenseId = NonPayrollExpenseDetail.NonPayrollExpenseId --AND
				--NonPayrollExpense.ProjectGroupId = NonPayrollExpenseDetail.ProjectGroupId   --AP: Now rather say project Id not NULL in the where clause
				
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.ProjectGroupAllocation ON
				ProjectGroupAllocation.ProjectGroupId = NonPayrollExpense.ProjectGroupId
			
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.ProjectGroup ON
				ProjectGroup.ProjectGroupId = ProjectGroupAllocation.ProjectGroupId
				
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.Project ON
				Project.ProjectId = ProjectGroupAllocation.ProjectId
				
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.ActivityType ON
				ActivityType.ActivityTypeId = Project.ActivityTypeId
			
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.GLType ON
				GLType.GLTypeId = NonPayrollExpense.GLTypeId
					
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.FunctionalDepartment ON
				FunctionalDepartment.FunctionalDepartmentId = NonPayrollExpense.OriginatingFunctionalDepartmentId

			LEFT OUTER JOIN #FunctionalDepartment FdGdm ON FdGdm.GlobalCode = FunctionalDepartment.GlobalCode
					
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.EmployeeSubregion ON
				NonPayrollExpense.OriginatingEmployeeSubregionId = EmployeeSubregion.EmployeeSubregionId	
					
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.GlobalAccountMappingLookup ON
				GlobalAccountMappingLookup.GLTypeId = GLType.GLTypeId AND
				GlobalAccountMappingLookup.ActivityTypeId = ActivityType.ActivityTypeId
				
			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.GlobalAccountMapping ON
				GlobalAccountMappingLookup.GlobalAccountMappingId = GlobalAccountMapping.GlobalAccountMappingId

			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.BudgetOwnerReportMapping BORM 
				ON Project.CorporateMRISource = BORM.CorpMRISource 
				AND CASE WHEN Project.NonPayrollCorporateMRIDepartmentCode = '' THEN '@' ELSE Project.NonPayrollCorporateMRIDepartmentCode END = BORM.MRIDeptCode
				AND Project.ActivityTypeID = BORM.ActivityTypeID

			LEFT OUTER JOIN BC_TS_GRINDER_Q2.dbo.JobCode ON
				NonPayrollExpense.JobCodeId = JobCode.JobCodeId
			
			LEFT OUTER JOIN #ActivityType GRAT ON
				GRAT.ActivityTypeCode = ActivityType.Acronym

			
			
			----------------------------------------------------------------------------------------------
			--NEW GDM_GR MAPPINGS
			----------------------------------------------------------------------------------------------
			LEFT OUTER JOIN #GLGlobalAccount NewGDM_GRGLAccount ON
				NewGDM_GRGLAccount.Code = GlobalAccountMapping.GlobalAccountCode
				
			LEFT OUTER JOIN #GLGlobalAccountTranslationType GLGlobalAccountTranslationType ON
				NewGDM_GRGLAccount.GLGlobalAccountId = GLGlobalAccountTranslationType.GLGlobalAccountId 
			  
			LEFT OUTER JOIN #GLGlobalAccountTranslationSubType GLGlobalAccountTranslationSubType ON
				NewGDM_GRGLAccount.GLGlobalAccountId = GLGlobalAccountTranslationSubType.GLGlobalAccountId 
			          
			LEFT OUTER JOIN #GLTranslationSubType GLTranslationSubType ON
				GLGlobalAccountTranslationType.GLTranslationTypeId = GLTranslationSubType.GLTranslationTypeId AND
				GLGlobalAccountTranslationSubType.GLTranslationSubTypeId = GLTranslationSubType.GLTranslationSubTypeId 
			    
			LEFT OUTER JOIN #GLAccountSubType GLAccountSubType ON
				GLGlobalAccountTranslationType.GLAccountSubTypeId = GLAccountSubType.GLAccountSubTypeId

			LEFT OUTER JOIN #GLMinorCategory GLMinorCategory ON
				GLGlobalAccountTranslationSubType.GLMinorCategoryId = GLMinorCategory.GLMinorCategoryId 
			    
			LEFT OUTER JOIN #GLMajorCategory GLMajorCategory ON
				GLMajorCategory.GLMajorCategoryId = GLMinorCategory.GLMajorCategoryId AND
				GLMajorCategory.GLTranslationSubTypeId = GLTranslationSubType.GLTranslationSubTypeId 	
			
			LEFT OUTER JOIN	#NewGDM_GRPropertyFundMapping NewGDM_GRPropFundMap ON
				Project.NonPayrollCorporateMRIDepartmentCode = NewGDM_GRPropFundMap.PropertyFundCode AND 
				Project.CorporateMRISource = NewGDM_GRPropFundMap.SourceCode AND
				GRAT.ActivityTypeId = NewGDM_GRPropFundMap.ActivityTypeId	
					
			LEFT OUTER JOIN #NewGDM_GRPropertyFund NewGDM_GRPropertyFund ON 
				NewGDM_GRPropertyFund.PropertyFundId = NewGDM_GRPropFundMap.PropertyFundId
				
			LEFT OUTER JOIN #NewGDM_GRAllocationSubRegion NewGDM_GRAllocationSubRegion ON
				NewGDM_GRAllocationSubRegion.AllocationSubRegionGlobalRegionId = NewGDM_GRPropertyFund.AllocationSubRegionGlobalRegionId
			
			LEFT OUTER JOIN #NewGDM_GRAllocationRegion NewGDM_GRAllocationRegion ON
				NewGDM_GRAllocationRegion.AllocationRegionGlobalRegionId = NewGDM_GRAllocationSubRegion.AllocationRegionGlobalRegionId
				
			LEFT OUTER JOIN #NewGDM_GROriginatingSubRegion NewGDM_GROriginatingSubRegion ON
				NewGDM_GROriginatingSubRegion.Code = EmployeeSubregion.Code
				
			LEFT OUTER JOIN #NewGDM_GROriginatingRegion NewGDM_GROriginatingRegion ON
				NewGDM_GROriginatingRegion.OriginatingRegionGlobalRegionId = NewGDM_GROriginatingSubRegion.OriginatingRegionGlobalRegionId		
							
		WHERE 
			------------------------------------------------------------------------
			--Grinder Mappings
			------------------------------------------------------------------------
			Overhead = 0
			AND NonPayrollExpenseDetail.NonPayrollCycleUID = @NonPayrollCycleUID
			AND NonPayrollExpenseDetail.ProjectGroupId IS NOT NULL  --AP: Now rather say project Id not NULL in the where clause
				
			
			------------------------------------------------------------------------
			--New GDM_GR Mappings
			----------------------------------------------------------------------
			AND (GLTranslationSubType.Name = 'Global' OR GLGlobalAccountTranslationType.GLGlobalAccountId IS NULL)

	) t1
Where GdmFunctionalDepartmentName IS NOT NULL
Group By 			
	GdmFunctionalDepartmentName,
	NewGDM_GRGROriginatingSubRegion
	
--Having SUM(t1.AnnualAllocatedDollarAmount) <> 0
GO

/****** Object:  StoredProcedure [dbo].[stp_S_ValidPayrollRegionAndFunctionalDepartment]    Script Date: 12/08/2010 12:01:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [dbo].[stp_S_ValidPayrollRegionAndFunctionalDepartment]
@BudgetYear int,
@BudgetQuater	Varchar(2),
@DataPriorToDate DateTime
AS

--SET @BudgetYear = 2010
--SET @BudgetQuater = 'Q2'
--SET @DataPriorToDate = '2010-12-31'

/*
Setup Temp tables
*/



CREATE TABLE #BudgetReportGroup(
	ImportKey INT NOT NULL,
	ImportBatchId INT NOT NULL,
	ImportDate DATETIME NOT NULL,
	BudgetReportGroupId INT NOT NULL,
	Name VARCHAR(100) NOT NULL,
	BudgetExchangeRateId INT NOT NULL,
	IsReforecast BIT NOT NULL,
	StartPeriod INT NOT NULL,
	EndPeriod INT NOT NULL,
	FirstProjectedPeriod INT NULL,
	IsDeleted BIT NOT NULL,
	GRChangedDate DATETIME NOT NULL,
	InsertedDate DATETIME NOT NULL,
	UpdatedDate DATETIME NOT NULL,
	UpdatedByStaffId INT NOT NULL,
	BudgetReportGroupPeriodId INT NULL
)

INSERT INTO #BudgetReportGroup(
	ImportKey,
	ImportBatchId,
	ImportDate,
	BudgetReportGroupId,
	Name,
	BudgetExchangeRateId,
	IsReforecast,
	StartPeriod,
	EndPeriod,
	FirstProjectedPeriod,
	IsDeleted,
	GRChangedDate,
	InsertedDate,
	UpdatedDate,
	UpdatedByStaffId,
	BudgetReportGroupPeriodId
)
SELECT 
	brg.* 
FROM 
	GrReportingStaging.TapasGlobalBudgeting.BudgetReportGroup brg
	INNER JOIN GrReportingStaging.TapasGlobalBudgeting.BudgetReportGroupActive(@DataPriorToDate) brgA ON
		brg.ImportKey = brgA.ImportKey
		
PRINT 'Completed inserting records from BudgetReportGroup:'+CONVERT(char(10),@@rowcount)
PRINT CONVERT(Varchar(27), getdate(), 121)



CREATE TABLE #BudgetReportGroupDetail(
	ImportKey INT NOT NULL,
	ImportBatchId INT NOT NULL,
	ImportDate DATETIME NOT NULL,
	BudgetReportGroupDetailId INT NOT NULL,
	BudgetReportGroupId INT NOT NULL,
	RegionId INT NOT NULL,
	BudgetId INT NOT NULL,
	IsDeleted BIT NOT NULL,
	InsertedDate DATETIME NOT NULL,
	UpdatedDate DATETIME NOT NULL,
	UpdatedByStaffId INT NOT NULL
)

INSERT INTO #BudgetReportGroupDetail(
	ImportKey,
	ImportBatchId,
	ImportDate,
	BudgetReportGroupDetailId,
	BudgetReportGroupId,
	RegionId,
	BudgetId,
	IsDeleted,
	InsertedDate,
	UpdatedDate,
	UpdatedByStaffId
)
SELECT
	brgd.*
FROM 
	GrReportingStaging.TapasGlobalBudgeting.BudgetReportGroupDetail brgd
	INNER JOIN GrReportingStaging.TapasGlobalBudgeting.BudgetReportGroupDetailActive(@DataPriorToDate) brgdA ON
		brgd.ImportKey = brgdA.ImportKey
		
PRINT 'Completed inserting records from BudgetReportGroupDetail:'+CONVERT(char(10),@@rowcount)
PRINT CONVERT(Varchar(27), getdate(), 121)



CREATE TABLE #BudgetReportGroupPeriod(
	ImportKey INT NOT NULL,
	ImportBatchId INT NOT NULL,
	ImportDate DATETIME NOT NULL,
	BudgetReportGroupPeriodId INT NOT NULL,
	BudgetExchangeRateId INT NOT NULL,
	[Year] INT NOT NULL,
	Period INT NOT NULL,
	IsDeleted BIT NOT NULL,
	InsertedDate DATETIME NOT NULL,
	UpdatedDate DATETIME NOT NULL,
	UpdatedByStaffId INT NOT NULL
)

INSERT INTO #BudgetReportGroupPeriod(
	ImportKey,
	ImportBatchId,
	ImportDate,
	BudgetReportGroupPeriodId,
	BudgetExchangeRateId,
	[Year],
	Period,
	IsDeleted,
	InsertedDate,
	UpdatedDate,
	UpdatedByStaffId
)
SELECT
	brgp.*
FROM
	GrReportingStaging.Gdm.BudgetReportGroupPeriod brgp
	INNER JOIN GrReportingStaging.Gdm.BudgetReportGroupPeriodActive(@DataPriorToDate) brgpA ON
		brgp.ImportKey = brgpA.ImportKey
		
PRINT 'Completed inserting records from GRBudgetReportGroupPeriod:'+CONVERT(char(10),@@rowcount)
PRINT CONVERT(Varchar(27), getdate(), 121)

-- Source budget status

CREATE TABLE #BudgetStatus(
	ImportKey INT NOT NULL,
	ImportBatchId INT NOT NULL,
	ImportDate DATETIME NOT NULL,
	BudgetStatusId INT NOT NULL,
	[Name] VARCHAR(50) NOT NULL,
	[Description] VARCHAR(100) NOT NULL,
	InsertedDate DATETIME NOT NULL,
	UpdatedByStaffId INT NOT NULL
)

INSERT INTO #BudgetStatus(
	ImportKey,
	ImportBatchId,
	ImportDate,
	BudgetStatusId,
	[Name],
	[Description],
	InsertedDate,
	UpdatedByStaffId
)
SELECT 
	BudgetStatus.* 
FROM
	GrReportingStaging.TapasGlobalBudgeting.BudgetStatus BudgetStatus
	INNER JOIN GrReportingStaging.TapasGlobalBudgeting.BudgetStatusActive(@DataPriorToDate) BudgetStatusA ON
		BudgetStatus.ImportKey = BudgetStatusA.ImportKey
		
PRINT 'Completed inserting records from BudgetStatus:'+CONVERT(char(10),@@rowcount)
PRINT CONVERT(Varchar(27), getdate(), 121)


CREATE TABLE #AllActiveBudget(
	ImportKey INT NOT NULL,
	ImportBatchId INT NOT NULL,
	ImportDate DATETIME NOT NULL,
	BudgetId INT NOT NULL,
	RegionId INT NOT NULL,
	BudgetTypeId INT NOT NULL,
	BudgetStatusId INT NOT NULL,
	[Name] VARCHAR(100) NOT NULL,
	StartPeriod INT NOT NULL,
	EndPeriod INT NOT NULL,
	FirstProjectedPeriod INT NULL,
	CurrencyCode VARCHAR(3) NOT NULL,
	CanEmployeesViewBudget BIT NOT NULL,
	IsReforecast BIT NOT NULL,
	IsDeleted BIT NOT NULL,
	InsertedDate DATETIME NOT NULL,
	UpdatedDate DATETIME NOT NULL,
	UpdatedByStaffId INT NOT NULL,
	LastLockedDate DATETIME NULL,
	BudgetAllocationSetId INT NULL,
	LastAMUpdateDate DATETIME NULL
)

INSERT INTO #AllActiveBudget(
	ImportKey,
	ImportBatchId,
	ImportDate,
	BudgetId,
	RegionId,
	BudgetTypeId,
	BudgetStatusId,
	[Name],
	StartPeriod,
	EndPeriod,
	FirstProjectedPeriod,
	CurrencyCode,
	CanEmployeesViewBudget,
	IsReforecast,
	IsDeleted,
	InsertedDate,
	UpdatedDate,
	UpdatedByStaffId,
	LastLockedDate,
	BudgetAllocationSetId,
	LastAMUpdateDate
)
SELECT 
	Budget.*
FROM
	GrReportingStaging.TapasGlobalBudgeting.Budget Budget
	INNER JOIN GrReportingStaging.TapasGlobalBudgeting.BudgetActive(@DataPriorToDate) BudgetA ON
		Budget.ImportKey = BudgetA.ImportKey
		
PRINT 'Completed inserting records into ##AllActiveBudget:'+CONVERT(char(10),@@rowcount)
PRINT CONVERT(Varchar(27), getdate(), 121)

CREATE CLUSTERED INDEX IX_BudgetID ON #AllActiveBudget (BudgetId)
PRINT 'Completed creating indexes on #Budget'
PRINT CONVERT(Varchar(27), getdate(), 121)


CREATE TABLE #BudgetProject(
	ImportKey INT NOT NULL,
	ImportBatchId INT NOT NULL,
	ImportDate DATETIME NOT NULL,
	BudgetProjectId INT NOT NULL,
	BudgetId INT NOT NULL,
	ProjectId INT NULL,
	RegionId INT NOT NULL,
	PropertyFundId INT NOT NULL,
	ActivityTypeId INT NOT NULL,
	Code VARCHAR(50) NULL,
	[Name] VARCHAR(100) NULL,
	CorporateDepartmentCode VARCHAR(6) NULL,
	CorporateSourceCode VARCHAR(2) NULL,
	StartPeriod INT NOT NULL,
	EndPeriod INT NULL,
	IsReimbursable BIT NOT NULL, --“NonPayrollReimbursable” 
	InsertedDate DATETIME NOT NULL,
	UpdatedDate DATETIME NOT NULL,
	UpdatedByStaffId INT NOT NULL,
	OriginalBudgetProjectId INT NULL,
	IsTsCost BIT NOT NULL,
	CanAllocateOverheads BIT NOT NULL,
	AllocateOverheadsProjectId INT NULL,
	MarkUpPercentage DECIMAL(5, 4) NULL,
	ProjectOwnerStaffId INT NULL,
	AMBudgetProjectId INT NULL
)

INSERT INTO #BudgetProject(
	ImportKey,
	ImportBatchId,
	ImportDate,
	BudgetProjectId,
	BudgetId,
	ProjectId,
	RegionId,
	PropertyFundId,
	ActivityTypeId,
	Code,
	[Name],
	CorporateDepartmentCode,
	CorporateSourceCode,
	StartPeriod,
	EndPeriod,
	IsReimbursable,
	InsertedDate,
	UpdatedDate,
	UpdatedByStaffId,
	OriginalBudgetProjectId,
	IsTsCost,
	CanAllocateOverheads,
	AllocateOverheadsProjectId,
	MarkUpPercentage,
	ProjectOwnerStaffId,
	AMBudgetProjectId
)
SELECT 
	BudgetProject.* 
FROM 
	GrReportingStaging.TapasGlobalBudgeting.BudgetProject BudgetProject
	INNER JOIN GrReportingStaging.TapasGlobalBudgeting.BudgetProjectActive(@DataPriorToDate) BudgetProjectA ON
		BudgetProject.ImportKey = BudgetProjectA.ImportKey
		
	-- data limiting join
	INNER JOIN #BudgetReportGroupDetail b ON
		BudgetProject.BudgetId = b.BudgetId

PRINT 'Completed inserting records into #BudgetProject:'+CONVERT(char(10),@@rowcount)
PRINT CONVERT(Varchar(27), getdate(), 121)

CREATE CLUSTERED INDEX IX_BudgetID ON #BudgetProject (BudgetId)
PRINT 'Completed creating indexes on #BudgetProject'
PRINT CONVERT(Varchar(27), getdate(), 121)

CREATE TABLE #BudgetEmployee(
	ImportKey INT NOT NULL,
	ImportBatchId INT NOT NULL,
	ImportDate DATETIME NOT NULL,
	BudgetEmployeeId INT NOT NULL,
	BudgetId INT NOT NULL,
	HrEmployeeId INT NULL,
	PayGroupId INT NOT NULL,
	JobTitleId INT NOT NULL,
	LocationId INT NOT NULL,
	StateId INT NULL,
	OverheadRegionId INT NOT NULL,
	ApproverStaffId INT NULL,
	[Name] VARCHAR(255) NOT NULL,
	IsUnion BIT NOT NULL,
	RehirePeriod INT NOT NULL,
	RehireDate DATETIME NOT NULL,
	TerminatePeriod INT NULL,
	TerminateDate DATETIME NULL,
	EmployeeHistoryEffectivePeriod INT NOT NULL,
	EmployeeHistoryEffectiveDate DATETIME NOT NULL,
	EmployeePayrollEffectiveDate DATETIME NULL,
	CurrentAnnualSalary DECIMAL(18, 2) NULL,
	PreviousYearSalary DECIMAL(18, 2) NULL,
	SalaryYear INT NOT NULL,
	PreviousYearBonus DECIMAL(18, 2) NULL,
	BonusYear INT NULL,
	IsActualEmployee BIT NOT NULL,
	IsReviewed BIT NOT NULL,
	IsPartTime BIT NOT NULL,
	InsertedDate DATETIME NOT NULL,
	UpdatedDate DATETIME NOT NULL,
	UpdatedByStaffId INT NOT NULL,
	OriginalBudgetEmployeeId INT NULL
)

INSERT INTO #BudgetEmployee(
	ImportKey,
	ImportBatchId,
	ImportDate,
	BudgetEmployeeId,
	BudgetId,
	HrEmployeeId,
	PayGroupId,
	JobTitleId,
	LocationId,
	StateId,
	OverheadRegionId ,
	ApproverStaffId,
	[Name],
	IsUnion,
	RehirePeriod,
	RehireDate,
	TerminatePeriod,
	TerminateDate,
	EmployeeHistoryEffectivePeriod,
	EmployeeHistoryEffectiveDate,
	EmployeePayrollEffectiveDate,
	CurrentAnnualSalary,
	PreviousYearSalary,
	SalaryYear,
	PreviousYearBonus,
	BonusYear,
	IsActualEmployee,
	IsReviewed,
	IsPartTime,
	InsertedDate,
	UpdatedDate,
	UpdatedByStaffId,
	OriginalBudgetEmployeeId
)
SELECT 
	BudgetEmployee.* 
FROM 
	GrReportingStaging.TapasGlobalBudgeting.BudgetEmployee BudgetEmployee
	INNER JOIN GrReportingStaging.TapasGlobalBudgeting.BudgetEmployeeActive(@DataPriorToDate) BudgetEmployeeA ON
		BudgetEmployee.ImportKey = BudgetEmployeeA.ImportKey

	--data limiting join
	INNER JOIN #BudgetReportGroupDetail b ON
		BudgetEmployee.BudgetId = b.BudgetId

PRINT 'Completed inserting records into #Region:'+CONVERT(char(10),@@rowcount)
PRINT CONVERT(Varchar(27), getdate(), 121)


CREATE TABLE #BudgetEmployeeFunctionalDepartment(
	ImportKey INT NOT NULL,
	ImportBatchId INT NOT NULL,
	ImportDate DATETIME NOT NULL,
	BudgetEmployeeFunctionalDepartmentId INT NOT NULL,
	BudgetEmployeeId INT NOT NULL,
	SubDepartmentId INT NOT NULL,
	EffectivePeriod INT NOT NULL,
	InsertedDate DATETIME NOT NULL,
	UpdatedDate DATETIME NOT NULL,
	UpdatedByStaffId INT NOT NULL,
	FunctionalDepartmentId INT NOT NULL
)

INSERT INTO #BudgetEmployeeFunctionalDepartment(
	ImportKey,
	ImportBatchId,
	ImportDate,
	BudgetEmployeeFunctionalDepartmentId,
	BudgetEmployeeId,
	SubDepartmentId,
	EffectivePeriod,
	InsertedDate,
	UpdatedDate,
	UpdatedByStaffId,
	FunctionalDepartmentId
)

SELECT 
	efd.* 
FROM 
	GrReportingStaging.TapasGlobalBudgeting.BudgetEmployeeFunctionalDepartment efd
	INNER JOIN GrReportingStaging.TapasGlobalBudgeting.BudgetEmployeeFunctionalDepartmentActive(@DataPriorToDate) efdA ON
		efd.ImportKey = efdA.ImportKey

	-- data limiting join
	INNER JOIN #BudgetEmployee be ON
		efd.BudgetEmployeeId = be.BudgetEmployeeId

PRINT 'Completed inserting records into #BudgetEmployeeFunctionalDepartment:'+CONVERT(char(10),@@rowcount)
PRINT CONVERT(Varchar(27), getdate(), 121)

CREATE TABLE #FunctionalDepartment(
	ImportKey INT NOT NULL,
	ImportBatchId INT NOT NULL,
	ImportDate DATETIME NOT NULL,
	FunctionalDepartmentId INT NOT NULL,
	Name VARCHAR(50) NOT NULL,
	Code VARCHAR(20) NOT NULL,
	IsActive BIT NOT NULL,
	InsertedDate DATETIME NOT NULL,
	UpdatedDate DATETIME NOT NULL,
	GlobalCode CHAR(3) NULL
)

INSERT INTO #FunctionalDepartment(
	ImportKey,
	ImportBatchId,
	ImportDate,
	FunctionalDepartmentId,
	Name,
	Code,
	IsActive,
	InsertedDate,
	UpdatedDate,
	GlobalCode
)
SELECT 
	fd.* 
FROM 
	GrReportingStaging.HR.FunctionalDepartment fd
	INNER JOIN GrReportingStaging.HR.FunctionalDepartmentActive(@DataPriorToDate) fdA ON
		fd.ImportKey = fdA.ImportKey

PRINT 'Completed inserting records into #FunctionalDepartment:'+CONVERT(char(10),@@rowcount)
PRINT CONVERT(Varchar(27), getdate(), 121)

CREATE CLUSTERED INDEX IX_FunctionalDepartmentId ON #FunctionalDepartment (FunctionalDepartmentId)
PRINT 'Completed creating indexes on #FunctionalDepartment'
PRINT CONVERT(Varchar(27), getdate(), 121)

CREATE TABLE #BudgetEmployeePayrollAllocation(
	ImportKey INT NOT NULL,
	ImportBatchId INT NOT NULL,
	ImportDate DATETIME NOT NULL,
	BudgetEmployeePayrollAllocationId INT NOT NULL,
	BudgetEmployeeId INT NOT NULL,
	BudgetProjectId INT NOT NULL,
	BudgetProjectGroupId INT NULL,
	Period INT NOT NULL,
	SalaryAllocationValue DECIMAL(18, 9) NOT NULL,
	BonusAllocationValue DECIMAL(18, 9) NULL,
	BonusCapAllocationValue DECIMAL(18, 9) NULL,
	ProfitShareAllocationValue DECIMAL(18, 9) NULL,
	PreTaxSalaryAmount DECIMAL(18, 2) NOT NULL,
	PreTaxBonusAmount DECIMAL(18, 2) NULL,
	PreTaxBonusCapExcessAmount DECIMAL(18, 2) NULL,
	PreTaxProfitShareAmount DECIMAL(18, 2) NULL,
	InsertedDate DATETIME NOT NULL,
	UpdatedDate DATETIME NOT NULL,
	UpdatedByStaffId INT NOT NULL,
	OriginalBudgetEmployeePayrollAllocationId INT NULL
)

INSERT INTO #BudgetEmployeePayrollAllocation(
	ImportKey,
	ImportBatchId,
	ImportDate,
	BudgetEmployeePayrollAllocationId,
	BudgetEmployeeId,
	BudgetProjectId,
	BudgetProjectGroupId,
	Period,
	SalaryAllocationValue,
	BonusAllocationValue,
	BonusCapAllocationValue,
	ProfitShareAllocationValue,
	PreTaxSalaryAmount,
	PreTaxBonusAmount,
	PreTaxBonusCapExcessAmount,
	PreTaxProfitShareAmount,
	InsertedDate,
	UpdatedDate,
	UpdatedByStaffId,
	OriginalBudgetEmployeePayrollAllocationId
)
SELECT
	Allocation.*
FROM
	GrReportingStaging.TapasGlobalBudgeting.BudgetEmployeePayrollAllocation Allocation

	INNER JOIN GrReportingStaging.TapasGlobalBudgeting.BudgetEmployeePayrollAllocationActive(@DataPriorToDate) AllocationA ON
		Allocation.ImportKey = AllocationA.ImportKey

	--data limiting join
	INNER JOIN #BudgetProject bp ON
		Allocation.BudgetProjectId = bp.BudgetProjectId

PRINT 'Completed inserting records into #BudgetEmployeePayrollAllocation:'+CONVERT(char(10),@@rowcount)
PRINT CONVERT(Varchar(27), getdate(), 121)

CREATE CLUSTERED INDEX IX_BudgetEmployeePayrollAllocationId ON #BudgetEmployeePayrollAllocation (BudgetEmployeePayrollAllocationId)
PRINT 'Completed creating indexes on #BudgetEmployeePayrollAllocation'
PRINT CONVERT(Varchar(27), getdate(), 121)


CREATE TABLE #Location(
	ImportKey INT NOT NULL,
	ImportBatchId INT NOT NULL,
	ImportDate DATETIME NOT NULL,
	LocationId INT NOT NULL,
	ExternalSubRegionId INT NOT NULL,
	StateId INT NULL,
	Code VARCHAR(10) NOT NULL,
	[Name] VARCHAR(50) NOT NULL,
	IsActive BIT NOT NULL,
	InsertedDate DATETIME NOT NULL,
	UpdatedDate DATETIME NOT NULL
)

INSERT INTO #Location(
	ImportKey,
	ImportBatchId,
	ImportDate,
	LocationId,
	ExternalSubRegionId,
	StateId,
	Code,
	[Name],
	IsActive,
	InsertedDate,
	UpdatedDate
)
SELECT 
	Location.* 
FROM 
	GrReportingStaging.HR.Location Location
	INNER JOIN GrReportingStaging.HR.LocationActive(@DataPriorToDate) LocationA ON
		Location.ImportKey = LocationA.ImportKey
	
PRINT 'Completed inserting records into #Location:'+CONVERT(char(10),@@rowcount)
PRINT CONVERT(Varchar(27), getdate(), 121)

CREATE CLUSTERED INDEX IX_LocationId ON #Location (LocationId)
PRINT 'Completed creating indexes on #Location'
PRINT CONVERT(Varchar(27), getdate(), 121)

CREATE TABLE #PayrollRegion(
	ImportKey INT NOT NULL,
	PayrollRegionId INT NOT NULL,
	RegionId INT NOT NULL,
	ExternalSubRegionId INT NOT NULL,
	CorporateEntityRef VARCHAR(6) NOT NULL,
	CorporateSourceCode VARCHAR(2) NOT NULL,
	InsertedDate DATETIME NOT NULL,
	UpdatedDate DATETIME NOT NULL,
	UpdatedByStaffId INT NOT NULL
)

INSERT INTO #PayrollRegion(
	ImportKey,
	PayrollRegionId,
	RegionId,
	ExternalSubRegionId,
	CorporateEntityRef,
	CorporateSourceCode,
	InsertedDate,
	UpdatedDate,
	UpdatedByStaffId
)
SELECT 
	PayrollRegion.* 
FROM 
	GrReportingStaging.TapasGlobal.PayrollRegion PayrollRegion
	INNER JOIN GrReportingStaging.TapasGlobal.PayrollRegionActive(@DataPriorToDate) PayrollRegionA ON
		PayrollRegion.ImportKey = PayrollRegionA.ImportKey
	
PRINT 'Completed inserting records into #PayrollRegion:'+CONVERT(char(10),@@rowcount)
PRINT CONVERT(Varchar(27), getdate(), 121)

CREATE CLUSTERED INDEX IX_PayrollRegionId ON #PayrollRegion (PayrollRegionId)
PRINT 'Completed creating indexes on #PayrollRegion'
PRINT CONVERT(Varchar(27), getdate(), 121)


CREATE TABLE #OriginatingRegionCorporateEntity( -- GDM 2.0 addition
	ImportKey INT NOT NULL,
	OriginatingRegionCorporateEntityId INT NOT NULL,
	GlobalRegionId INT NOT NULL,
	CorporateEntityCode VARCHAR(10) NOT NULL,
	SourceCode CHAR(2) NOT NULL,
	InsertedDate DATETIME NOT NULL,
	UpdatedDate DATETIME NOT NULL,
	IsDeleted BIT NOT NULL	
)

INSERT INTO #OriginatingRegionCorporateEntity(
	ImportKey,
	OriginatingRegionCorporateEntityId,
	GlobalRegionId,
	CorporateEntityCode,
	SourceCode,
	InsertedDate,
	UpdatedDate,
	IsDeleted
)
SELECT
	ORCE.ImportKey,
	ORCE.OriginatingRegionCorporateEntityId,
	ORCE.GlobalRegionId,
	ORCE.CorporateEntityCode,
	ORCE.SourceCode,
	ORCE.InsertedDate,
	ORCE.UpdatedDate,
	ORCE.IsDeleted	
FROM
	GrReportingStaging.Gdm.OriginatingRegionCorporateEntity ORCE
	INNER JOIN GrReportingStaging.Gdm.OriginatingRegionCorporateEntityActive (@DataPriorToDate) ORCEA ON
		ORCEA.ImportKey = ORCE.ImportKey

PRINT 'Completed inserting records into #OriginatingRegionCorporateEntity:'+CONVERT(char(10),@@rowcount)
PRINT CONVERT(Varchar(27), getdate(), 121)

CREATE UNIQUE CLUSTERED INDEX IX_Clustered ON #OriginatingRegionCorporateEntity (CorporateEntityCode, SourceCode, IsDeleted, GlobalRegionId)
PRINT 'Completed creating indexes on #OriginatingRegionCorporateEntity'
PRINT CONVERT(Varchar(27), getdate(), 121)



CREATE TABLE #OriginatingRegionPropertyDepartment( -- GDM 2.0 addition
	ImportKey INT NOT NULL,
	OriginatingRegionPropertyDepartmentId INT NOT NULL,
	GlobalRegionId INT NOT NULL,
	PropertyDepartmentCode VARCHAR(10) NOT NULL,
	SourceCode CHAR(2) NOT NULL,
	InsertedDate DATETIME NOT NULL,
	UpdatedDate DATETIME NOT NULL,
	IsDeleted BIT NOT NULL	
)

INSERT INTO #OriginatingRegionPropertyDepartment(
	ImportKey,
	OriginatingRegionPropertyDepartmentId,
	GlobalRegionId,
	PropertyDepartmentCode,
	SourceCode,
	InsertedDate,
	UpdatedDate,
	IsDeleted
)
SELECT
	ORPD.ImportKey,
	ORPD.OriginatingRegionPropertyDepartmentId,
	ORPD.GlobalRegionId,
	ORPD.PropertyDepartmentCode,
	ORPD.SourceCode,
	ORPD.InsertedDate,
	ORPD.UpdatedDate,
	ORPD.IsDeleted
FROM
	GrReportingStaging.Gdm.OriginatingRegionPropertyDepartment ORPD
	INNER JOIN GrReportingStaging.Gdm.OriginatingRegionPropertyDepartmentActive(@DataPriorToDate) ORPDA ON
		ORPDA.ImportKey = ORPD.ImportKey

PRINT 'Completed inserting records into #OriginatingRegionPropertyDepartment:'+CONVERT(char(10),@@rowcount)
PRINT CONVERT(Varchar(27), getdate(), 121)

CREATE UNIQUE CLUSTERED INDEX IX_Clustered ON #OriginatingRegionPropertyDepartment (PropertyDepartmentCode, SourceCode, IsDeleted, GlobalRegionId)
PRINT 'Completed creating indexes on #OriginatingRegionPropertyDepartment'
PRINT CONVERT(Varchar(27), getdate(), 121)



------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE #AllModifiedReportBudget(
	BudgetId INT NOT NULL,
	BudgetReportGroupId INT NOT NULL,
	BudgetReportGroupPeriodId INT NOT NULL,
	IsBudgetDeleted BIT NOT NULL,
	IsBugetReforecast BIT NOT NULL,
	BudgetStatusId INT NOT NULL,
	IsDetailDeleted BIT NOT NULL,
	IsGroupReforecast BIT NOT NULL,
	GroupStartPeriod INT NOT NULL,
	GroupEndPeriod INT NOT NULL,
	IsGroupDeleted BIT NOT NULL,
	IsPeriodDeleted BIT NOT NULL
)

INSERT INTO #AllModifiedReportBudget(
	BudgetId,
	BudgetReportGroupId,
	BudgetReportGroupPeriodId,
	IsBudgetDeleted,
	IsBugetReforecast,
	BudgetStatusId,
	IsDetailDeleted,
	IsGroupReforecast,
	GroupStartPeriod,
	GroupEndPeriod,
	IsGroupDeleted,
	IsPeriodDeleted
)

SELECT 
	Brgd.BudgetId, 
	Brgd.BudgetReportGroupId,
	Brgp.BudgetReportGroupPeriodId,
	B.IsDeleted AS IsBudgetDeleted,
	B.IsReforecast AS IsBugetReforecast,
	B.BudgetStatusId, 
	Brgd.IsDeleted AS IsDetailDeleted, 
	Brg.IsReforecast AS IsGroupReforecast, 
	Brg.StartPeriod AS GroupStartPeriod, 
	Brg.EndPeriod AS GroupEndPeriod, 
	Brg.IsDeleted AS IsGroupDeleted,
	Brgp.IsDeleted AS IsPeriodDeleted
	
From	#AllActiveBudget B
			INNER JOIN #BudgetStatus Bs ON Bs.BudgetStatusId = B.BudgetStatusId
			
			INNER JOIN #BudgetReportGroupDetail BrGd ON BrGd.BudgetId = B.BudgetId
			
			INNER JOIN #BudgetReportGroup BrG ON BrG.BudgetReportGroupId = BrGd.BudgetReportGroupId
			
			INNER JOIN #BudgetReportGroupPeriod BrGp ON BrGp.BudgetReportGroupPeriodId = BrG.BudgetReportGroupPeriodId

Where	BrGp.[Year] = @BudgetYear
AND		BrGp.Period = (Select MIN(ReforecastEffectivePeriod) 
						From GrReporting.dbo.Reforecast 
						Where ReforecastEffectiveYear = @BudgetYear
						 AND ReforecastQuarterName = @BudgetQuater
						)


CREATE TABLE #LockedModifiedReportGroup( -- All budgets in a particular group need to be locked before the group can be pulled
	BudgetReportGroupId INT NOT NULL
)

INSERT INTO #LockedModifiedReportGroup(
	BudgetReportGroupId
)

SELECT
	amrb.BudgetReportGroupId
FROM
	#AllModifiedReportBudget amrb
	
	INNER JOIN #BudgetStatus bs ON
		amrb.BudgetStatusId = bs.BudgetStatusId
GROUP BY
	amrb.BudgetReportGroupId
HAVING
	COUNT(*) = SUM(CASE WHEN bs.[Name] = 'Locked' THEN 1 ELSE 0 END) -- Are all budgets locked within this group? If not, no budgets get imported 

PRINT 'Completed inserting records into #LockedModifiedReportGroup:'+CONVERT(char(10),@@rowcount)
PRINT CONVERT(Varchar(27), getdate(), 121)




CREATE TABLE #FilteredModifiedReportBudget(
	BudgetId INT NOT NULL,
	BudgetReportGroupId INT NOT NULL,
	BudgetReportGroupPeriodId INT NOT NULL,
	IsBudgetDeleted BIT NOT NULL,
	IsBugetReforecast BIT NOT NULL,
	BudgetStatusId INT NOT NULL,
	IsDetailDeleted BIT NOT NULL,
	IsGroupReforecast BIT NOT NULL,
	GroupStartPeriod INT NOT NULL,
	GroupEndPeriod INT NOT NULL,
	IsGroupDeleted BIT NOT NULL,
	IsPeriodDeleted BIT NOT NULL,
	BudgetReportGroupPeriod INT NOT NULL
)

INSERT INTO #FilteredModifiedReportBudget(
	BudgetId,
	BudgetReportGroupId,
	BudgetReportGroupPeriodId,
	IsBudgetDeleted,
	IsBugetReforecast,
	BudgetStatusId,
	IsDetailDeleted,
	IsGroupReforecast,
	GroupStartPeriod,
	GroupEndPeriod,
	IsGroupDeleted,
	IsPeriodDeleted,
	BudgetReportGroupPeriod 
)
SELECT
	amrb.*,
	brgp.Period BudgetReportGroupPeriod
FROM
	#LockedModifiedReportGroup lmrg
	
	INNER JOIN #AllModifiedReportBudget amrb ON
		lmrg.BudgetReportGroupId = amrb.BudgetReportGroupId

	INNER JOIN #BudgetReportGroupPeriod brgp ON
		brgp.BudgetReportGroupPeriodId = amrb.BudgetReportGroupPeriodId
		
WHERE
	amrb.IsBudgetDeleted = 0 AND
	--amrb.IsBugetReforecast = 0 AND --This is only applicable if you are looking a a Budget and not a Reforecast
	amrb.IsDetailDeleted = 0 AND
	--amrb.IsGroupReforecast = 0 AND
	amrb.IsGroupDeleted = 0 AND
	amrb.IsPeriodDeleted = 0 AND
	brgp.IsDeleted = 0



PRINT 'Completed inserting records into #FilteredModifiedReportBudget:'+CONVERT(char(10),@@rowcount)
PRINT CONVERT(Varchar(27), getdate(), 121)




CREATE TABLE #Budget(
	ImportKey INT NOT NULL,
	ImportBatchId INT NOT NULL,
	ImportDate DATETIME NOT NULL,
	BudgetId INT NOT NULL,
	RegionId INT NOT NULL,
	BudgetTypeId INT NOT NULL,
	BudgetStatusId INT NOT NULL,
	[Name] VARCHAR(100) NOT NULL,
	StartPeriod INT NOT NULL,
	EndPeriod INT NOT NULL,
	FirstProjectedPeriod INT NULL,
	CurrencyCode VARCHAR(3) NOT NULL,
	CanEmployeesViewBudget BIT NOT NULL,
	IsReforecast BIT NOT NULL,
	IsDeleted BIT NOT NULL,
	InsertedDate DATETIME NOT NULL,
	UpdatedDate DATETIME NOT NULL,
	UpdatedByStaffId INT NOT NULL,
	LastLockedDate DATETIME NULL,
	BudgetAllocationSetId INT NULL,
	LastAMUpdateDate DATETIME NULL
)

INSERT INTO #Budget(
	ImportKey,
	ImportBatchId,
	ImportDate,
	BudgetId,
	RegionId,
	BudgetTypeId,
	BudgetStatusId,
	[Name],
	StartPeriod,
	EndPeriod,
	FirstProjectedPeriod,
	CurrencyCode,
	CanEmployeesViewBudget,
	IsReforecast,
	IsDeleted,
	InsertedDate,
	UpdatedDate,
	UpdatedByStaffId,
	LastLockedDate,
	BudgetAllocationSetId,
	LastAMUpdateDate
)
SELECT 
	Budget.* 
FROM
	#AllActiveBudget Budget
	
	INNER JOIN #FilteredModifiedReportBudget fmrb ON
		Budget.BudgetId = fmrb.BudgetId

PRINT 'Completed inserting records into #Budget:'+CONVERT(char(10),@@rowcount)
PRINT CONVERT(Varchar(27), getdate(), 121)

CREATE CLUSTERED INDEX IX_BudgetID ON #Budget (BudgetId)
PRINT 'Completed creating indexes on #Budget'
PRINT CONVERT(Varchar(27), getdate(), 121)




SELECT 
		DISTINCT
		--Fd.Code	
		--GrOr.Code,
		--OriginatingRegion.CorporateEntityRef,
		--OriginatingRegion.CorporateSourceCode,
		Fd.Name FunctionalDepartmentName,
		GrOr.Name OriginatingSubRegionName

FROM

		#BudgetReportGroup Brg
		
		INNER JOIN #BudgetReportGroupDetail Brgd ON Brgd.BudgetReportGroupId = Brg.BudgetReportGroupId

		INNER JOIN #BudgetEmployee Be ON Be.BudgetId = Brgd.BudgetId

		INNER JOIN #BudgetEmployeeFunctionalDepartment BeFd ON BeFd.BudgetEmployeeId = Be.BudgetEmployeeId
          
		INNER JOIN #FunctionalDepartment Fd ON Fd.FunctionalDepartmentId = BeFd.FunctionalDepartmentId

          --This is to ensure an employee has time/payroll allocated
		INNER JOIN #BudgetEmployeePayrollAllocation BePa ON Be.BudgetEmployeeId = Be.BudgetEmployeeId

		INNER JOIN #Budget B ON B.BudgetId = Brgd.BudgetId
					
		INNER JOIN #Location L ON L.LocationId = BE.LocationId


		INNER JOIN #PayrollRegion OriginatingRegion ON
				OriginatingRegion.ExternalSubRegionId = L.ExternalSubRegionId AND
				OriginatingRegion.RegionId = B.RegionId
				
		INNER JOIN #OriginatingRegionCorporateEntity OrCe ON OrCe.CorporateEntityCode = OriginatingRegion.CorporateEntityRef AND
							OrCe.SourceCode = OriginatingRegion.CorporateSourceCode
        INNER JOIN (
					SELECT 
						Gr.* 
					FROM 
						GrReportingStaging.Gdm.GlobalRegion Gr
						INNER JOIN GrReportingStaging.Gdm.GlobalRegionActive(@DataPriorToDate) GrA ON
							Gr.ImportKey = GrA.ImportKey
					) GrOr ON GrOr.GlobalRegionId = Orce.GlobalRegionId




---------------------------------------- CLEAN UP ------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
DROP TABLE #LockedModifiedReportGroup
DROP TABLE #AllModifiedReportBudget
DROP TABLE #AllActiveBudget
DROP TABLE #BudgetReportGroup
DROP TABLE #BudgetReportGroupDetail
DROP TABLE #BudgetReportGroupPeriod
DROP TABLE #BudgetStatus
DROP TABLE #Budget
DROP TABLE #BudgetProject
DROP TABLE #BudgetEmployee
DROP TABLE #BudgetEmployeeFunctionalDepartment
DROP TABLE #FunctionalDepartment
DROP TABLE #BudgetEmployeePayrollAllocation
DROP TABLE #Location
DROP TABLE #PayrollRegion
DROP TABLE #OriginatingRegionCorporateEntity
DROP TABLE #OriginatingRegionPropertyDepartment
DROP TABLE #FilteredModifiedReportBudget
GO


USE GrReporting
GO

/****** Object:  StoredProcedure dbo.ClearSessionSnapshot    Script Date: 08/21/2009 10:24:24 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'dbo.stp_R_MissingExchangeRates') AND type in (N'P', N'PC'))
DROP PROCEDURE dbo.stp_R_MissingExchangeRates
GO

CREATE PROCEDURE dbo.stp_R_MissingExchangeRates
 
AS 
DECLARE @CurrencyCount Int

Select	DISTINCT
		'Actual' DataSource,
		Ca.CalendarDate,
		Scu.CurrencyCode LocalCurrencyCode,
		0 NumberOfCurrencies,
		0 NumberOfDestinationCurrencies
From
		ProfitabilityActual Pa
			INNER JOIN Calendar Ca ON Ca.CalendarKey = Pa.CalendarKey
			INNER JOIN Currency Scu ON Scu.CurrencyKey = Pa.LocalCurrencyKey
			LEFT OUTER JOIN ExchangeRate Ex ON pa.LocalCurrencyKey = Ex.SourceCurrencyKey
								AND pa.CalendarKey = Ex.CalendarKey
Where Ex.SourceCurrencyKey IS NULL
UNION ALL
Select	DISTINCT
		'Budget',
		Ca.CalendarDate,
		Scu.CurrencyCode LocalCurrencyCode,
		0 NumberOfCurrencies,
		0 NumberOfDestinationCurrencies
From
		ProfitabilityBudget Pb
			INNER JOIN Calendar Ca ON Ca.CalendarKey = Pb.CalendarKey
			INNER JOIN Currency Scu ON Scu.CurrencyKey = Pb.LocalCurrencyKey
			LEFT OUTER JOIN ExchangeRate Ex ON pb.LocalCurrencyKey = Ex.SourceCurrencyKey
								AND pb.CalendarKey = Ex.CalendarKey
Where Ex.SourceCurrencyKey IS NULL
Order By 1,2,3

GO
USE [GrReporting]
GO

/****** Object:  StoredProcedure [dbo].[stp_R_ProfitabilityV2]    Script Date: 04/08/2010 18:01:36 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_R_ProfitabilityV2]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_R_ProfitabilityV2]
GO

/****** Object:  StoredProcedure [dbo].[stp_R_ProfitabilityV2]    Script Date: 12/29/2009 11:20:09 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER OFF
GO



CREATE PROCEDURE [dbo].[stp_R_ProfitabilityV2]
	@ReportExpensePeriod INT = NULL,
	@ReforecastQuaterName VARCHAR(10) = NULL, --'Q1' or 'Q2' or 'Q3'
	@DestinationCurrency VARCHAR(3) = NULL,
	@TranslationTypeName VARCHAR(50) = 'Global',
	@IsGross Bit=NULL, --not used, just placeholder
	@FunctionalDepartmentList TEXT = NULL,
	@ActivityTypeList TEXT = NULL,
	@EntityList TEXT = NULL,
	@MajorAccountCategoryList TEXT = NULL,
	@MinorAccountCategoryList TEXT = NULL,
	@AllocationRegionList TEXT = NULL,
	@AllocationSubRegionList TEXT = NULL,
	@OriginatingRegionList TEXT = NULL,
	@OriginatingSubRegionList TEXT = NULL,
	@DisplayOverheadBy Varchar(12)='Allocated', --alloc / unalloc

	--Customized Filter Logic Specific to this Report
	@IncludeGrossNonPayrollExpenses TinyInt = NULL,
	@IncludeFeeAdjustments TinyInt = NULL,
	@DisplayFeeAdjustmentsBy Varchar(20) = NULL,
	@OverheadOriginatingSubRegionList TEXT = NULL 
	

AS


IF ISNULL(@DisplayOverheadBy,'') NOT IN ('Allocated','Unallocated')
	BEGIN
	RAISERROR ('@DisplayOverheadBy have invalid value (Must be one of:Allocated,Unallocated)',18,1)
	RETURN
	END

IF (@IncludeFeeAdjustments = 1 AND ISNULL(@DisplayFeeAdjustmentsBy,'') NOT IN ('AllocationRegion','ReportingEntity'))
	BEGIN
	RAISERROR ('@DisplayFeeAdjustmentsBy have invalid value (Must be one of:AllocationRegion,ReportingEntity)',18,1)
	RETURN
	END
	


CREATE TABLE #DetailResult(
	ExpenseType varchar(50) NULL,
	FeeOrExpense varchar(50) NULL,
	MajorExpenseCategoryName varchar(100) NULL,
	MinorExpenseCategoryName varchar(100) NULL,
	GlobalGlAccountCode varchar(50) NULL,
	GlobalGlAccountName varchar(150) NULL,
	ActivityType varchar(50) NULL,
	ReportingEntityName varchar(100) NULL,
	
	PropertyFundCode varchar(6) NULL,
	FunctionalDepartmentCode varchar(15) NULL,
	AllocationSubRegionName varchar(50) NULL,
	OriginatingSubRegionName varchar(50) NULL,

	ActualsExpensePeriod Varchar(6) NULL,
	EntryDate varchar(10) NULL,
	[User] nvarchar(20) NULL,
	Description nvarchar(60) NULL,
	AdditionalDescription nvarchar(4000) NULL,
	ReimbursableName varchar(50) NULL,
	FeeAdjustmentCode varchar(10) NULL,
	SourceName varchar(50) NULL,
	GlAccountCategoryKey int not null,
	
	MtdActual money NULL,
	MtdOriginalBudget money NULL,
	MtdReforecastQ1 money NULL,
	MtdReforecastQ2 money NULL,
	MtdReforecastQ3 money NULL,
	MtdVarianceQ0 money NULL,
	MtdVarianceQ1 money NULL,
	MtdVarianceQ2 money NULL,
	MtdVarianceQ3 money NULL,
	YtdActual money NULL,
	YtdOriginalBudget money NULL,
	YtdReforecastQ1 money NULL,
	YtdReforecastQ2 money NULL,
	YtdReforecastQ3 money NULL,
	YtdVarianceQ0 money NULL,
	YtdVarianceQ1 money NULL,
	YtdVarianceQ2 money NULL,
	YtdVarianceQ3 money NULL,
	AnnualOriginalBudget money NULL,
	AnnualReforecastQ1 money NULL,
	AnnualReforecastQ2 money NULL,
	AnnualReforecastQ3 money NULL
)

Insert Into #DetailResult
(	ExpenseType, 
	FeeOrExpense,
    MajorExpenseCategoryName,
    MinorExpenseCategoryName,
	GlobalGlAccountCode,
	GlobalGlAccountName,
    ActivityType,
	ReportingEntityName,
	PropertyFundCode,
	FunctionalDepartmentCode,
	AllocationSubRegionName,
	OriginatingSubRegionName,
	ActualsExpensePeriod,
    EntryDate,
    [User],
    [Description],
    AdditionalDescription,
	ReimbursableName,
	FeeAdjustmentCode,
	SourceName,
	GlAccountCategoryKey,

	--Gross
	--Month to date    
	MtdActual,
	MtdOriginalBudget,
	MtdReforecastQ1,
	MtdReforecastQ2,
	MtdReforecastQ3,

	MtdVarianceQ0,
	MtdVarianceQ1,
	MtdVarianceQ2,
	MtdVarianceQ3,
	
	--Year to date
	YtdActual,	
	YtdOriginalBudget,
	YtdReforecastQ1,
	YtdReforecastQ2,
	YtdReforecastQ3,

	YtdVarianceQ0,
	YtdVarianceQ1,
	YtdVarianceQ2,
	YtdVarianceQ3,
	
	--Annual
	AnnualOriginalBudget,	
	AnnualReforecastQ1,
	AnnualReforecastQ2,
	AnnualReforecastQ3)
	
exec [stp_R_ProfitabilityDetailV2]
	@ReportExpensePeriod = @ReportExpensePeriod,
	@DestinationCurrency = @DestinationCurrency,
	@TranslationTypeName = @TranslationTypeName,
	@FunctionalDepartmentList = @FunctionalDepartmentList,
	@ActivityTypeList = @ActivityTypeList,
	@EntityList = @EntityList,
	@MajorAccountCategoryList = @MajorAccountCategoryList,
	@MinorAccountCategoryList = @MinorAccountCategoryList,
	@AllocationRegionList = @AllocationRegionList,
	@AllocationSubRegionList = @AllocationSubRegionList,
	@OriginatingRegionList = @OriginatingRegionList,
	@OriginatingSubRegionList = @OriginatingSubRegionList,
	@DisplayOverheadBy = @DisplayOverheadBy,
	@OverheadOriginatingSubRegionList = @OverheadOriginatingSubRegionList,
	@IncludeFeeAdjustments = @IncludeFeeAdjustments


--select * Into DetailResult From #DetailResult

--select * Into #DetailResult From DetailResult


CREATE TABLE #Result (
	NumberOfSpacesToPad TinyInt NOT NULL,
	GroupDisplayCode Varchar(500) NOT NULL,
	GroupDisplayName Varchar(500) NOT NULL,
	DisplayOrderNumber Int NOT NULL,
	MtdActual money NOT NULL DEFAULT(0),
	MtdOriginalBudget money NOT NULL DEFAULT(0),
	MtdReforecastQ1 money NOT NULL DEFAULT(0),
	MtdReforecastQ2 money NOT NULL DEFAULT(0),
	MtdReforecastQ3 money NOT NULL DEFAULT(0),
	
	MtdVarianceQ0 money NOT NULL DEFAULT(0),
	MtdVarianceQ1 money NOT NULL DEFAULT(0),
	MtdVarianceQ2 money NOT NULL DEFAULT(0),
	MtdVarianceQ3 money NOT NULL DEFAULT(0),

	MtdVariancePercentageQ0 money NOT NULL DEFAULT(0),
	MtdVariancePercentageQ1 money NOT NULL DEFAULT(0),
	MtdVariancePercentageQ2 money NOT NULL DEFAULT(0),
	MtdVariancePercentageQ3 money NOT NULL DEFAULT(0),
	
	YtdActual money NOT NULL DEFAULT(0),
	YtdOriginalBudget money NOT NULL DEFAULT(0),
	YtdReforecastQ1 money NOT NULL DEFAULT(0),
	YtdReforecastQ2 money NOT NULL DEFAULT(0),
	YtdReforecastQ3 money NOT NULL DEFAULT(0),
	
	YtdVarianceQ0 money NOT NULL DEFAULT(0),
	YtdVarianceQ1 money NOT NULL DEFAULT(0),
	YtdVarianceQ2 money NOT NULL DEFAULT(0),
	YtdVarianceQ3 money NOT NULL DEFAULT(0),
	
	YtdVariancePercentageQ0 money NOT NULL DEFAULT(0),
	YtdVariancePercentageQ1 money NOT NULL DEFAULT(0),
	YtdVariancePercentageQ2 money NOT NULL DEFAULT(0),
	YtdVariancePercentageQ3 money NOT NULL DEFAULT(0),
	
	AnnualOriginalBudget money NOT NULL DEFAULT(0),
	AnnualReforecastQ1 money NOT NULL DEFAULT(0),
	AnnualReforecastQ2 money NOT NULL DEFAULT(0),
	AnnualReforecastQ3 money NOT NULL DEFAULT(0)
)

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
VALUES(0,'REVENUE','REVENUE',100)

Insert Into #Result
(NumberOfSpacesToPad,GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
VALUES(0, 'OPERATINGREVENUE', 'Operating Revenue',200)

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		gac.MinorCategoryName GroupDisplayCode,
		gac.MinorCategoryName,
		201 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0),
		ISNULL(SUM(t1.MtdOriginalBudget),0),
		ISNULL(SUM(t1.MtdReforecastQ1),0),
		ISNULL(SUM(t1.MtdReforecastQ2),0),
		ISNULL(SUM(t1.MtdReforecastQ3),0),
		ISNULL(SUM(t1.MtdVarianceQ0),0),
		ISNULL(SUM(t1.MtdVarianceQ1),0),
		ISNULL(SUM(t1.MtdVarianceQ2),0),
		ISNULL(SUM(t1.MtdVarianceQ3),0),
		ISNULL(SUM(t1.YtdActual),0),
		ISNULL(SUM(t1.YtdOriginalBudget),0),
		ISNULL(SUM(t1.YtdReforecastQ1),0),
		ISNULL(SUM(t1.YtdReforecastQ2),0),
		ISNULL(SUM(t1.YtdReforecastQ3),0),
		ISNULL(SUM(t1.YtdVarianceQ0),0),
		ISNULL(SUM(t1.YtdVarianceQ1),0),
		ISNULL(SUM(t1.YtdVarianceQ2),0),
		ISNULL(SUM(t1.YtdVarianceQ3),0),
		ISNULL(SUM(t1.AnnualOriginalBudget),0),
		ISNULL(SUM(t1.AnnualReforecastQ1),0),
		ISNULL(SUM(t1.AnnualReforecastQ2),0),
		ISNULL(SUM(t1.AnnualReforecastQ3),0)

From 
		GlAccountCategory gac
			LEFT OUTER JOIN (Select * 
							From #DetailResult t1
							Where t1.FeeAdjustmentCode		= 'NORMAL'
							) t1 ON gac.GlAccountCategoryKey = t1.GlAccountCategoryKey


Where	gac.FeeOrExpense		= 'INCOME'
AND		gac.MajorCategoryName	= 'Fee Income'
AND		gac.TranslationSubTypeName	= @TranslationTypeName
Group By 
		gac.MinorCategoryName
		
IF @DisplayFeeAdjustmentsBy = 'AllocationRegion'
	BEGIN
	
	Insert Into #Result
	(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
	MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
	MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
	YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
	YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
	AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)
	
	Select 
			5 NumberOfSpacesToPad,
			t1.MinorExpenseCategoryName + '-' + t1.AllocationSubRegionName GroupDisplayCode,
			t1.AllocationSubRegionName + ' Adjustment',
			201 DisplayOrderNumber,
			ISNULL(SUM(t1.MtdActual),0),
			ISNULL(SUM(t1.MtdOriginalBudget),0),
			ISNULL(SUM(t1.MtdReforecastQ1),0),
			ISNULL(SUM(t1.MtdReforecastQ2),0),
			ISNULL(SUM(t1.MtdReforecastQ3),0),
			ISNULL(SUM(t1.MtdVarianceQ0),0),
			ISNULL(SUM(t1.MtdVarianceQ1),0),
			ISNULL(SUM(t1.MtdVarianceQ2),0),
			ISNULL(SUM(t1.MtdVarianceQ3),0),
			ISNULL(SUM(t1.YtdActual),0),
			ISNULL(SUM(t1.YtdOriginalBudget),0),
			ISNULL(SUM(t1.YtdReforecastQ1),0),
			ISNULL(SUM(t1.YtdReforecastQ2),0),
			ISNULL(SUM(t1.YtdReforecastQ3),0),
			ISNULL(SUM(t1.YtdVarianceQ0),0),
			ISNULL(SUM(t1.YtdVarianceQ1),0),
			ISNULL(SUM(t1.YtdVarianceQ2),0),
			ISNULL(SUM(t1.YtdVarianceQ3),0),
			ISNULL(SUM(t1.AnnualOriginalBudget),0),
			ISNULL(SUM(t1.AnnualReforecastQ1),0),
			ISNULL(SUM(t1.AnnualReforecastQ2),0),
			ISNULL(SUM(t1.AnnualReforecastQ3),0)

	From #DetailResult t1


	Where	t1.FeeOrExpense				= 'INCOME'
	AND		t1.MajorExpenseCategoryName = 'Fee Income'
	AND		t1.FeeAdjustmentCode		= 'FEEADJUST'
	Group By 
			t1.MinorExpenseCategoryName + '-' + t1.AllocationSubRegionName,
			t1.AllocationSubRegionName + ' Adjustment'
	END
	
ELSE IF @DisplayFeeAdjustmentsBy = 'ReportingEntity'
	BEGIN
	Insert Into #Result
	(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
	MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
	MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
	YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
	YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
	AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)
	
	Select 
			5 NumberOfSpacesToPad,
			t1.MinorExpenseCategoryName + '-' + RTRIM(t1.ReportingEntityName) GroupDisplayCode,
			RTRIM(t1.ReportingEntityName) + ' Adjustment',
			201 DisplayOrderNumber,
			ISNULL(SUM(t1.MtdActual),0),
			ISNULL(SUM(t1.MtdOriginalBudget),0),
			ISNULL(SUM(t1.MtdReforecastQ1),0),
			ISNULL(SUM(t1.MtdReforecastQ2),0),
			ISNULL(SUM(t1.MtdReforecastQ3),0),
			ISNULL(SUM(t1.MtdVarianceQ0),0),
			ISNULL(SUM(t1.MtdVarianceQ1),0),
			ISNULL(SUM(t1.MtdVarianceQ2),0),
			ISNULL(SUM(t1.MtdVarianceQ3),0),
			ISNULL(SUM(t1.YtdActual),0),
			ISNULL(SUM(t1.YtdOriginalBudget),0),
			ISNULL(SUM(t1.YtdReforecastQ1),0),
			ISNULL(SUM(t1.YtdReforecastQ2),0),
			ISNULL(SUM(t1.YtdReforecastQ3),0),
			ISNULL(SUM(t1.YtdVarianceQ0),0),
			ISNULL(SUM(t1.YtdVarianceQ1),0),
			ISNULL(SUM(t1.YtdVarianceQ2),0),
			ISNULL(SUM(t1.YtdVarianceQ3),0),
			ISNULL(SUM(t1.AnnualOriginalBudget),0),
			ISNULL(SUM(t1.AnnualReforecastQ1),0),
			ISNULL(SUM(t1.AnnualReforecastQ2),0),
			ISNULL(SUM(t1.AnnualReforecastQ3),0)

	From #DetailResult t1


	Where	t1.FeeOrExpense				= 'INCOME'
	AND		t1.MajorExpenseCategoryName = 'Fee Income'
	AND		t1.FeeAdjustmentCode		= 'FEEADJUST'
	
	Group By 
			t1.MinorExpenseCategoryName + '-' + RTRIM(t1.ReportingEntityName),
			t1.ReportingEntityName
	END


Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'TOTALOPERATINGREVENUE' GroupDisplayCode,
		'Total Operating Revenue',
		203 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0),
		ISNULL(SUM(t1.MtdOriginalBudget),0),
		ISNULL(SUM(t1.MtdReforecastQ1),0),
		ISNULL(SUM(t1.MtdReforecastQ2),0),
		ISNULL(SUM(t1.MtdReforecastQ3),0),
		ISNULL(SUM(t1.MtdVarianceQ0),0),
		ISNULL(SUM(t1.MtdVarianceQ1),0),
		ISNULL(SUM(t1.MtdVarianceQ2),0),
		ISNULL(SUM(t1.MtdVarianceQ3),0),
		ISNULL(SUM(t1.YtdActual),0),
		ISNULL(SUM(t1.YtdOriginalBudget),0),
		ISNULL(SUM(t1.YtdReforecastQ1),0),
		ISNULL(SUM(t1.YtdReforecastQ2),0),
		ISNULL(SUM(t1.YtdReforecastQ3),0),
		ISNULL(SUM(t1.YtdVarianceQ0),0),
		ISNULL(SUM(t1.YtdVarianceQ1),0),
		ISNULL(SUM(t1.YtdVarianceQ2),0),
		ISNULL(SUM(t1.YtdVarianceQ3),0),
		ISNULL(SUM(t1.AnnualOriginalBudget),0),
		ISNULL(SUM(t1.AnnualReforecastQ1),0),
		ISNULL(SUM(t1.AnnualReforecastQ2),0),
		ISNULL(SUM(t1.AnnualReforecastQ3),0)

From #DetailResult t1


Where	t1.FeeOrExpense				= 'INCOME'
AND		t1.MajorExpenseCategoryName = 'Fee Income'	

Insert Into #Result
(NumberOfSpacesToPad,GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
VALUES(0, 'OTHERREVENUE', 'Other Revenue',210)
	
	
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		gac.MinorCategoryName GroupDisplayCode,
		gac.MinorCategoryName,
		211 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0),
		ISNULL(SUM(t1.MtdOriginalBudget),0),
		ISNULL(SUM(t1.MtdReforecastQ1),0),
		ISNULL(SUM(t1.MtdReforecastQ2),0),
		ISNULL(SUM(t1.MtdReforecastQ3),0),
		ISNULL(SUM(t1.MtdVarianceQ0),0),
		ISNULL(SUM(t1.MtdVarianceQ1),0),
		ISNULL(SUM(t1.MtdVarianceQ2),0),
		ISNULL(SUM(t1.MtdVarianceQ3),0),
		ISNULL(SUM(t1.YtdActual),0),
		ISNULL(SUM(t1.YtdOriginalBudget),0),
		ISNULL(SUM(t1.YtdReforecastQ1),0),
		ISNULL(SUM(t1.YtdReforecastQ2),0),
		ISNULL(SUM(t1.YtdReforecastQ3),0),
		ISNULL(SUM(t1.YtdVarianceQ0),0),
		ISNULL(SUM(t1.YtdVarianceQ1),0),
		ISNULL(SUM(t1.YtdVarianceQ2),0),
		ISNULL(SUM(t1.YtdVarianceQ3),0),
		ISNULL(SUM(t1.AnnualOriginalBudget),0),
		ISNULL(SUM(t1.AnnualReforecastQ1),0),
		ISNULL(SUM(t1.AnnualReforecastQ2),0),
		ISNULL(SUM(t1.AnnualReforecastQ3),0)

From GlAccountCategory gac

			LEFT OUTER JOIN #DetailResult t1 ON gac.GlAccountCategoryKey = t1.GlAccountCategoryKey


Where	gac.FeeOrExpense		= 'INCOME'
AND		gac.MajorCategoryName	<> 'Fee Income'
AND		gac.TranslationSubTypeName	= @TranslationTypeName
Group By 
		gac.MinorCategoryName
	

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'TOTALOTHERREVENUE' GroupDisplayCode,
		'Total Other Revenue',
		212 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0),
		ISNULL(SUM(t1.MtdOriginalBudget),0),
		ISNULL(SUM(t1.MtdReforecastQ1),0),
		ISNULL(SUM(t1.MtdReforecastQ2),0),
		ISNULL(SUM(t1.MtdReforecastQ3),0),
		ISNULL(SUM(t1.MtdVarianceQ0),0),
		ISNULL(SUM(t1.MtdVarianceQ1),0),
		ISNULL(SUM(t1.MtdVarianceQ2),0),
		ISNULL(SUM(t1.MtdVarianceQ3),0),
		ISNULL(SUM(t1.YtdActual),0),
		ISNULL(SUM(t1.YtdOriginalBudget),0),
		ISNULL(SUM(t1.YtdReforecastQ1),0),
		ISNULL(SUM(t1.YtdReforecastQ2),0),
		ISNULL(SUM(t1.YtdReforecastQ3),0),
		ISNULL(SUM(t1.YtdVarianceQ0),0),
		ISNULL(SUM(t1.YtdVarianceQ1),0),
		ISNULL(SUM(t1.YtdVarianceQ2),0),
		ISNULL(SUM(t1.YtdVarianceQ3),0),
		ISNULL(SUM(t1.AnnualOriginalBudget),0),
		ISNULL(SUM(t1.AnnualReforecastQ1),0),
		ISNULL(SUM(t1.AnnualReforecastQ2),0),
		ISNULL(SUM(t1.AnnualReforecastQ3),0)

From #DetailResult t1


Where	t1.FeeOrExpense				= 'INCOME'
AND		t1.MajorExpenseCategoryName <> 'Fee Income'	


Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'TOTALREVENUE' GroupDisplayCode,
		'Total Revenue',
		220 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0),
		ISNULL(SUM(t1.MtdOriginalBudget),0),
		ISNULL(SUM(t1.MtdReforecastQ1),0),
		ISNULL(SUM(t1.MtdReforecastQ2),0),
		ISNULL(SUM(t1.MtdReforecastQ3),0),
		ISNULL(SUM(t1.MtdVarianceQ0),0),
		ISNULL(SUM(t1.MtdVarianceQ1),0),
		ISNULL(SUM(t1.MtdVarianceQ2),0),
		ISNULL(SUM(t1.MtdVarianceQ3),0),
		ISNULL(SUM(t1.YtdActual),0),
		ISNULL(SUM(t1.YtdOriginalBudget),0),
		ISNULL(SUM(t1.YtdReforecastQ1),0),
		ISNULL(SUM(t1.YtdReforecastQ2),0),
		ISNULL(SUM(t1.YtdReforecastQ3),0),
		ISNULL(SUM(t1.YtdVarianceQ0),0),
		ISNULL(SUM(t1.YtdVarianceQ1),0),
		ISNULL(SUM(t1.YtdVarianceQ2),0),
		ISNULL(SUM(t1.YtdVarianceQ3),0),
		ISNULL(SUM(t1.AnnualOriginalBudget),0),
		ISNULL(SUM(t1.AnnualReforecastQ1),0),
		ISNULL(SUM(t1.AnnualReforecastQ2),0),
		ISNULL(SUM(t1.AnnualReforecastQ3),0)

From #DetailResult t1
Where	t1.FeeOrExpense				= 'INCOME'

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'BLANK' GroupDisplayCode,
		'',
		230 DisplayOrderNumber


Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'EXPENSES' GroupDisplayCode,
		'EXPENSES',
		240 DisplayOrderNumber
		
		
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'PAYROLLEXPENSES' GroupDisplayCode,
		'Payroll Expenses',
		241 DisplayOrderNumber


		
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'Gross ' + t1.MajorExpenseCategoryName GroupDisplayCode,
		'Gross ' + t1.MajorExpenseCategoryName,
		242 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0) * -1,
		ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.YtdActual),0) * -1,
		ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

From #DetailResult t1
Where	t1.FeeOrExpense				= 'EXPENSE'
AND		t1.MajorExpenseCategoryName = 'Salaries/Taxes/Benefits'
AND		t1.ExpenseType				<> 'Overhead'
Group By 
		t1.MajorExpenseCategoryName
		
		
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'Reimbursed ' + t1.MajorExpenseCategoryName GroupDisplayCode,
		'Reimbursed ' + t1.MajorExpenseCategoryName,
		243 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0) * -1,
		ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.YtdActual),0) * -1,
		ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

From #DetailResult t1
Where	t1.FeeOrExpense				= 'EXPENSE'
AND		t1.MajorExpenseCategoryName = 'Salaries/Taxes/Benefits'
AND		t1.ReimbursableName			= 'Reimbursable'
AND		t1.ExpenseType				<> 'Overhead'
Group By 
		t1.MajorExpenseCategoryName	

		
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'Total Net ' + t1.MajorExpenseCategoryName GroupDisplayCode,
		'Total Net ' + t1.MajorExpenseCategoryName,
		244 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0) * -1,
		ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.YtdActual),0) * -1,
		ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

From #DetailResult t1
Where	t1.FeeOrExpense				= 'EXPENSE'
AND		t1.MajorExpenseCategoryName = 'Salaries/Taxes/Benefits'
AND		t1.ReimbursableName			= 'Not Reimbursable'
AND		t1.ExpenseType				<> 'Overhead'
Group By 
		t1.MajorExpenseCategoryName	
		
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'Payroll Reimbursement Rate' GroupDisplayCode,
		'% Recovery',
		245 DisplayOrderNumber,
		ISNULL(Reimbursed.MtdActual / CASE WHEN Gross.MtdActual = 0 THEN NULL ELSE Gross.MtdActual END,0),
		ISNULL(Reimbursed.MtdOriginalBudget / CASE WHEN Gross.MtdOriginalBudget = 0 THEN NULL ELSE Gross.MtdOriginalBudget END,0),
		ISNULL(Reimbursed.MtdReforecastQ1 / CASE WHEN Gross.MtdReforecastQ1 = 0 THEN NULL ELSE Gross.MtdReforecastQ1 END,0),
		ISNULL(Reimbursed.MtdReforecastQ2 / CASE WHEN Gross.MtdReforecastQ2 = 0 THEN NULL ELSE Gross.MtdReforecastQ2 END,0),
		ISNULL(Reimbursed.MtdReforecastQ3 / CASE WHEN Gross.MtdReforecastQ3 = 0 THEN NULL ELSE Gross.MtdReforecastQ3 END,0),
		0,
		0,
		0,
		0,
		ISNULL(Reimbursed.YtdActual / CASE WHEN Gross.YtdActual = 0 THEN NULL ELSE Gross.YtdActual END,0),
		ISNULL(Reimbursed.YtdOriginalBudget / CASE WHEN Gross.YtdOriginalBudget = 0 THEN NULL ELSE Gross.YtdOriginalBudget END,0),
		ISNULL(Reimbursed.YtdReforecastQ1 / CASE WHEN Gross.YtdReforecastQ1 = 0 THEN NULL ELSE Gross.YtdReforecastQ1 END,0),
		ISNULL(Reimbursed.YtdReforecastQ2 / CASE WHEN Gross.YtdReforecastQ2 = 0 THEN NULL ELSE Gross.YtdReforecastQ2 END,0),
		ISNULL(Reimbursed.YtdReforecastQ3 / CASE WHEN Gross.YtdReforecastQ3 = 0 THEN NULL ELSE Gross.YtdReforecastQ3 END,0),
		0,
		0,
		0,
		0,
		ISNULL(Reimbursed.AnnualOriginalBudget / CASE WHEN Gross.AnnualOriginalBudget = 0 THEN NULL ELSE Gross.AnnualOriginalBudget END,0),
		ISNULL(Reimbursed.AnnualReforecastQ1 / CASE WHEN Gross.AnnualReforecastQ1 = 0 THEN NULL ELSE Gross.AnnualReforecastQ1 END,0),
		ISNULL(Reimbursed.AnnualReforecastQ2 / CASE WHEN Gross.AnnualReforecastQ2 = 0 THEN NULL ELSE Gross.AnnualReforecastQ2 END,0),
		ISNULL(Reimbursed.AnnualReforecastQ3 / CASE WHEN Gross.AnnualReforecastQ3 = 0 THEN NULL ELSE Gross.AnnualReforecastQ3 END,0)
From 
	(
		Select 
					ISNULL(SUM(t1.MtdActual),0) MtdActual,
					ISNULL(SUM(t1.MtdOriginalBudget),0) MtdOriginalBudget,
					ISNULL(SUM(t1.MtdReforecastQ1),0) MtdReforecastQ1,
					ISNULL(SUM(t1.MtdReforecastQ2),0) MtdReforecastQ2,
					ISNULL(SUM(t1.MtdReforecastQ3),0) MtdReforecastQ3,
					ISNULL(SUM(t1.MtdVarianceQ0),0) MtdVarianceQ0,
					ISNULL(SUM(t1.MtdVarianceQ1),0) MtdVarianceQ1,
					ISNULL(SUM(t1.MtdVarianceQ2),0) MtdVarianceQ2,
					ISNULL(SUM(t1.MtdVarianceQ3),0) MtdVarianceQ3,
					ISNULL(SUM(t1.YtdActual),0) YtdActual,
					ISNULL(SUM(t1.YtdOriginalBudget),0) YtdOriginalBudget,
					ISNULL(SUM(t1.YtdReforecastQ1),0) YtdReforecastQ1,
					ISNULL(SUM(t1.YtdReforecastQ2),0) YtdReforecastQ2,
					ISNULL(SUM(t1.YtdReforecastQ3),0) YtdReforecastQ3,
					ISNULL(SUM(t1.YtdVarianceQ0),0) YtdVarianceQ0,
					ISNULL(SUM(t1.YtdVarianceQ1),0) YtdVarianceQ1,
					ISNULL(SUM(t1.YtdVarianceQ2),0) YtdVarianceQ2,
					ISNULL(SUM(t1.YtdVarianceQ3),0) YtdVarianceQ3,
					ISNULL(SUM(t1.AnnualOriginalBudget),0) AnnualOriginalBudget,
					ISNULL(SUM(t1.AnnualReforecastQ1),0) AnnualReforecastQ1,
					ISNULL(SUM(t1.AnnualReforecastQ2),0) AnnualReforecastQ2,
					ISNULL(SUM(t1.AnnualReforecastQ3),0) AnnualReforecastQ3

		From #DetailResult t1
		Where	t1.FeeOrExpense				= 'EXPENSE'
		AND		t1.MajorExpenseCategoryName = 'Salaries/Taxes/Benefits'
		AND		t1.ReimbursableName			= 'Reimbursable'
		AND		t1.ExpenseType				<> 'Overhead'
		) Reimbursed
		CROSS JOIN 
			(
				Select 
					ISNULL(SUM(t1.MtdActual),0) MtdActual,
					ISNULL(SUM(t1.MtdOriginalBudget),0) MtdOriginalBudget,
					ISNULL(SUM(t1.MtdReforecastQ1),0) MtdReforecastQ1,
					ISNULL(SUM(t1.MtdReforecastQ2),0) MtdReforecastQ2,
					ISNULL(SUM(t1.MtdReforecastQ3),0) MtdReforecastQ3,
					ISNULL(SUM(t1.MtdVarianceQ0),0) MtdVarianceQ0,
					ISNULL(SUM(t1.MtdVarianceQ1),0) MtdVarianceQ1,
					ISNULL(SUM(t1.MtdVarianceQ2),0) MtdVarianceQ2,
					ISNULL(SUM(t1.MtdVarianceQ3),0) MtdVarianceQ3,
					ISNULL(SUM(t1.YtdActual),0) YtdActual,
					ISNULL(SUM(t1.YtdOriginalBudget),0) YtdOriginalBudget,
					ISNULL(SUM(t1.YtdReforecastQ1),0) YtdReforecastQ1,
					ISNULL(SUM(t1.YtdReforecastQ2),0) YtdReforecastQ2,
					ISNULL(SUM(t1.YtdReforecastQ3),0) YtdReforecastQ3,
					ISNULL(SUM(t1.YtdVarianceQ0),0) YtdVarianceQ0,
					ISNULL(SUM(t1.YtdVarianceQ1),0) YtdVarianceQ1,
					ISNULL(SUM(t1.YtdVarianceQ2),0) YtdVarianceQ2,
					ISNULL(SUM(t1.YtdVarianceQ3),0) YtdVarianceQ3,
					ISNULL(SUM(t1.AnnualOriginalBudget),0) AnnualOriginalBudget,
					ISNULL(SUM(t1.AnnualReforecastQ1),0) AnnualReforecastQ1,
					ISNULL(SUM(t1.AnnualReforecastQ2),0) AnnualReforecastQ2,
					ISNULL(SUM(t1.AnnualReforecastQ3),0) AnnualReforecastQ3

				From #DetailResult t1
				Where	t1.FeeOrExpense				= 'EXPENSE'
				AND		t1.MajorExpenseCategoryName = 'Salaries/Taxes/Benefits'
				AND		t1.ExpenseType				<> 'Overhead'
			
			) Gross 
	
--Calculate the Payroll Reimbursement Rate Variance Columns
Update 		#Result
Set			
			MtdVarianceQ0 = (MtdActual - MtdOriginalBudget) * -1,
			MtdVarianceQ1 = (MtdActual - MtdReforecastQ1) * -1,
			MtdVarianceQ2 = (MtdActual - MtdReforecastQ2) * -1,
			MtdVarianceQ3 = (MtdActual - MtdReforecastQ3) * -1,
			YtdVarianceQ0 = (YtdActual - YtdOriginalBudget) * -1,
			YtdVarianceQ1 = (YtdActual - YtdReforecastQ1) * -1,
			YtdVarianceQ2 = (YtdActual - YtdReforecastQ2) * -1,
			YtdVarianceQ3 = (YtdActual - YtdReforecastQ3) * -1

Where	GroupDisplayCode = 'Payroll Reimbursement Rate'
AND		DisplayOrderNumber = 245	

	
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'BLANK' GroupDisplayCode,
		'',
		250 DisplayOrderNumber
		
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'OVERHEADEXPENSE' GroupDisplayCode,
		'Overhead  Expenses',
		260 DisplayOrderNumber

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'GROSSOVERHEADEXPENSE' GroupDisplayCode,
		'Gross Overhead  Expenses',
		261 DisplayOrderNumber


IF @DisplayOverheadBy = 'Unallocated'
	BEGIN

	Insert Into #Result
	(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
	MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
	MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
	YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
	YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
	AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

	Select 
			0 NumberOfSpacesToPad,
			gac.MajorCategoryName GroupDisplayCode,
			gac.MajorCategoryName,
			262 DisplayOrderNumber,
			ISNULL(SUM(t1.MtdActual),0) * -1,
			ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.YtdActual),0) * -1,
			ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

	From GlAccountCategory gac

				LEFT OUTER JOIN (Select * 
				From #DetailResult t1 
				Where t1.ExpenseType = 'Overhead') t1 ON gac.GlAccountCategoryKey = t1.GlAccountCategoryKey
				
	Where	gac.FeeOrExpense			= 'Expense'
	AND		gac.TranslationSubTypeName	= @TranslationTypeName
	AND		gac.AccountSubTypeName		= 'Overhead'
	Group By 
			gac.MajorCategoryName	
				
	END
ELSE
	BEGIN

	Insert Into #Result
	(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
	MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
	MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
	YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
	YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
	AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

	Select 
			0 NumberOfSpacesToPad,
			gac.MajorCategoryName GroupDisplayCode,
			gac.MajorCategoryName,
			262 DisplayOrderNumber,
			ISNULL(SUM(t1.MtdActual),0) * -1,
			ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.YtdActual),0) * -1,
			ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

	From GlAccountCategory gac

				INNER JOIN (Select * 
				From #DetailResult t1 
				Where t1.ExpenseType = 'Overhead') t1 ON gac.GlAccountCategoryKey = t1.GlAccountCategoryKey
				
	Where	gac.FeeOrExpense		= 'Expense'
	AND		gac.TranslationSubTypeName	= @TranslationTypeName
	AND		gac.AccountSubTypeName		= 'Overhead'
	Group By 
			gac.MajorCategoryName	
	END
	
IF @DisplayOverheadBy = 'Unallocated'
	BEGIN
	Insert Into #Result
	(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
	MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
	MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
	YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
	YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
	AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

	Select 
			0 NumberOfSpacesToPad,
			'Total Gross Overhead Expense' GroupDisplayCode,
			'Total Gross Overhead Expense',
			263 DisplayOrderNumber,
			ISNULL(SUM(t1.MtdActual),0) * -1,
			ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.YtdActual),0) * -1,
			ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

	From #DetailResult t1
	Where	t1.FeeOrExpense		= 'Expense'
	AND		t1.ExpenseType		= 'Overhead'

END

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'REIMBERSEDOVERHEADEXPENSE' GroupDisplayCode,
		'Reimbursed Overhead  Expenses',
		270 DisplayOrderNumber

IF @DisplayOverheadBy = 'Unallocated'
	BEGIN
		
	Insert Into #Result
	(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
	MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
	MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
	YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
	YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
	AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

	Select 
			0 NumberOfSpacesToPad,
			gac.MajorCategoryName GroupDisplayCode,
			gac.MajorCategoryName,
			271 DisplayOrderNumber,
			ISNULL(SUM(t1.MtdActual),0) * -1,
			ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.YtdActual),0) * -1,
			ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

	From GlAccountCategory gac

				LEFT OUTER JOIN (Select * 
								From #DetailResult t1
								Where	t1.ExpenseType		= 'Overhead'
								AND		t1.ReimbursableName	= 'Reimbursable'
								) t1
								 ON gac.GlAccountCategoryKey = t1.GlAccountCategoryKey
				
	Where	gac.FeeOrExpense		= 'Expense'
	AND		gac.TranslationSubTypeName	= @TranslationTypeName
	AND		gac.AccountSubTypeName		= 'Overhead'
	Group By 
			gac.MajorCategoryName	
	END
ELSE
	BEGIN
	Insert Into #Result
	(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
	MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
	MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
	YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
	YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
	AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

	Select 
			0 NumberOfSpacesToPad,
			gac.MajorCategoryName GroupDisplayCode,
			gac.MajorCategoryName,
			271 DisplayOrderNumber,
			ISNULL(SUM(t1.MtdActual),0) * -1,
			ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.YtdActual),0) * -1,
			ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

	From GlAccountCategory gac

				INNER JOIN (Select * 
								From #DetailResult t1
								Where	t1.ExpenseType		= 'Overhead'
								AND		t1.ReimbursableName	= 'Reimbursable'
								) t1
								 ON gac.GlAccountCategoryKey = t1.GlAccountCategoryKey
				
	Where	gac.FeeOrExpense		= 'Expense'
	AND		gac.TranslationSubTypeName	= @TranslationTypeName
	AND		gac.AccountSubTypeName		= 'Overhead'
	Group By 
			gac.MajorCategoryName	
	END
				
IF @DisplayOverheadBy = 'Unallocated'
	BEGIN

	Insert Into #Result
	(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
	MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
	MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
	YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
	YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
	AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

	Select 
			0 NumberOfSpacesToPad,
			'Total Reimbursed Overhead Expense' GroupDisplayCode,
			'Total Reimbursed Overhead Expense',
			272 DisplayOrderNumber,
			ISNULL(SUM(t1.MtdActual),0) * -1,
			ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.YtdActual),0) * -1,
			ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

	From #DetailResult t1
	Where	t1.FeeOrExpense		= 'Expense'
	AND		t1.ExpenseType		= 'Overhead'
	AND		ReimbursableName	= 'Reimbursable'
END
		
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'Total Net Overhead Expense' GroupDisplayCode,
		'Total Net Overhead Expense',
		273 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0) * -1,
		ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.YtdActual),0) * -1,
		ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

From #DetailResult t1
Where	t1.FeeOrExpense		= 'Expense'
AND		t1.ExpenseType		= 'Overhead'
AND		t1.ReimbursableName = 'Not Reimbursable'


Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'Overhead Reimbursement Rate' GroupDisplayCode,
		'% Recovery',
		274 DisplayOrderNumber,
		ISNULL(Reimbursed.MtdActual / CASE WHEN Gross.MtdActual = 0 THEN NULL ELSE Gross.MtdActual END,0),
		ISNULL(Reimbursed.MtdOriginalBudget / CASE WHEN Gross.MtdOriginalBudget = 0 THEN NULL ELSE Gross.MtdOriginalBudget END,0),
		ISNULL(Reimbursed.MtdReforecastQ1 / CASE WHEN Gross.MtdReforecastQ1 = 0 THEN NULL ELSE Gross.MtdReforecastQ1 END,0),
		ISNULL(Reimbursed.MtdReforecastQ2 / CASE WHEN Gross.MtdReforecastQ2 = 0 THEN NULL ELSE Gross.MtdReforecastQ2 END,0),
		ISNULL(Reimbursed.MtdReforecastQ3 / CASE WHEN Gross.MtdReforecastQ3 = 0 THEN NULL ELSE Gross.MtdReforecastQ3 END,0),
		0,
		0,
		0,
		0,
		ISNULL(Reimbursed.YtdActual / CASE WHEN Gross.YtdActual = 0 THEN NULL ELSE Gross.YtdActual END,0),
		ISNULL(Reimbursed.YtdOriginalBudget / CASE WHEN Gross.YtdOriginalBudget = 0 THEN NULL ELSE Gross.YtdOriginalBudget END,0),
		ISNULL(Reimbursed.YtdReforecastQ1 / CASE WHEN Gross.YtdReforecastQ1 = 0 THEN NULL ELSE Gross.YtdReforecastQ1 END,0),
		ISNULL(Reimbursed.YtdReforecastQ2 / CASE WHEN Gross.YtdReforecastQ2 = 0 THEN NULL ELSE Gross.YtdReforecastQ2 END,0),
		ISNULL(Reimbursed.YtdReforecastQ3 / CASE WHEN Gross.YtdReforecastQ3 = 0 THEN NULL ELSE Gross.YtdReforecastQ3 END,0),
		0,
		0,
		0,
		0,
		ISNULL(Reimbursed.AnnualOriginalBudget / CASE WHEN Gross.AnnualOriginalBudget = 0 THEN NULL ELSE Gross.AnnualOriginalBudget END,0),
		ISNULL(Reimbursed.AnnualReforecastQ1 / CASE WHEN Gross.AnnualReforecastQ1 = 0 THEN NULL ELSE Gross.AnnualReforecastQ1 END,0),
		ISNULL(Reimbursed.AnnualReforecastQ2 / CASE WHEN Gross.AnnualReforecastQ2 = 0 THEN NULL ELSE Gross.AnnualReforecastQ2 END,0),
		ISNULL(Reimbursed.AnnualReforecastQ3 / CASE WHEN Gross.AnnualReforecastQ3 = 0 THEN NULL ELSE Gross.AnnualReforecastQ3 END,0)

From 
	(
		Select 
					ISNULL(SUM(t1.MtdActual),0) MtdActual,
					ISNULL(SUM(t1.MtdOriginalBudget),0) MtdOriginalBudget,
					ISNULL(SUM(t1.MtdReforecastQ1),0) MtdReforecastQ1,
					ISNULL(SUM(t1.MtdReforecastQ2),0) MtdReforecastQ2,
					ISNULL(SUM(t1.MtdReforecastQ3),0) MtdReforecastQ3,
					ISNULL(SUM(t1.MtdVarianceQ0),0) MtdVarianceQ0,
					ISNULL(SUM(t1.MtdVarianceQ1),0) MtdVarianceQ1,
					ISNULL(SUM(t1.MtdVarianceQ2),0) MtdVarianceQ2,
					ISNULL(SUM(t1.MtdVarianceQ3),0) MtdVarianceQ3,
					ISNULL(SUM(t1.YtdActual),0) YtdActual,
					ISNULL(SUM(t1.YtdOriginalBudget),0) YtdOriginalBudget,
					ISNULL(SUM(t1.YtdReforecastQ1),0) YtdReforecastQ1,
					ISNULL(SUM(t1.YtdReforecastQ2),0) YtdReforecastQ2,
					ISNULL(SUM(t1.YtdReforecastQ3),0) YtdReforecastQ3,
					ISNULL(SUM(t1.YtdVarianceQ0),0) YtdVarianceQ0,
					ISNULL(SUM(t1.YtdVarianceQ1),0) YtdVarianceQ1,
					ISNULL(SUM(t1.YtdVarianceQ2),0) YtdVarianceQ2,
					ISNULL(SUM(t1.YtdVarianceQ3),0) YtdVarianceQ3,
					ISNULL(SUM(t1.AnnualOriginalBudget),0) AnnualOriginalBudget,
					ISNULL(SUM(t1.AnnualReforecastQ1),0) AnnualReforecastQ1,
					ISNULL(SUM(t1.AnnualReforecastQ2),0) AnnualReforecastQ2,
					ISNULL(SUM(t1.AnnualReforecastQ3),0) AnnualReforecastQ3

		From #DetailResult t1
		Where	t1.FeeOrExpense		= 'Expense'
		AND		t1.ExpenseType		= 'Overhead'
		AND		t1.ReimbursableName	= 'Reimbursable'
		) Reimbursed
		CROSS JOIN 
			(
				Select 
					ISNULL(SUM(t1.MtdActual),0) MtdActual,
					ISNULL(SUM(t1.MtdOriginalBudget),0) MtdOriginalBudget,
					ISNULL(SUM(t1.MtdReforecastQ1),0) MtdReforecastQ1,
					ISNULL(SUM(t1.MtdReforecastQ2),0) MtdReforecastQ2,
					ISNULL(SUM(t1.MtdReforecastQ3),0) MtdReforecastQ3,
					ISNULL(SUM(t1.MtdVarianceQ0),0) MtdVarianceQ0,
					ISNULL(SUM(t1.MtdVarianceQ1),0) MtdVarianceQ1,
					ISNULL(SUM(t1.MtdVarianceQ2),0) MtdVarianceQ2,
					ISNULL(SUM(t1.MtdVarianceQ3),0) MtdVarianceQ3,
					ISNULL(SUM(t1.YtdActual),0) YtdActual,
					ISNULL(SUM(t1.YtdOriginalBudget),0) YtdOriginalBudget,
					ISNULL(SUM(t1.YtdReforecastQ1),0) YtdReforecastQ1,
					ISNULL(SUM(t1.YtdReforecastQ2),0) YtdReforecastQ2,
					ISNULL(SUM(t1.YtdReforecastQ3),0) YtdReforecastQ3,
					ISNULL(SUM(t1.YtdVarianceQ0),0) YtdVarianceQ0,
					ISNULL(SUM(t1.YtdVarianceQ1),0) YtdVarianceQ1,
					ISNULL(SUM(t1.YtdVarianceQ2),0) YtdVarianceQ2,
					ISNULL(SUM(t1.YtdVarianceQ3),0) YtdVarianceQ3,
					ISNULL(SUM(t1.AnnualOriginalBudget),0) AnnualOriginalBudget,
					ISNULL(SUM(t1.AnnualReforecastQ1),0) AnnualReforecastQ1,
					ISNULL(SUM(t1.AnnualReforecastQ2),0) AnnualReforecastQ2,
					ISNULL(SUM(t1.AnnualReforecastQ3),0) AnnualReforecastQ3

				From #DetailResult t1
				Where	t1.FeeOrExpense		= 'Expense'
				AND		t1.ExpenseType		= 'Overhead'
			) Gross 

--Calculate the Overhead Reimbursement Rate Variance Columns
Update 		#Result
Set			
			MtdVarianceQ0 = (MtdActual - MtdOriginalBudget) * -1,
			MtdVarianceQ1 = (MtdActual - MtdReforecastQ1) * -1,
			MtdVarianceQ2 = (MtdActual - MtdReforecastQ2) * -1,
			MtdVarianceQ3 = (MtdActual - MtdReforecastQ3) * -1,
			YtdVarianceQ0 = (YtdActual - YtdOriginalBudget) * -1,
			YtdVarianceQ1 = (YtdActual - YtdReforecastQ1) * -1,
			YtdVarianceQ2 = (YtdActual - YtdReforecastQ2) * -1,
			YtdVarianceQ3 = (YtdActual - YtdReforecastQ3) * -1

Where	GroupDisplayCode = 'Overhead Reimbursement Rate'
AND		DisplayOrderNumber = 274

	
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'BLANK' GroupDisplayCode,
		'',
		280 DisplayOrderNumber
		
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'NONPAYROLLEXPENSE' GroupDisplayCode,
		'Non-Payroll Expenses',
		290 DisplayOrderNumber

IF @IncludeGrossNonPayrollExpenses = 1
	BEGIN
	
	Insert Into #Result
	(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
	Select 
		0 NumberOfSpacesToPad,
		'GROSSNONPAYROLLEXPENSE' GroupDisplayCode,
		'Gross Non-Payroll  Expenses',
		291 DisplayOrderNumber

	Insert Into #Result
	(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
	MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
	MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
	YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
	YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
	AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

	Select 
			0 NumberOfSpacesToPad,
			gac.MajorCategoryName GroupDisplayCode,
			gac.MajorCategoryName,
			292 DisplayOrderNumber,
			ISNULL(SUM(t1.MtdActual),0) * -1,
			ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.YtdActual),0) * -1,
			ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

	From GlAccountCategory gac

			LEFT OUTER JOIN (Select *
							From	#DetailResult t1
							Where	t1.ExpenseType		= 'Non-Payroll'
							) t1 ON gac.GlAccountCategoryKey = t1.GlAccountCategoryKey
			
	Where	gac.FeeOrExpense		= 'Expense'
	AND		gac.TranslationSubTypeName	= @TranslationTypeName
	AND		gac.AccountSubTypeName		= 'Non-Payroll'
	Group By 
			gac.MajorCategoryName	
					

	Insert Into #Result
	(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
	MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
	MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
	YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
	YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
	AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

	Select 
			0 NumberOfSpacesToPad,
			'Total Gross Non-Payroll Expense' GroupDisplayCode,
			'Total Gross Non-Payroll Expense',
			293 DisplayOrderNumber,
			ISNULL(SUM(t1.MtdActual),0) * -1,
			ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.YtdActual),0) * -1,
			ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
			ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
			ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
			ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
			ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

	From #DetailResult t1
	Where	t1.FeeOrExpense		= 'Expense'
	AND		t1.ExpenseType		= 'Non-Payroll'

	END


Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
	0 NumberOfSpacesToPad,
	'NETNONPAYROLLEXPENSE' GroupDisplayCode,
	'Net Non-Payroll  Expenses',
	301 DisplayOrderNumber

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		gac.MajorCategoryName GroupDisplayCode,
		gac.MajorCategoryName,
		302 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0) * -1,
		ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.YtdActual),0) * -1,
		ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

From GlAccountCategory gac

			LEFT OUTER JOIN (Select * 
							From	#DetailResult t1
							Where
									t1.ExpenseType		= 'Non-Payroll'
							AND		t1.ReimbursableName = 'Not Reimbursable'

							) t1 ON gac.GlAccountCategoryKey = t1.GlAccountCategoryKey
			
Where	gac.FeeOrExpense			= 'Expense'
AND		gac.TranslationSubTypeName	= @TranslationTypeName
AND		gac.AccountSubTypeName		= 'Non-Payroll'
Group By 
		gac.MajorCategoryName	
				

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'Total Net Non-Payroll Expense' GroupDisplayCode,
		'Total Net Non-Payroll Expense',
		303 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0) * -1,
		ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.YtdActual),0) * -1,
		ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

From #DetailResult t1
Where	t1.FeeOrExpense		= 'Expense'
AND		t1.ExpenseType		= 'Non-Payroll'
AND		t1.ReimbursableName = 'Not Reimbursable'



Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'BLANK' GroupDisplayCode,
		'',
		310 DisplayOrderNumber
		
Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'TOTALNETEXPENSE' GroupDisplayCode,
		'Total Net Expenses',
		320 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0) * -1,
		ISNULL(SUM(t1.MtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.MtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.MtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.YtdActual),0) * -1,
		ISNULL(SUM(t1.YtdOriginalBudget),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ1),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ2),0) * -1,
		ISNULL(SUM(t1.YtdReforecastQ3),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ0),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ1),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ2),0) * -1,
		ISNULL(SUM(t1.YtdVarianceQ3),0) * -1,
		ISNULL(SUM(t1.AnnualOriginalBudget),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ1),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ2),0) * -1,
		ISNULL(SUM(t1.AnnualReforecastQ3),0) * -1

From #DetailResult t1
Where	t1.FeeOrExpense		= 'Expense'
AND		t1.ReimbursableName = 'Not Reimbursable'

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'BLANK' GroupDisplayCode,
		'',
		321 DisplayOrderNumber

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)
Select 
		0 NumberOfSpacesToPad,
		'PROFIT' GroupDisplayCode,
		'PROFIT',
		330 DisplayOrderNumber,
		(INC.MtdActual + EP.MtdActual) AS MtdActual,
		(INC.MtdOriginalBudget + EP.MtdOriginalBudget) AS MtdOriginalBudget,
		(INC.MtdReforecastQ1 + EP.MtdReforecastQ1) AS MtdReforecastQ1,
		(INC.MtdReforecastQ2 + EP.MtdReforecastQ2) AS MtdReforecastQ2,
		(INC.MtdReforecastQ3 + EP.MtdReforecastQ3) AS MtdReforecastQ3,
		(INC.MtdVarianceQ0 + EP.MtdVarianceQ0) AS MtdVarianceQ0,
		(INC.MtdVarianceQ1 + EP.MtdVarianceQ1) AS MtdVarianceQ1,
		(INC.MtdVarianceQ2 + EP.MtdVarianceQ2) AS MtdVarianceQ2,
		(INC.MtdVarianceQ3 + EP.MtdVarianceQ3) AS MtdVarianceQ3,
		(INC.YtdActual + EP.YtdActual) AS YtdActual,
		(INC.YtdOriginalBudget + EP.YtdOriginalBudget) AS YtdOriginalBudget,
		(INC.YtdReforecastQ1 + EP.YtdReforecastQ1) AS YtdReforecastQ1,
		(INC.YtdReforecastQ2 + EP.YtdReforecastQ2) AS YtdReforecastQ2,
		(INC.YtdReforecastQ3 + EP.YtdReforecastQ3) AS YtdReforecastQ3,
		(INC.YtdVarianceQ0 + EP.YtdVarianceQ0) AS YtdVarianceQ0,
		(INC.YtdVarianceQ1 + EP.YtdVarianceQ1) AS YtdVarianceQ1,
		(INC.YtdVarianceQ2 + EP.YtdVarianceQ2) AS YtdVarianceQ2,
		(INC.YtdVarianceQ3 + EP.YtdVarianceQ3) AS YtdVarianceQ3,
		(INC.AnnualOriginalBudget + EP.AnnualOriginalBudget) AS AnnualOriginalBudget,
		(INC.AnnualReforecastQ1 + EP.AnnualReforecastQ1) AS AnnualReforecastQ1,
		(INC.AnnualReforecastQ2 + EP.AnnualReforecastQ2) AS AnnualReforecastQ2,
		(INC.AnnualReforecastQ3 + EP.AnnualReforecastQ3) AS AnnualReforecastQ3
		
		
FROM	(
		Select 
				ISNULL(SUM(t1.MtdActual),0) MtdActual,
				ISNULL(SUM(t1.MtdOriginalBudget),0) MtdOriginalBudget,
				ISNULL(SUM(t1.MtdReforecastQ1),0) MtdReforecastQ1,
				ISNULL(SUM(t1.MtdReforecastQ2),0) MtdReforecastQ2,
				ISNULL(SUM(t1.MtdReforecastQ3),0) MtdReforecastQ3,
				ISNULL(SUM(t1.MtdVarianceQ0),0) MtdVarianceQ0,
				ISNULL(SUM(t1.MtdVarianceQ1),0) MtdVarianceQ1,
				ISNULL(SUM(t1.MtdVarianceQ2),0) MtdVarianceQ2,
				ISNULL(SUM(t1.MtdVarianceQ3),0) MtdVarianceQ3,
				ISNULL(SUM(t1.YtdActual),0) YtdActual,
				ISNULL(SUM(t1.YtdOriginalBudget),0) YtdOriginalBudget,
				ISNULL(SUM(t1.YtdReforecastQ1),0) YtdReforecastQ1,
				ISNULL(SUM(t1.YtdReforecastQ2),0) YtdReforecastQ2,
				ISNULL(SUM(t1.YtdReforecastQ3),0) YtdReforecastQ3,
				ISNULL(SUM(t1.YtdVarianceQ0),0) YtdVarianceQ0,
				ISNULL(SUM(t1.YtdVarianceQ1),0) YtdVarianceQ1,
				ISNULL(SUM(t1.YtdVarianceQ2),0) YtdVarianceQ2,
				ISNULL(SUM(t1.YtdVarianceQ3),0) YtdVarianceQ3,
				ISNULL(SUM(t1.AnnualOriginalBudget),0) AnnualOriginalBudget,
				ISNULL(SUM(t1.AnnualReforecastQ1),0) AnnualReforecastQ1,
				ISNULL(SUM(t1.AnnualReforecastQ2),0) AnnualReforecastQ2,
				ISNULL(SUM(t1.AnnualReforecastQ3),0) AnnualReforecastQ3

		From #DetailResult t1
		Where	t1.FeeOrExpense				= 'INCOME'
		) INC
		CROSS JOIN (
		Select 
				ISNULL(SUM(t1.MtdActual),0) MtdActual,
				ISNULL(SUM(t1.MtdOriginalBudget),0) MtdOriginalBudget,
				ISNULL(SUM(t1.MtdReforecastQ1),0) MtdReforecastQ1,
				ISNULL(SUM(t1.MtdReforecastQ2),0) MtdReforecastQ2,
				ISNULL(SUM(t1.MtdReforecastQ3),0) MtdReforecastQ3,
				ISNULL(SUM(t1.MtdVarianceQ0),0) MtdVarianceQ0,
				ISNULL(SUM(t1.MtdVarianceQ1),0) MtdVarianceQ1,
				ISNULL(SUM(t1.MtdVarianceQ2),0) MtdVarianceQ2,
				ISNULL(SUM(t1.MtdVarianceQ3),0) MtdVarianceQ3,
				ISNULL(SUM(t1.YtdActual),0) YtdActual,
				ISNULL(SUM(t1.YtdOriginalBudget),0) YtdOriginalBudget,
				ISNULL(SUM(t1.YtdReforecastQ1),0) YtdReforecastQ1,
				ISNULL(SUM(t1.YtdReforecastQ2),0) YtdReforecastQ2,
				ISNULL(SUM(t1.YtdReforecastQ3),0) YtdReforecastQ3,
				ISNULL(SUM(t1.YtdVarianceQ0),0) YtdVarianceQ0,
				ISNULL(SUM(t1.YtdVarianceQ1),0) YtdVarianceQ1,
				ISNULL(SUM(t1.YtdVarianceQ2),0) YtdVarianceQ2,
				ISNULL(SUM(t1.YtdVarianceQ3),0) YtdVarianceQ3,
				ISNULL(SUM(t1.AnnualOriginalBudget),0) AnnualOriginalBudget,
				ISNULL(SUM(t1.AnnualReforecastQ1),0) AnnualReforecastQ1,
				ISNULL(SUM(t1.AnnualReforecastQ2),0) AnnualReforecastQ2,
				ISNULL(SUM(t1.AnnualReforecastQ3),0) AnnualReforecastQ3

			From #DetailResult t1
			Where	t1.FeeOrExpense		= 'Expense'
			AND		t1.ReimbursableName = 'Not Reimbursable'
		) EP


Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)
Select 
		0 NumberOfSpacesToPad,
		'PROFITMARGIN' GroupDisplayCode,
		'Profit Margin (Profit / Total Revenue)',
		331 DisplayOrderNumber,
		ISNULL(((INC.MtdActual + EP.MtdActual) / CASE WHEN INC.MtdActual <> 0 THEN INC.MtdActual ELSE NULL END),0) AS MtdActual,
		ISNULL(((INC.MtdOriginalBudget + EP.MtdOriginalBudget) / CASE WHEN INC.MtdOriginalBudget <> 0 THEN INC.MtdOriginalBudget ELSE NULL END),0) AS MtdOriginalBudget,
		ISNULL(((INC.MtdReforecastQ1 + EP.MtdReforecastQ1) / CASE WHEN INC.MtdReforecastQ1 <> 0 THEN INC.MtdReforecastQ1 ELSE NULL END),0) AS MtdReforecastQ1,
		ISNULL(((INC.MtdReforecastQ2 + EP.MtdReforecastQ2) / CASE WHEN INC.MtdReforecastQ2 <> 0 THEN INC.MtdReforecastQ2 ELSE NULL END),0) AS MtdReforecastQ2,
		ISNULL(((INC.MtdReforecastQ3 + EP.MtdReforecastQ3) / CASE WHEN INC.MtdReforecastQ3 <> 0 THEN INC.MtdReforecastQ3 ELSE NULL END),0) AS MtdReforecastQ3,
		0 AS MtdVarianceQ0, --Done Below for it use these results to sub calculate
		0 AS MtdVarianceQ1, --Done Below for it use these results to sub calculate
		0 AS MtdVarianceQ2, --Done Below for it use these results to sub calculate
		0 AS MtdVarianceQ3, --Done Below for it use these results to sub calculate
		ISNULL(((INC.YtdActual + EP.YtdActual) / CASE WHEN INC.YtdActual <> 0 THEN INC.YtdActual ELSE NULL END),0) AS YtdActual,
		ISNULL(((INC.YtdOriginalBudget + EP.YtdOriginalBudget) / CASE WHEN INC.YtdOriginalBudget <> 0 THEN INC.YtdOriginalBudget ELSE NULL END),0) AS YtdOriginalBudget,
		ISNULL(((INC.YtdReforecastQ1 + EP.YtdReforecastQ1) / CASE WHEN INC.YtdReforecastQ1 <> 0 THEN INC.YtdReforecastQ1 ELSE NULL END),0) AS YtdReforecastQ1,
		ISNULL(((INC.YtdReforecastQ2 + EP.YtdReforecastQ2) / CASE WHEN INC.YtdReforecastQ2 <> 0 THEN INC.YtdReforecastQ2 ELSE NULL END),0) AS YtdReforecastQ2,
		ISNULL(((INC.YtdReforecastQ3 + EP.YtdReforecastQ3) / CASE WHEN INC.YtdReforecastQ3 <> 0 THEN INC.YtdReforecastQ3 ELSE NULL END),0) AS YtdReforecastQ3,
		0 AS YtdVarianceQ0, --Done Below for it use these results to sub calculate
		0 AS YtdVarianceQ1, --Done Below for it use these results to sub calculate
		0 AS YtdVarianceQ2, --Done Below for it use these results to sub calculate
		0 AS YtdVarianceQ3, --Done Below for it use these results to sub calculate
		ISNULL(((INC.AnnualOriginalBudget + EP.AnnualOriginalBudget) / CASE WHEN INC.AnnualOriginalBudget <> 0 THEN INC.AnnualOriginalBudget ELSE NULL END),0) AS AnnualOriginalBudget,
		ISNULL(((INC.AnnualReforecastQ1 + EP.AnnualReforecastQ1) / CASE WHEN INC.AnnualReforecastQ1 <> 0 THEN INC.AnnualReforecastQ1 ELSE NULL END),0) AS AnnualReforecastQ1,
		ISNULL(((INC.AnnualReforecastQ2 + EP.AnnualReforecastQ2) / CASE WHEN INC.AnnualReforecastQ2 <> 0 THEN INC.AnnualReforecastQ2 ELSE NULL END),0) AS AnnualReforecastQ2,
		ISNULL(((INC.AnnualReforecastQ3 + EP.AnnualReforecastQ3) / CASE WHEN INC.AnnualReforecastQ3 <> 0 THEN INC.AnnualReforecastQ3 ELSE NULL END),0) AS AnnualReforecastQ3
		
FROM	(
		Select 
				ISNULL(SUM(t1.MtdActual),0) MtdActual,
				ISNULL(SUM(t1.MtdOriginalBudget),0) MtdOriginalBudget,
				ISNULL(SUM(t1.MtdReforecastQ1),0) MtdReforecastQ1,
				ISNULL(SUM(t1.MtdReforecastQ2),0) MtdReforecastQ2,
				ISNULL(SUM(t1.MtdReforecastQ3),0) MtdReforecastQ3,
				ISNULL(SUM(t1.MtdVarianceQ0),0) MtdVarianceQ0,
				ISNULL(SUM(t1.MtdVarianceQ1),0) MtdVarianceQ1,
				ISNULL(SUM(t1.MtdVarianceQ2),0) MtdVarianceQ2,
				ISNULL(SUM(t1.MtdVarianceQ3),0) MtdVarianceQ3,
				ISNULL(SUM(t1.YtdActual),0) YtdActual,
				ISNULL(SUM(t1.YtdOriginalBudget),0) YtdOriginalBudget,
				ISNULL(SUM(t1.YtdReforecastQ1),0) YtdReforecastQ1,
				ISNULL(SUM(t1.YtdReforecastQ2),0) YtdReforecastQ2,
				ISNULL(SUM(t1.YtdReforecastQ3),0) YtdReforecastQ3,
				ISNULL(SUM(t1.YtdVarianceQ0),0) YtdVarianceQ0,
				ISNULL(SUM(t1.YtdVarianceQ1),0) YtdVarianceQ1,
				ISNULL(SUM(t1.YtdVarianceQ2),0) YtdVarianceQ2,
				ISNULL(SUM(t1.YtdVarianceQ3),0) YtdVarianceQ3,
				ISNULL(SUM(t1.AnnualOriginalBudget),0) AnnualOriginalBudget,
				ISNULL(SUM(t1.AnnualReforecastQ1),0) AnnualReforecastQ1,
				ISNULL(SUM(t1.AnnualReforecastQ2),0) AnnualReforecastQ2,
				ISNULL(SUM(t1.AnnualReforecastQ3),0) AnnualReforecastQ3

		From #DetailResult t1
		Where	t1.FeeOrExpense				= 'INCOME'
		) INC
		CROSS JOIN (
		Select 
				ISNULL(SUM(t1.MtdActual),0) MtdActual,
				ISNULL(SUM(t1.MtdOriginalBudget),0) MtdOriginalBudget,
				ISNULL(SUM(t1.MtdReforecastQ1),0) MtdReforecastQ1,
				ISNULL(SUM(t1.MtdReforecastQ2),0) MtdReforecastQ2,
				ISNULL(SUM(t1.MtdReforecastQ3),0) MtdReforecastQ3,
				ISNULL(SUM(t1.MtdVarianceQ0),0) MtdVarianceQ0,
				ISNULL(SUM(t1.MtdVarianceQ1),0) MtdVarianceQ1,
				ISNULL(SUM(t1.MtdVarianceQ2),0) MtdVarianceQ2,
				ISNULL(SUM(t1.MtdVarianceQ3),0) MtdVarianceQ3,
				ISNULL(SUM(t1.YtdActual),0) YtdActual,
				ISNULL(SUM(t1.YtdOriginalBudget),0) YtdOriginalBudget,
				ISNULL(SUM(t1.YtdReforecastQ1),0) YtdReforecastQ1,
				ISNULL(SUM(t1.YtdReforecastQ2),0) YtdReforecastQ2,
				ISNULL(SUM(t1.YtdReforecastQ3),0) YtdReforecastQ3,
				ISNULL(SUM(t1.YtdVarianceQ0),0) YtdVarianceQ0,
				ISNULL(SUM(t1.YtdVarianceQ1),0) YtdVarianceQ1,
				ISNULL(SUM(t1.YtdVarianceQ2),0) YtdVarianceQ2,
				ISNULL(SUM(t1.YtdVarianceQ3),0) YtdVarianceQ3,
				ISNULL(SUM(t1.AnnualOriginalBudget),0) AnnualOriginalBudget,
				ISNULL(SUM(t1.AnnualReforecastQ1),0) AnnualReforecastQ1,
				ISNULL(SUM(t1.AnnualReforecastQ2),0) AnnualReforecastQ2,
				ISNULL(SUM(t1.AnnualReforecastQ3),0) AnnualReforecastQ3

			From #DetailResult t1
			Where	t1.FeeOrExpense		= 'Expense'
			AND		t1.ReimbursableName = 'Not Reimbursable'
		) EP

--Calculate the Profit Variance Columns
Update 		#Result
Set			
			MtdVarianceQ0 = MtdActual - MtdOriginalBudget,
			MtdVarianceQ1 = MtdActual - MtdReforecastQ1,
			MtdVarianceQ2 = MtdActual - MtdReforecastQ2,
			MtdVarianceQ3 = MtdActual - MtdReforecastQ3,
			YtdVarianceQ0 = YtdActual - YtdOriginalBudget,
			YtdVarianceQ1 = YtdActual - YtdReforecastQ1,
			YtdVarianceQ2 = YtdActual - YtdReforecastQ2,
			YtdVarianceQ3 = YtdActual - YtdReforecastQ3

Where	GroupDisplayCode = 'PROFITMARGIN'
AND		DisplayOrderNumber = 331	
		
		
--------------------------------------------------------------------------------------------------------------------------------------	
--Final Common block to set the Variance% columns
--------------------------------------------------------------------------------------------------------------------------------------	
		
Update #Result
Set		
	MtdVariancePercentageQ0 = ISNULL(MtdVarianceQ0 / CASE WHEN MtdOriginalBudget <> 0 THEN MtdOriginalBudget ELSE NULL END,0) ,
	MtdVariancePercentageQ1 = ISNULL(MtdVarianceQ1 / CASE WHEN MtdReforecastQ1 <> 0 THEN MtdReforecastQ1 ELSE NULL END,0) ,
	MtdVariancePercentageQ2 = ISNULL(MtdVarianceQ2 / CASE WHEN MtdReforecastQ2 <> 0 THEN MtdReforecastQ2 ELSE NULL END,0) ,
	MtdVariancePercentageQ3 = ISNULL(MtdVarianceQ3 / CASE WHEN MtdReforecastQ3 <> 0 THEN MtdReforecastQ3 ELSE NULL END,0) ,

	YtdVariancePercentageQ0 = ISNULL(YtdVarianceQ0 / CASE WHEN YtdOriginalBudget <> 0 THEN YtdOriginalBudget ELSE NULL END,0) ,
	YtdVariancePercentageQ1 = ISNULL(YtdVarianceQ1 / CASE WHEN YtdReforecastQ1 <> 0 THEN YtdReforecastQ1 ELSE NULL END,0) ,
	YtdVariancePercentageQ2 = ISNULL(YtdVarianceQ2 / CASE WHEN YtdReforecastQ2 <> 0 THEN YtdReforecastQ2 ELSE NULL END,0) ,
	YtdVariancePercentageQ3 = ISNULL(YtdVarianceQ3 / CASE WHEN YtdReforecastQ3 <> 0 THEN YtdReforecastQ3 ELSE NULL END,0) 
Where GroupDisplayCode NOT IN('Payroll Reimbursement Rate','Overhead Reimbursement Rate','PROFITMARGIN')

--UNKNOWN MajorCategory

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber)
Select 
		0 NumberOfSpacesToPad,
		'BLANK' GroupDisplayCode,
		'',
		340 DisplayOrderNumber

Insert Into #Result
(NumberOfSpacesToPad, GroupDisplayCode, GroupDisplayName, DisplayOrderNumber,
MtdActual,MtdOriginalBudget,MtdReforecastQ1,MtdReforecastQ2,MtdReforecastQ3,
MtdVarianceQ0,MtdVarianceQ1,MtdVarianceQ2,MtdVarianceQ3,
YtdActual,	YtdOriginalBudget,YtdReforecastQ1,YtdReforecastQ2,YtdReforecastQ3,
YtdVarianceQ0,YtdVarianceQ1,YtdVarianceQ2,YtdVarianceQ3,
AnnualOriginalBudget,AnnualReforecastQ1,AnnualReforecastQ2,AnnualReforecastQ3)

Select 
		0 NumberOfSpacesToPad,
		'UNKNOWN' GroupDisplayCode,
		'Unknown',
		341 DisplayOrderNumber,
		ISNULL(SUM(t1.MtdActual),0),
		ISNULL(SUM(t1.MtdOriginalBudget),0),
		ISNULL(SUM(t1.MtdReforecastQ1),0),
		ISNULL(SUM(t1.MtdReforecastQ2),0),
		ISNULL(SUM(t1.MtdReforecastQ3),0),
		ISNULL(SUM(t1.MtdVarianceQ0),0),
		ISNULL(SUM(t1.MtdVarianceQ1),0),
		ISNULL(SUM(t1.MtdVarianceQ2),0),
		ISNULL(SUM(t1.MtdVarianceQ3),0),
		ISNULL(SUM(t1.YtdActual),0),
		ISNULL(SUM(t1.YtdOriginalBudget),0),
		ISNULL(SUM(t1.YtdReforecastQ1),0),
		ISNULL(SUM(t1.YtdReforecastQ2),0),
		ISNULL(SUM(t1.YtdReforecastQ3),0),
		ISNULL(SUM(t1.YtdVarianceQ0),0),
		ISNULL(SUM(t1.YtdVarianceQ1),0),
		ISNULL(SUM(t1.YtdVarianceQ2),0),
		ISNULL(SUM(t1.YtdVarianceQ3),0),
		ISNULL(SUM(t1.AnnualOriginalBudget),0),
		ISNULL(SUM(t1.AnnualReforecastQ1),0),
		ISNULL(SUM(t1.AnnualReforecastQ2),0),
		ISNULL(SUM(t1.AnnualReforecastQ3),0)

From #DetailResult t1
Where	t1.MajorExpenseCategoryName	= 'UNKNOWN'
Having (
		ISNULL(SUM(t1.MtdActual),0) <> 0 OR 
		ISNULL(SUM(t1.MtdOriginalBudget),0) <> 0 OR 
		ISNULL(SUM(t1.MtdReforecastQ1),0) <> 0 OR 
		ISNULL(SUM(t1.MtdReforecastQ2),0) <> 0 OR 
		ISNULL(SUM(t1.MtdReforecastQ3),0) <> 0 OR 
		ISNULL(SUM(t1.MtdVarianceQ0),0) <> 0 OR 
		ISNULL(SUM(t1.MtdVarianceQ1),0) <> 0 OR 
		ISNULL(SUM(t1.MtdVarianceQ2),0) <> 0 OR 
		ISNULL(SUM(t1.MtdVarianceQ3),0) <> 0 OR 
		ISNULL(SUM(t1.YtdActual),0) <> 0 OR 
		ISNULL(SUM(t1.YtdOriginalBudget),0) <> 0 OR 
		ISNULL(SUM(t1.YtdReforecastQ1),0) <> 0 OR 
		ISNULL(SUM(t1.YtdReforecastQ2),0) <> 0 OR 
		ISNULL(SUM(t1.YtdReforecastQ3),0) <> 0 OR 
		ISNULL(SUM(t1.YtdVarianceQ0),0) <> 0 OR 
		ISNULL(SUM(t1.YtdVarianceQ1),0) <> 0 OR 
		ISNULL(SUM(t1.YtdVarianceQ2),0) <> 0 OR 
		ISNULL(SUM(t1.YtdVarianceQ3),0) <> 0 OR 
		ISNULL(SUM(t1.AnnualOriginalBudget),0) <> 0 OR 
		ISNULL(SUM(t1.AnnualReforecastQ1),0) <> 0 OR 
		ISNULL(SUM(t1.AnnualReforecastQ2),0) <> 0 OR 
		ISNULL(SUM(t1.AnnualReforecastQ3),0) <> 0
	)




--------------------------------------------------------------------------------------------------------------------------------------	
--Final Result
--------------------------------------------------------------------------------------------------------------------------------------	

Select 
	NumberOfSpacesToPad,
	GroupDisplayCode,
	REPLICATE(' ', NumberOfSpacesToPad) + GroupDisplayName AS GroupDisplayName,
	DisplayOrderNumber,
	MtdActual,
	MtdOriginalBudget,
	MtdReforecastQ1,
	MtdReforecastQ2,
	MtdReforecastQ3,
	
	MtdVarianceQ0,
	MtdVarianceQ1,
	MtdVarianceQ2,
	MtdVarianceQ3,

	MtdVariancePercentageQ0,
	MtdVariancePercentageQ1,
	MtdVariancePercentageQ2,
	MtdVariancePercentageQ3,
	
	YtdActual,
	YtdOriginalBudget,
	YtdReforecastQ1,
	YtdReforecastQ2,
	YtdReforecastQ3,
	
	YtdVarianceQ0,
	YtdVarianceQ1,
	YtdVarianceQ2,
	YtdVarianceQ3,

	YtdVariancePercentageQ0,
	YtdVariancePercentageQ1,
	YtdVariancePercentageQ2,
	YtdVariancePercentageQ3,
		
	AnnualOriginalBudget,
	AnnualReforecastQ1,
	AnnualReforecastQ2,
	AnnualReforecastQ3
From #Result
Order By 
	DisplayOrderNumber,
	#Result.GroupDisplayCode

--Second Resultset for Excel
Select * From #DetailResult

GO

